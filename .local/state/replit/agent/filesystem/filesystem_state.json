{"file_contents":{"README.md":{"content":"## Getting Started with Open AI API\n\n### For Demo\n\nFor testing the demo you have to add the api-key.\n\n- Got to /ai-examples\n- Click on the **Set API Key** button\n\n![Set Api Key](set-api-key.png)\n\nAnd save it.\n\nOnce you are done testing you can remove the key from here:\n\n![Remove Api Key](remove-api-key.png)\n\n### For Developement\n\nFor developement you have to save the Api-Key on the .env file with the follwing name\n\n```\nOPENAI_API_KEY=YOUR_API_KEY\n```\n\n### How to change the model?\n\nBy default we are using the `gpt-3.5-turbo` model.\nIf you want to use other model you can do that too.\n\nTo change the model, open up the template in your code editor.\nThen go to the route.ts file under **ai-examples** and add your prefered model\n\nNote: You can find all the model from here: https://platform.openai.com/docs/models/overview\n\n![Change model](change-model.png)\n\n## Installation and Configuration\n\nYou must follow the documentation setp by step in this order to do a successful installation and configuration.\n\n### [AI Tool Installation and Config Docs](https://nextjstemplates.com/docs/templates#ai-tool)\n\n---\n\n### Deploying on PaaS\n\nIf you are using a GitHub repo then you can go with free-of-cost and easy-to-use options like [Vercel](https://vercel.com/), or [Netlify](https://netlify.com/) they offer decent-free tiers for Next.js hosting.\n\n#### If you are using Prisma ORM (Comes with All Starter Templates)\n\nMake sure to edit build command like this while you use Prisma as ORM while deploying to Vercel.\n\n![prisma-vercel](https://nextjstemplates.com/docs/prisma-vercel.png)\n\n### Update Logs\n\n**March 2025:**\n- Upgraded to TailwindCSS v4 and Next.js v15\n- Removed unused packages and fixed installation issues\n- Optimized font by importing from next/font/google\n- Refactored docs page:\n  - Rewrote sidebar and moved to layout file\n  - Using tailwind-typography plugin for content styles\n  - Fixed responsive issues\n- Proper links for sharing blogs\n\n**November 2024:**\n- Added integrations enable disble features\n- Integrated zod for Form validation\n- Removed package-lock.json file\n\n**February 2024:**\n- Updated Stripe Integraion: Loading pricing data from pricingData file\n\n\n**March 2024:**\n- Upgraded to next 14\n- Fixed auth issues\n- Updated all the packages\n- Update ts config & fix all the issues\n- Update signin & signup page design\n- Integrated Magic link signin &\n- Forgot password\n- Added loader on buttons\n","size_bytes":2423},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n","size_bytes":211},"pages/_app.tsx":{"content":"import '../styles/globals.css'\nimport type { AppProps } from 'next/app'\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const [queryClient] = useState(() => new QueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: 5 * 60 * 1000, // 5 minutes\n        retry: 1,\n      },\n    },\n  }));\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Component {...pageProps} />\n    </QueryClientProvider>\n  )\n}\n\nexport default MyApp\n","size_bytes":567},"pages/index.tsx":{"content":"import type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useAuth } from \"../hooks/useAuth\";\n\nconst Home: NextPage = () => {\n  const { user, isAuthenticated, login, logout } = useAuth();\n  return (\n    <>\n      <Head>\n        <title>ComplianceDrone - Aerial Construction Management Platform</title>\n        <meta name=\"description\" content=\"Our aerial construction management platform has saved companies millions in avoided catastrophes. We know how to find issues impacting your plants performance.\" />\n        <meta name=\"keywords\" content=\"aerial construction management, thermal inspection, drone services, solar panel inspection, electrical inspection, thermal imaging\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      {/* Full Page Gradient Background */}\n      <div className=\"landing-gradient min-h-screen\">\n        \n        {/* Minimal Header */}\n        <header className=\"relative z-10\">\n          <div className=\"cd-container\">\n            <nav className=\"flex items-center justify-between py-6\">\n              <div className=\"flex items-center space-x-3\">\n                <Image \n                  src=\"/compliance-drone-shield-logo.png\" \n                  alt=\"ComplianceDrone Logo\" \n                  width={50} \n                  height={50}\n                  priority\n                  className=\"rounded-lg\"\n                />\n                <h1 className=\"text-2xl font-bold text-white\">ComplianceDrone</h1>\n              </div>\n              <div className=\"flex items-center space-x-6\">\n                {isAuthenticated ? (\n                  <>\n                    <Link href=\"/dashboard\" className=\"text-white hover:text-gray-200 transition-colors\">Dashboard</Link>\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-white text-sm\">\n                        {user?.firstName ? `${user.firstName} ${user.lastName}` : user?.email}\n                      </span>\n                      <button onClick={logout} className=\"text-white text-sm hover:text-gray-200 transition-colors\">\n                        Logout\n                      </button>\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"flex items-center space-x-4\">\n                    <button onClick={login} className=\"text-white hover:text-gray-200 transition-colors font-medium\">\n                      Sign In\n                    </button>\n                    <Link href=\"/register\" className=\"bg-white bg-opacity-20 text-white px-4 py-2 rounded-lg hover:bg-opacity-30 transition-all font-medium\">\n                      Sign Up\n                    </Link>\n                  </div>\n                )}\n              </div>\n            </nav>\n          </div>\n        </header>\n\n        {/* Main Message Card */}\n        <section className=\"relative z-10 flex items-center justify-center px-4\" style={{minHeight: 'calc(100vh - 200px)'}}>\n          <div className=\"message-card-centered mx-auto\">\n            <div className=\"text-center\">\n              \n              <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n                Our aerial construction management platform has saved companies millions in avoided catastrophes\n              </h1>\n              \n              <p className=\"text-xl md:text-2xl text-white/90 mb-12 max-w-3xl mx-auto\">\n                We know how to find issues impacting your plants performance\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n                <Link href=\"/register\" className=\"btn-primary-large\">\n                  Apply to Fly\n                </Link>\n                <Link href=\"/contact\" className=\"btn-secondary-large\">\n                  Request a Quote\n                </Link>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Secondary Pilot Recruitment Section */}\n        <section className=\"relative z-10 pb-16\">\n          <div className=\"cd-container max-w-2xl mx-auto text-center\">\n            <div className=\"recruitment-card\">\n              <p className=\"text-lg text-gray-600 mb-6\">\n                Fill out our registration form in 5 minutes and receive follow-up to join our team\n              </p>\n              <Link href=\"/register\" className=\"btn-secondary\">\n                Apply to Fly\n              </Link>\n            </div>\n          </div>\n        </section>\n\n      </div>\n    </>\n  );\n};\n\nexport default Home;","size_bytes":4626},"styles/globals.css":{"content":"@import \"tailwindcss\";\n\nhtml,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n  background-color: #f8fafc;\n}\n\n:root {\n  --compliance-orange: #D97706;\n  --compliance-peach: #FB923C;\n  --compliance-blue-dark: #475569;\n  --compliance-blue: #64748B;\n  --compliance-slate: #6B7280;\n  --compliance-warm: #78716C;\n  --background: #f8fafc;\n  --white: #ffffff;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n/* ComplianceDrone Professional Styling */\n.gradient-bg {\n  background: linear-gradient(135deg, var(--compliance-blue-dark) 0%, var(--compliance-slate) 35%, var(--compliance-peach) 100%);\n}\n\n.btn-primary {\n  background: linear-gradient(135deg, var(--compliance-orange), var(--compliance-peach));\n  color: white;\n  padding: 12px 24px;\n  border-radius: 8px;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0 4px 14px 0 rgba(217, 119, 6, 0.3);\n}\n\n.btn-primary:hover {\n  background: linear-gradient(135deg, #c2410c, var(--compliance-orange));\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px 0 rgba(217, 119, 6, 0.4);\n}\n\n.btn-secondary {\n  background: linear-gradient(135deg, var(--compliance-blue-dark), var(--compliance-blue));\n  color: white;\n  padding: 12px 24px;\n  border-radius: 8px;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0 4px 14px 0 rgba(71, 85, 105, 0.3);\n}\n\n.btn-secondary:hover {\n  background: linear-gradient(135deg, #334155, var(--compliance-blue-dark));\n  transform: translateY(-2px);\n  box-shadow: 0 6px 20px 0 rgba(71, 85, 105, 0.4);\n}\n\n.card {\n  background: white;\n  border-radius: 12px;\n  padding: 24px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);\n}\n\n.section-padding {\n  padding: 80px 0;\n}\n\n.cd-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 20px;\n}\n\n.text-gradient {\n  background: linear-gradient(135deg, var(--compliance-blue-dark), var(--compliance-orange));\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.hero-image {\n  border-radius: 12px;\n  box-shadow: 0 20px 40px -4px rgba(0, 0, 0, 0.25);\n}\n\n.cd-grid {\n  display: grid;\n}\n\n.cd-grid-2 {\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n}\n\n.cd-grid-3 {\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n}\n\n.cd-grid-4 {\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n}\n\n@media (max-width: 768px) {\n  .cd-grid-2 {\n    grid-template-columns: 1fr;\n  }\n  \n  .section-padding {\n    padding: 40px 0;\n  }\n}\n\n/* New Landing Page Styles */\n.landing-gradient {\n  background: linear-gradient(135deg, var(--compliance-blue-dark) 0%, var(--compliance-slate) 40%, var(--compliance-orange) 70%, var(--compliance-peach) 100%);\n  position: relative;\n  overflow: hidden;\n}\n\n.landing-gradient::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: radial-gradient(circle at 30% 20%, rgba(251, 146, 60, 0.3) 0%, transparent 50%),\n              radial-gradient(circle at 70% 80%, rgba(217, 119, 6, 0.2) 0%, transparent 50%);\n  z-index: 1;\n}\n\n.message-card {\n  background: rgba(255, 255, 255, 0.15);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  border-radius: 24px;\n  padding: 4rem 3rem;\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n  position: relative;\n  z-index: 10;\n}\n\n.message-card-centered {\n  background: rgba(255, 255, 255, 0.15);\n  backdrop-filter: blur(20px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  border-radius: 24px;\n  padding: 3rem 2.5rem;\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n  position: relative;\n  z-index: 10;\n  max-width: 600px;\n  width: 90%;\n}\n\n.recruitment-card {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border-radius: 16px;\n  padding: 2rem;\n  box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);\n  position: relative;\n  z-index: 10;\n}\n\n.btn-primary-large {\n  background: linear-gradient(135deg, var(--compliance-orange), var(--compliance-peach));\n  color: white;\n  padding: 18px 36px;\n  border-radius: 12px;\n  font-weight: 700;\n  font-size: 1.125rem;\n  transition: all 0.3s ease;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0 6px 20px 0 rgba(217, 119, 6, 0.4);\n  text-decoration: none;\n  display: inline-block;\n  text-align: center;\n}\n\n.btn-primary-large:hover {\n  background: linear-gradient(135deg, #c2410c, var(--compliance-orange));\n  transform: translateY(-3px);\n  box-shadow: 0 8px 25px 0 rgba(217, 119, 6, 0.5);\n}\n\n.btn-secondary-large {\n  background: transparent;\n  color: white;\n  padding: 18px 36px;\n  border-radius: 12px;\n  font-weight: 700;\n  font-size: 1.125rem;\n  transition: all 0.3s ease;\n  border: 2px solid rgba(255, 255, 255, 0.8);\n  cursor: pointer;\n  text-decoration: none;\n  display: inline-block;\n  text-align: center;\n}\n\n.btn-secondary-large:hover {\n  background: rgba(255, 255, 255, 0.1);\n  border-color: white;\n  transform: translateY(-3px);\n  box-shadow: 0 6px 20px 0 rgba(255, 255, 255, 0.2);\n}\n\n@media (max-width: 768px) {\n  .message-card {\n    padding: 2.5rem 2rem;\n  }\n  \n  .btn-primary-large,\n  .btn-secondary-large {\n    width: 100%;\n    text-align: center;\n  }\n}\n\n/* Form Styles */\n.form-label {\n  display: block;\n  font-size: 0.875rem;\n  font-weight: 600;\n  color: #374151;\n  margin-bottom: 0.5rem;\n}\n\n.form-input,\n.form-textarea {\n  width: 100%;\n  padding: 0.75rem 1rem;\n  border: 1px solid #D1D5DB;\n  border-radius: 0.5rem;\n  font-size: 1rem;\n  transition: all 0.2s ease;\n  background-color: white;\n}\n\n.form-input:focus,\n.form-textarea:focus {\n  outline: none;\n  border-color: var(--compliance-orange);\n  box-shadow: 0 0 0 3px rgba(217, 119, 6, 0.1);\n}\n\n.form-input::placeholder,\n.form-textarea::placeholder {\n  color: #9CA3AF;\n}\n\n.form-error {\n  color: #DC2626;\n  font-size: 0.875rem;\n  margin-top: 0.25rem;\n}\n\n.form-checkbox {\n  width: 1rem;\n  height: 1rem;\n  color: var(--compliance-orange);\n  border-radius: 0.25rem;\n  border: 1px solid #D1D5DB;\n}\n\n.form-checkbox:focus {\n  ring: 2px;\n  ring-color: rgba(217, 119, 6, 0.2);\n}\n\n/* Grid Extensions */\n.cd-grid-span-2 {\n  grid-column: span 2;\n}\n\n@media (max-width: 768px) {\n  .cd-grid-span-2 {\n    grid-column: span 1;\n  }\n}","size_bytes":6474},"pages/api/hello.ts":{"content":"// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype Data = {\n  name: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  res.status(200).json({ name: 'John Doe' })\n}\n","size_bytes":307},"replit.md":{"content":"# ComplianceDrone.com - Thermal Inspection Platform\n\n## Overview\nComplianceDrone.com is a professional thermal inspection platform that uses AI-powered drone technology to detect thermal anomalies in solar installations and electrical infrastructure. The platform processes 100+ thermal images and generates comprehensive PDF reports in under 5 minutes.\n\n## Project Architecture\n- **Frontend**: Next.js 15 with TypeScript and Tailwind CSS\n- **Language**: Node.js 20\n- **Styling**: Custom CSS with gradient branding and professional design\n- **Images**: Real thermal inspection photos from drone operations\n\n## Key Features\n- AI-powered thermal anomaly detection (trained on 4,000+ thermal images)\n- Automated processing of up to 500 thermal images\n- GPS coordinate mapping for maintenance scheduling\n- Professional PDF report generation\n- Certified pilot network integration\n\n## Brand Colors\n- Primary Orange: #D97706 (sunset orange)\n- Secondary Orange: #FB923C (sunset peach)  \n- Primary Blue: #475569 (blue-gray dark)\n- Secondary Blue: #64748B (blue-gray light)\n- Accent Grey: #6B7280 (slate blue)\n\n## Design Theme\n- **Main gradient**: Blue-gray theme (replaced purple) - from dark blue-gray (#475569) to light blue-gray (#64748B) to slate (#6B7280)\n- **Logo**: Professional ComplianceDrone banner logo with thermal grid pattern and checkmark\n- **Button gradients**: Blue-gray focused for professional appearance\n\n## Recent Changes\n- **September 17, 2025**: Community features and email integration added\n  - Nationwide pilot community section with newsletter signup\n  - Replit Mail integration for automated welcome emails  \n  - Enhanced pilot recruitment messaging (coast-to-coast coverage)\n  - Newsletter API endpoint for solar/drone inspection updates\n- **September 16, 2025**: Initial project setup with professional thermal inspection branding\n  - ComplianceDrone homepage with real thermal inspection images\n  - Professional blue-gray gradient design system (replaced purple)\n  - Hero section showcasing large-scale solar installation capabilities\n  - New ComplianceDrone banner logo with thermal grid pattern integrated\n\n## User Preferences\n- Professional, corporate design aesthetic\n- Real inspection images over stock photos\n- Fast loading performance for image-heavy content\n- Mobile-responsive design for field use\n\n## Services Offered\n1. **Electrical Infrastructure Inspection**: Detect overheating switches, transformers, and connections\n2. **Solar Panel Array Analysis**: Identify hot spots, cell failures, and module defects\n3. **Anomaly Detection**: Precise thermal mapping with GPS coordinates\n\n## Technology Stack\n- Next.js for server-side rendering and performance\n- TypeScript for type safety\n- Tailwind CSS for responsive design\n- Professional thermal inspection imagery\n- Automated workflow processing capabilities","size_bytes":2839},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        'compliance-orange': '#D97706',\n        'compliance-peach': '#FB923C',\n        'compliance-blue-dark': '#475569',\n        'compliance-blue': '#64748B',\n        'compliance-slate': '#6B7280',\n        'compliance-warm': '#78716C',\n      },\n      fontFamily: {\n        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif'],\n      },\n      backgroundImage: {\n        'gradient-compliance': 'linear-gradient(135deg, #475569 0%, #64748B 50%, #6B7280 100%)',\n        'gradient-orange': 'linear-gradient(135deg, #D97706, #FB923C)',\n        'gradient-blue': 'linear-gradient(135deg, #475569, #64748B)',\n        'gradient-blue-dark': 'linear-gradient(135deg, #334155, #475569)',\n      },\n      boxShadow: {\n        'compliance': '0 4px 14px 0 rgba(217, 119, 6, 0.3)',\n        'compliance-hover': '0 6px 20px 0 rgba(217, 119, 6, 0.4)',\n      }\n    },\n  },\n  plugins: [],\n}","size_bytes":1142},"attached_assets/ClaudeMain1_fixed_1758036993823.py":{"content":"import os\r\nimport sys\r\nimport reportlab\r\nfrom PIL import Image\r\nimport pandas as pd\r\nfrom reportlab.lib.utils import ImageReader\r\nfrom reportlab.pdfbase import pdfmetrics\r\nfrom reportlab.pdfbase.ttfonts import TTFont\r\nfrom reportlab.pdfgen import canvas\r\nfrom reportlab.lib.pagesizes import letter, legal\r\nfrom dotenv import load_dotenv\r\nfrom pypdf import PdfReader, PdfWriter\r\nimport json\r\n\r\nload_dotenv()\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nreportlab.rl_config.TTFSearchPath.append(os.path.join(BASE_DIR, 'fonts'))\r\n\r\n# Default column mappings that can be overridden via environment variables\r\nDEFAULT_COLUMN_MAPPINGS = {\r\n    \"location_number\": \"Location #\",\r\n    \"incident_id\": \"Incident_ID\",\r\n    \"date\": \"Date\",\r\n    \"inspection_type\": \"Inspection Type\",\r\n    \"finding\": \"Finding\",\r\n    \"location\": \"Location\",\r\n    \"map_image\": \"Map\",  # Renamed from \"Inverter Block\" to \"Map\"\r\n    \"area\": \"Inverter_ID / Area\",\r\n    \"reference\": \"Reference Doc\",\r\n    \"image_columns\": [\"Thermal_Photo\", \"Annotated Image\", \"Wide Photo Name\", \"Zoom Photo Name\"],\r\n    \"latitude\": \"Latitude\",\r\n    \"longitude\": \"Longitude\"\r\n}\r\n\r\n\r\ndef load_column_mappings():\r\n    \"\"\"Load column mappings from environment variable or use defaults\"\"\"\r\n    custom_mappings = os.environ.get(\"COLUMN_MAPPINGS\", \"\")\r\n    if custom_mappings:\r\n        try:\r\n            return json.loads(custom_mappings)\r\n        except json.JSONDecodeError:\r\n            print(\"Error parsing COLUMN_MAPPINGS, using defaults\")\r\n    \r\n    # Allow individual column overrides\r\n    mappings = DEFAULT_COLUMN_MAPPINGS.copy()\r\n    for key in mappings:\r\n        env_override = os.environ.get(f\"COLUMN_{key.upper()}\")\r\n        if env_override:\r\n            mappings[key] = env_override\r\n    \r\n    # Handle image columns specially\r\n    image_columns_str = os.environ.get(\"IMAGE_COLUMNS\", \"\")\r\n    if image_columns_str:\r\n        mappings[\"image_columns\"] = [x.strip() for x in image_columns_str.split(\",\") if x.strip()]\r\n        \r\n    return mappings\r\n\r\n\r\ndef create_pdf(output_pdf, pagesize=None):\r\n    \"\"\"Create a new PDF canvas with the specified page size\"\"\"\r\n    if pagesize is None:\r\n        pagesize_name = os.environ.get(\"PAGE_SIZE\", \"legal\").lower()\r\n        if pagesize_name == \"letter\":\r\n            pagesize = letter\r\n        else:\r\n            pagesize = legal\r\n    \r\n    return canvas.Canvas(output_pdf, pagesize=pagesize)\r\n\r\n\r\ndef get_spreadsheet(csv_path):\r\n    \"\"\"Load CSV data with proper encoding\"\"\"\r\n    encoding = os.environ.get(\"CSV_ENCODING\", \"utf-8\")\r\n    return pd.read_csv(csv_path, encoding=encoding)\r\n\r\n\r\ndef start_new_page(pdf):\r\n    \"\"\"Start a new page in the PDF\"\"\"\r\n    pdf.showPage()\r\n\r\n\r\ndef get_page_dimensions():\r\n    \"\"\"Get page dimensions based on configured page size\"\"\"\r\n    pagesize_name = os.environ.get(\"PAGE_SIZE\", \"legal\").lower()\r\n    if pagesize_name == \"letter\":\r\n        return letter\r\n    else:\r\n        return legal\r\n\r\n\r\ndef get_page_width():\r\n    \"\"\"Get page width based on configured page size\"\"\"\r\n    width, height = get_page_dimensions()\r\n    return width\r\n\r\n\r\ndef get_page_height():\r\n    \"\"\"Get page height based on configured page size\"\"\"\r\n    width, height = get_page_dimensions()\r\n    return height\r\n\r\n\r\ndef calculate_scaled_image_dimensions(image_path, target_width=None, target_height=None):\r\n    \"\"\"Calculate scaled dimensions maintaining aspect ratio\"\"\"\r\n    with Image.open(image_path) as img:\r\n        w, h = img.size\r\n    \r\n    if target_width and not target_height:\r\n        return target_width, int(target_width * h / w)\r\n    elif target_height and not target_width:\r\n        return int(target_height * w / h), target_height\r\n    elif target_width and target_height:\r\n        return target_width, target_height\r\n    else:\r\n        return w, h\r\n\r\n\r\ndef resize_image(image_path, output_path, target_width=None, target_height=None):\r\n    \"\"\"Resize image maintaining aspect ratio if only one dimension specified\"\"\"\r\n    try:\r\n        img = Image.open(image_path)\r\n        \r\n        if target_width or target_height:\r\n            w, h = img.size\r\n            \r\n            if target_width and not target_height:\r\n                target_height = int(h * target_width / w)\r\n            elif target_height and not target_width:\r\n                target_width = int(w * target_height / h)\r\n                \r\n            img = img.resize((target_width, target_height))\r\n        \r\n        # Determine the output format\r\n        _, ext = os.path.splitext(output_path)\r\n        if ext.lower() in ['.jpg', '.jpeg']:\r\n            img.save(output_path, 'JPEG', quality=95)\r\n        else:\r\n            img.save(output_path, 'PNG')\r\n            \r\n    except Exception as e:\r\n        print(f\"Error resizing image {image_path}: {e}\")\r\n        # Just copy the file if we can't resize it\r\n        img.save(output_path)\r\n\r\n\r\ndef delete_image(image_path):\r\n    \"\"\"Delete a temporary image file\"\"\"\r\n    if os.path.exists(image_path):\r\n        try:\r\n            os.remove(image_path)\r\n        except Exception as e:\r\n            print(f\"Could not delete {image_path}: {e}\")\r\n    else:\r\n        print(f\"File does not exist: {image_path}\")\r\n\r\n\r\ndef get_file_extension(file_path):\r\n    \"\"\"Get the file extension without the dot\"\"\"\r\n    _, file_extension = os.path.splitext(file_path)\r\n    return file_extension[1:] if file_extension else 'png'\r\n\r\n\r\ndef split_list(input_list, size):\r\n    \"\"\"Split a list into chunks of specified size\"\"\"\r\n    return [input_list[i:i + size] for i in range(0, len(input_list), size)]\r\n\r\n\r\ndef add_location_header(pdf, location_number, x, y):\r\n    \"\"\"Add location number at the top of the images section\"\"\"\r\n    if not location_number:\r\n        return\r\n        \r\n    location_font = os.environ.get(\"LOCATION_FONT\", \"Helvetica\")\r\n    location_font_size = int(os.environ.get(\"DATA_LOCATION_FONT_SIZE\", 12))\r\n    location_label = os.environ.get(\"LOCATION_LABEL\", \"Location\")\r\n    \r\n    pdf.setFont(location_font, location_font_size)\r\n    pdf.drawString(x, y, f\"{location_label}: #{location_number}\")\r\n\r\n\r\ndef add_images_to_pdf(pdf, image_list_found, location_number, logo_offset):\r\n    \"\"\"Add images to the PDF in a grid layout\"\"\"\r\n    images_per_row = int(os.environ.get('IMAGES_PER_ROW', 2))\r\n    image_grid_row_height = int(os.environ.get('IMAGE_GRID_ROW_HEIGHT', 200))\r\n    show_location_at_top = os.environ.get('SHOW_LOCATION_AT_TOP', 'true').lower() == 'true'\r\n    \r\n    # Calculate starting Y position based on logo offset\r\n    header_gap = int(os.environ.get('HEADER_IMAGE_GAP', 20))\r\n    image_y_start = logo_offset + header_gap\r\n    image_start_y = get_page_height() - image_y_start\r\n    \r\n    # Add location at top if enabled\r\n    if show_location_at_top and location_number:\r\n        location_font_size = int(os.environ.get(\"DATA_LOCATION_FONT_SIZE\", 12))\r\n        margin_left = int(os.environ.get(\"IMAGE_MARGIN_LEFT\", 30))\r\n        add_location_header(pdf, location_number, margin_left, image_start_y + location_font_size)\r\n        image_start_y -= location_font_size * 1.5  # Add space after location header\r\n    \r\n    # Skip if no images found\r\n    if not image_list_found:\r\n        return image_start_y, int(os.environ.get(\"IMAGE_MARGIN_LEFT\", 30))\r\n    \r\n    # Split images into rows\r\n    rows = split_list(image_list_found, images_per_row)\r\n    image_grid_row_width = int(os.environ.get('IMAGE_GRID_ROW_WIDTH', -1))  # -1 means auto-size\r\n    left_margin = int(os.environ.get(\"IMAGE_MARGIN_LEFT\", 30))\r\n    \r\n    for row_idx, row in enumerate(rows):\r\n        # Calculate widths for this row\r\n        image_widths = []\r\n        for image in row:\r\n            if image_grid_row_width == -1:\r\n                width, _ = calculate_scaled_image_dimensions(image, target_height=image_grid_row_height)\r\n            else:\r\n                width = image_grid_row_width\r\n            image_widths.append(width)\r\n        \r\n        # Calculate spacing between images\r\n        page_width = get_page_width()\r\n        total_image_width = sum(image_widths)\r\n        available_space = page_width - 2 * left_margin\r\n        \r\n        if len(row) > 1:\r\n            # Calculate equal spacing between images\r\n            spacing = (available_space - total_image_width) / (len(row) - 1)\r\n            spacing = max(spacing, 10)  # Ensure minimum spacing\r\n        else:\r\n            spacing = 0\r\n        \r\n        # Center the row if only one image\r\n        if len(row) == 1:\r\n            start_x = (page_width - image_widths[0]) / 2\r\n        else:\r\n            start_x = left_margin\r\n        \r\n        # Draw each image in the row\r\n        for img_idx, image in enumerate(row):\r\n            width = image_widths[img_idx]\r\n            image_tmp = f\"{image}.tmp.{get_file_extension(image)}\"\r\n            \r\n            # Resize the image\r\n            resize_image(image, image_tmp, target_width=width, target_height=image_grid_row_height)\r\n            \r\n            # Calculate position\r\n            y = image_start_y - image_grid_row_height\r\n            x = start_x\r\n            \r\n            print(f\"Drawing image {img_idx+1} in row {row_idx+1} at ({x}, {y})\")\r\n            \r\n            try:\r\n                pdf.drawImage(image_tmp, x, y, width=width, height=image_grid_row_height)\r\n            except Exception as e:\r\n                print(f\"Error adding image {image} to PDF: {e}\")\r\n                \r\n            delete_image(image_tmp)\r\n            start_x += width + spacing\r\n        \r\n        # Update Y position for next row\r\n        image_start_y -= image_grid_row_height + int(os.environ.get(\"IMAGE_ROW_GAP\", 15))\r\n\r\n    # Return position for data section to start\r\n    return image_start_y, left_margin\r\n\r\n\r\ndef wrap_text(text, font_name, font_size, max_width):\r\n    \"\"\"Wrap text to fit within max_width\"\"\"\r\n    words = text.split()\r\n    lines = []\r\n    current_line = []\r\n    \r\n    for word in words:\r\n        test_line = ' '.join(current_line + [word])\r\n        width = pdfmetrics.stringWidth(test_line, font_name, font_size)\r\n        \r\n        if width <= max_width:\r\n            current_line.append(word)\r\n        else:\r\n            if current_line:\r\n                lines.append(' '.join(current_line))\r\n                current_line = [word]\r\n            else:\r\n                # Word is too long for the line, force it\r\n                lines.append(word)\r\n                current_line = []\r\n    \r\n    if current_line:\r\n        lines.append(' '.join(current_line))\r\n    \r\n    return lines\r\n\r\n\r\ndef get_report_keys():\r\n    \"\"\"Get the list of fields to include in the report\"\"\"\r\n    # Default keys\r\n    default_keys = ['Incident_ID', 'Inspection Type', 'Finding', 'Location',\r\n                   'Inverter_ID / Area', 'Reference Doc', 'Longitude', 'Latitude']\r\n    \r\n    # Allow override via environment variable\r\n    custom_keys = os.environ.get(\"REPORT_FIELDS\", \"\")\r\n    if custom_keys:\r\n        return [k.strip() for k in custom_keys.split(\",\") if k.strip()]\r\n    return default_keys\r\n\r\n\r\ndef add_data_to_pdf(pdf, row, column_mappings, offset):\r\n    \"\"\"Add data fields to the PDF with improved formatting\"\"\"\r\n    y, left_margin = offset\r\n    data_font = os.environ.get(\"DATA_FONT\", \"Helvetica\")\r\n    data_font_bold = data_font\r\n    data_font_size = int(os.environ.get(\"DATA_FONT_SIZE\", 11))\r\n    \r\n    # Add a gap after images\r\n    y -= int(os.environ.get(\"DATA_TOP_MARGIN\", 20))\r\n    \r\n    pdf.setFont(data_font, data_font_size)\r\n    \r\n    # Get report keys from environment or defaults\r\n    report_keys = get_report_keys()\r\n    \r\n    # Calculate column widths\r\n    page_width = get_page_width()\r\n    label_width = page_width * 0.2  # 20% for labels\r\n    value_width = page_width * 0.7  # 70% for values\r\n    right_margin = page_width * 0.1  # 10% for right margin\r\n    \r\n    # Create data table\r\n    for key in report_keys:\r\n        # Skip this field if it doesn't exist in the data\r\n        if key not in row:\r\n            print(f\"Warning: Field '{key}' not found in row data, skipping\")\r\n            continue\r\n            \r\n        value = row[key]\r\n        \r\n        # Skip empty values if configured to do so\r\n        if pd.isna(value) and os.environ.get(\"SKIP_EMPTY_FIELDS\", \"true\").lower() == \"true\":\r\n            continue\r\n            \r\n        x = left_margin\r\n        \r\n        # Get custom label for this field if defined\r\n        field_label = os.environ.get(f\"LABEL_{key.upper().replace(' ', '_')}\", key)\r\n        \r\n        # Draw field label\r\n        pdf.setFont(data_font, data_font_size)\r\n        pdf.drawString(x, y, f\"{field_label}:\")\r\n        \r\n        # Draw field value\r\n        pdf.setFont(data_font, data_font_size)\r\n        \r\n        # Handle multi-line values for \"Finding\" field\r\n        if key == \"Finding\" and len(str(value)) > 70:\r\n            lines = wrap_text(str(value), data_font, data_font_size, value_width)\r\n            for i, line in enumerate(lines):\r\n                if i == 0:\r\n                    pdf.drawString(x + label_width, y, line)\r\n                else:\r\n                    y -= data_font_size * 1.2\r\n                    pdf.drawString(x + label_width, y, line)\r\n        else:\r\n            pdf.drawString(x + label_width, y, f\"{value}\")\r\n        \r\n        y -= data_font_size * 1.5  # Spacing between fields\r\n        \r\n    y -= data_font_size  # Extra space after fields\r\n\r\n    return y\r\n\r\n\r\ndef add_map_to_pdf(pdf, map_image, offset):\r\n    \"\"\"Add a map image to the bottom of the PDF with improved sizing\"\"\"\r\n    if not map_image or not os.path.exists(map_image):\r\n        print(f\"Map image not found: {map_image}\")\r\n        return\r\n    \r\n    # Calculate dimensions\r\n    width, height = get_page_dimensions()\r\n    \r\n    # Use more space for the map (adjust as needed)\r\n    map_height = min(offset * 0.9, height * 0.4)  # Use 90% of remaining space or 40% of page height\r\n    \r\n    # Calculate width while maintaining aspect ratio\r\n    with Image.open(map_image) as img:\r\n        img_width, img_height = img.size\r\n        map_width = map_height * img_width / img_height\r\n    \r\n    # Ensure map isn't too wide\r\n    if map_width > width * 0.9:\r\n        map_width = width * 0.9\r\n        map_height = map_width * img_height / img_width\r\n    \r\n    # Center horizontally\r\n    start_x = (width - map_width) / 2\r\n    start_y = (offset - map_height) / 2  # Center in available space\r\n    \r\n    try:\r\n        # Create temp resized version\r\n        map_tmp = f\"{map_image}.tmp.{get_file_extension(map_image)}\"\r\n        resize_image(map_image, map_tmp, target_width=map_width, target_height=map_height)\r\n        \r\n        pdf.drawImage(map_tmp, start_x, start_y, width=map_width, height=map_height)\r\n        delete_image(map_tmp)\r\n    except Exception as e:\r\n        print(f\"Error adding map image to PDF: {e}\")\r\n\r\n\r\ndef save_pdf(pdf):\r\n    \"\"\"Save the PDF document\"\"\"\r\n    pdf.save()\r\n\r\n\r\ndef find_map_image(map_name, image_dir):\r\n    \"\"\"Find a map image file based on name\"\"\"\r\n    if not map_name:\r\n        return None\r\n        \r\n    # Look for exact match first\r\n    map_name = str(map_name).strip()\r\n    \r\n    # Simple directory check\r\n    direct_path = os.path.join(image_dir, map_name)\r\n    if os.path.exists(direct_path):\r\n        return direct_path\r\n        \r\n    # Check common image extensions\r\n    for ext in ['png', 'jpg', 'jpeg', 'gif']:\r\n        path = os.path.join(image_dir, f\"{map_name}.{ext}\")\r\n        if os.path.exists(path):\r\n            return path\r\n            \r\n    # Try finding a file containing the map name\r\n    files = recursive_file_list(image_dir)\r\n    map_file = next((f for f in files if map_name.lower() in os.path.basename(f).lower()), None)\r\n    \r\n    return map_file\r\n\r\n\r\ndef recursive_file_list(image_dir):\r\n    \"\"\"Get a list of all files in a directory and its subdirectories\"\"\"\r\n    if not os.path.exists(image_dir):\r\n        print(f\"Directory does not exist: {image_dir}\")\r\n        return []\r\n        \r\n    return [os.path.join(root, file) for root, dirs, files in os.walk(image_dir) for file in files]\r\n\r\n\r\ndef add_logo_to_pdf(pdf, logo, client_logo):\r\n    \"\"\"Add logos and header text to the PDF\"\"\"\r\n    width, height = get_page_dimensions()\r\n    \r\n    # Logo dimensions\r\n    logo_width = int(os.environ.get(\"LOGO_WIDTH\", 106))\r\n    logo_height = int(os.environ.get(\"LOGO_HEIGHT\", 24))\r\n    logo_margin = int(os.environ.get(\"LOGO_MARGIN\", 30))\r\n\r\n    # Client logo on left\r\n    client_logo_y = height - 35\r\n    client_logo_x = logo_margin\r\n    \r\n    print(f\"Printing client_logo at ({client_logo_x},{client_logo_y}) - {logo_width}, {logo_height}\")\r\n    pdf.drawImage(client_logo, client_logo_x, client_logo_y, width=logo_width, height=logo_height)\r\n\r\n    # Company logo on right\r\n    logo_x = width - logo_width - logo_margin\r\n    logo_y = height - 35\r\n    \r\n    print(f\"Printing logo at ({logo_x},{logo_y}) - {logo_width}, {logo_height}\")\r\n    pdf.drawImage(logo, logo_x, logo_y, width=logo_width, height=logo_height)\r\n    \r\n    # Header text\r\n    header_font = os.environ.get(\"HEADER_FONT\", \"Calibrib\")\r\n    header_font_size = int(os.environ.get(\"HEADER_FONT_SIZE\", 16))\r\n    pdf.setFont(header_font, header_font_size)\r\n    \r\n    text = os.environ.get('HEADER_TEXT', 'Automate Solar')\r\n    text2 = os.environ.get('SUBHEADER_TEXT', '')\r\n\r\n    # Center header text\r\n    text_width = pdfmetrics.stringWidth(text, header_font, header_font_size)\r\n    new_x = (width - text_width) / 2\r\n    \r\n    text_width2 = pdfmetrics.stringWidth(text2, header_font, header_font_size)\r\n    new_x2 = (width - text_width2) / 2\r\n\r\n    text_height_start = height - 25\r\n    print(f\"Printing header at ({new_x},{text_height_start}) - {text_width}\")\r\n    pdf.drawString(new_x, text_height_start, text)\r\n    \r\n    if text2:\r\n        subheader_y = text_height_start - header_font_size + 0.1 * header_font_size\r\n        print(f\"Printing sub header at ({new_x2},{subheader_y}) - {text_width2}\")\r\n        pdf.drawString(new_x2, subheader_y, text2)\r\n        return get_page_height() - subheader_y\r\n    \r\n    return get_page_height() - text_height_start\r\n\r\n\r\ndef process_spreadsheet_row(row, pdf, logo, client_logo, base_image_dir, column_mappings):\r\n    \"\"\"Process a single row from the spreadsheet\"\"\"\r\n    # Load mappings for key fields\r\n    incident_id_col = column_mappings.get(\"incident_id\", \"Incident_ID\")\r\n    location_col = column_mappings.get(\"location_number\", \"Location #\")\r\n    map_col = column_mappings.get(\"map_image\", \"Map\")\r\n    image_cols = column_mappings.get(\"image_columns\", [])\r\n    \r\n    # Extract key values\r\n    incident_id = row.get(incident_id_col, \"Unknown\")\r\n    location_num = row.get(location_col, \"\")\r\n\r\n    print(f\"Processing Incident ID: {incident_id}\")\r\n    \r\n    # Check if base image directory exists\r\n    if not os.path.exists(base_image_dir):\r\n        print(f\"Base image directory not found: {base_image_dir}\")\r\n        return\r\n        \r\n    # Custom image directory path pattern from environment\r\n    image_dir_pattern = os.environ.get(\"IMAGE_DIR_PATTERN\", \"{base_dir}\")\r\n    image_dir = image_dir_pattern.format(\r\n        base_dir=base_image_dir,\r\n        incident_id=incident_id,\r\n        location=location_num\r\n    )\r\n    \r\n    print(f\"Image Directory: {image_dir}\")\r\n    \r\n    # Add logos and header\r\n    logo_offset = add_logo_to_pdf(pdf, logo, client_logo)\r\n    \r\n    # Process images\r\n    image_offset = (0, 0)  # Default if no images\r\n    \r\n    if image_cols:\r\n        # Get image filenames from row\r\n        image_list = []\r\n        for col in image_cols:\r\n            if col in row and row[col]:\r\n                image_list.append(str(row[col]))\r\n                \r\n        if image_list:\r\n            image_offset = process_images(image_dir, image_list, pdf, row, logo_offset, location_num)\r\n        else:\r\n            print(\"No images specified in row\")\r\n    else:\r\n        print(\"No image columns configured, skipping images\")\r\n\r\n    # Add data fields\r\n    text_offset = add_data_to_pdf(pdf, row, column_mappings, image_offset)\r\n    \r\n    # Add map if specified\r\n    if map_col in row and row[map_col]:\r\n        map_name = row[map_col]\r\n        map_image = find_map_image(map_name, base_image_dir)\r\n        \r\n        if map_image:\r\n            add_map_to_pdf(pdf, map_image, text_offset)\r\n        else:\r\n            print(f\"⚠️ Map image not found for '{map_name}'\")\r\n\r\n\r\ndef process_images(image_dir, image_list, pdf, row, logo_offset, location_number):\r\n    \"\"\"Find and add images to the PDF\"\"\"\r\n    if not os.path.exists(image_dir):\r\n        print(f\"Image directory not found: {image_dir}\")\r\n        return (0, 0)\r\n        \r\n    all_images = recursive_file_list(image_dir)\r\n    image_list_found = []\r\n    \r\n    for image_name in image_list:\r\n        if not image_name or pd.isna(image_name):\r\n            continue\r\n            \r\n        # Normalize the image name\r\n        image_name = str(image_name).strip()\r\n        \r\n        # Try direct path first\r\n        direct_path = os.path.join(image_dir, image_name)\r\n        if os.path.exists(direct_path):\r\n            image_list_found.append(direct_path)\r\n            continue\r\n            \r\n        # Try with common extensions\r\n        for ext in ['png', 'jpg', 'jpeg', 'gif']:\r\n            path = os.path.join(image_dir, f\"{image_name}.{ext}\")\r\n            if os.path.exists(path):\r\n                image_list_found.append(path)\r\n                break\r\n        else:\r\n            # Search for partial matches in all images\r\n            image_file = next((img for img in all_images if image_name.lower() in os.path.basename(img).lower()), None)\r\n            \r\n            if image_file:\r\n                image_list_found.append(image_file)\r\n            else:\r\n                print(f\"Could not find image: {image_name}\")\r\n    \r\n    if image_list_found:\r\n        return add_images_to_pdf(pdf, image_list_found, location_number, logo_offset)\r\n    else:\r\n        return (0, 0)\r\n\r\n\r\ndef process_spreadsheet(csv, pdf, logo_path, client_logo_path, base_image_dir):\r\n    \"\"\"Process all rows in the spreadsheet\"\"\"\r\n    logo = ImageReader(logo_path)\r\n    client_logo = ImageReader(client_logo_path)\r\n    column_mappings = load_column_mappings()\r\n    \r\n    # Process each row\r\n    for index, row in csv.iterrows():\r\n        print(f\"Processing row {index+1}/{len(csv)}\")\r\n        process_spreadsheet_row(row.to_dict(), pdf, logo, client_logo, base_image_dir, column_mappings)\r\n        start_new_page(pdf)\r\n\r\n\r\ndef compress_pdf(input_pdf, output_pdf):\r\n    \"\"\"Compress the PDF to reduce file size\"\"\"\r\n    print(\"Compressing PDF...\")\r\n    \r\n    try:\r\n        writer = PdfWriter(clone_from=input_pdf)\r\n        page_count = len(writer.pages)\r\n        \r\n        for i, page in enumerate(writer.pages, 1):\r\n            print(f\"Compressing page {i}/{page_count}\")\r\n            page.compress_content_streams()\r\n            \r\n            # Compress images if available\r\n            for j, img in enumerate(page.images, 1):\r\n                print(f\"Compressing image {j} on page {i}\")\r\n                try:\r\n                    quality = int(os.environ.get(\"IMAGE_COMPRESSION_QUALITY\", 80))\r\n                    img.replace(img.image, quality=quality)\r\n                except Exception as e:\r\n                    print(f\"Error compressing image: {e}\")\r\n        \r\n        with open(output_pdf, \"wb\") as f:\r\n            writer.write(f)\r\n            \r\n        return True\r\n    except Exception as e:\r\n        print(f\"Error compressing PDF: {e}\")\r\n        return False\r\n\r\n\r\ndef main():\r\n    # Parse command line arguments\r\n    if len(sys.argv) < 3:\r\n        print(\"Usage: python main.py data.csv output.pdf\")\r\n        sys.exit(-1)\r\n        \r\n    input_csv = sys.argv[1]\r\n    final_output_pdf = sys.argv[2]\r\n    temp_output_pdf = f\"{final_output_pdf}.tmp.pdf\"\r\n    \r\n    # Load paths from environment variables\r\n    logo_path = os.environ.get(\"COMPANY_LOGO\", \"../Pic_Logo.png\")\r\n    client_logo_path = os.environ.get(\"CLIENT_LOGO\", \"../Pic_Logo.png\")\r\n    base_image_dir = os.environ.get(\"IMAGE_FOLDER\", \"./Images\")\r\n    \r\n    # Validate required files exist\r\n    if not os.path.exists(base_image_dir):\r\n        print(f\"Error: Image folder not found: {base_image_dir}\")\r\n        sys.exit(-1)\r\n        \r\n    if not os.path.exists(client_logo_path):\r\n        print(f\"Error: Client logo not found: {client_logo_path}\")\r\n        sys.exit(-1)\r\n        \r\n    if not os.path.exists(logo_path):\r\n        print(f\"Error: Company logo not found: {logo_path}\")\r\n        sys.exit(-1)\r\n        \r\n    if not os.path.exists(input_csv):\r\n        print(f\"Error: CSV file not found: {input_csv}\")\r\n        sys.exit(-1)\r\n    \r\n    # Register fonts\r\n    try:\r\n        header_font = os.environ.get(\"HEADER_FONT\", \"Calibrib\")\r\n        data_font = os.environ.get(\"DATA_FONT\", \"Helvetica\")\r\n        \r\n        # Try to register fonts\r\n        fonts_registered = False\r\n        \r\n        try:\r\n            # Try TTF extension\r\n            pdfmetrics.registerFont(TTFont(header_font, f'{header_font}.ttf'))\r\n            pdfmetrics.registerFont(TTFont(data_font, f'{data_font}.ttf'))\r\n            # pdfmetrics.registerFont(TTFont(f\"{data_font} Bold\", f'{data_font}b.ttf'))\r\n            fonts_registered = True\r\n        except Exception as e1:\r\n            print(f\"Failed to register fonts with .ttf extension: {e1}\")\r\n            \r\n            try:\r\n                # Try with .TTF extension\r\n                pdfmetrics.registerFont(TTFont(header_font, f'{header_font}.TTF'))\r\n                pdfmetrics.registerFont(TTFont(data_font, f'{data_font}.TTF'))\r\n                # pdfmetrics.registerFont(TTFont(f\"{data_font} Bold\", f'{data_font}b.TTF'))\r\n                fonts_registered = True\r\n            except Exception as e2:\r\n                print(f\"Failed to register fonts with .TTF extension: {e2}\")\r\n        \r\n        if not fonts_registered:\r\n            print(\"Warning: Using default fonts\")\r\n            \r\n        print(\"Registered fonts:\", pdfmetrics.getRegisteredFontNames())\r\n    except Exception as e:\r\n        print(f\"Warning: Could not register fonts: {e}\")\r\n        print(\"Using default fonts\")\r\n\r\n    # Create the PDF\r\n    pdf = create_pdf(temp_output_pdf)\r\n    \r\n    # Load and process the CSV\r\n    try:\r\n        csv = get_spreadsheet(input_csv)\r\n        process_spreadsheet(csv, pdf, logo_path, client_logo_path, base_image_dir)\r\n        save_pdf(pdf)\r\n        \r\n        # Compress the PDF if enabled\r\n        if os.environ.get(\"COMPRESS_PDF\", \"true\").lower() == \"true\":\r\n            if compress_pdf(temp_output_pdf, final_output_pdf):\r\n                # Delete temp file if compression succeeded\r\n                if os.path.exists(temp_output_pdf):\r\n                    os.remove(temp_output_pdf)\r\n            else:\r\n                # Use uncompressed version if compression failed\r\n                import shutil\r\n                shutil.copy(temp_output_pdf, final_output_pdf)\r\n                if os.path.exists(temp_output_pdf):\r\n                    os.remove(temp_output_pdf)\r\n        else:\r\n            # Just rename temp file to final if no compression\r\n            import shutil\r\n            shutil.copy(temp_output_pdf, final_output_pdf)\r\n            if os.path.exists(temp_output_pdf):\r\n                os.remove(temp_output_pdf)\r\n            \r\n        print(f\"PDF successfully created: {final_output_pdf}\")\r\n    except Exception as e:\r\n        print(f\"Error processing CSV: {e}\")\r\n        sys.exit(-1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n","size_bytes":27327},"attached_assets/ClaudsFunctioningGenerator _StarrPunchCsv_1758036993823.py":{"content":"import os\r\nimport sys\r\nimport reportlab\r\nfrom PIL import Image\r\nimport pandas as pd\r\nfrom reportlab.lib.utils import ImageReader\r\nfrom reportlab.pdfbase import pdfmetrics\r\nfrom reportlab.pdfbase.ttfonts import TTFont\r\nfrom reportlab.pdfgen import canvas\r\nfrom reportlab.lib.pagesizes import letter, legal\r\nfrom dotenv import load_dotenv\r\nfrom pypdf import PdfReader, PdfWriter\r\nimport json\r\n\r\nload_dotenv()\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nreportlab.rl_config.TTFSearchPath.append(os.path.join(BASE_DIR, 'fonts'))\r\n\r\n# Default column mappings that can be overridden via environment variables\r\nDEFAULT_COLUMN_MAPPINGS = {\r\n    \"location_number\": \"Location #\",\r\n    \"incident_id\": \"Incident_ID\",\r\n    \"date\": \"Date\",\r\n    \"inspection_type\": \"Inspection Type\",\r\n    \"finding\": \"Finding\",\r\n    \"location\": \"Location\",\r\n    \"map_image\": \"Map\",  # Renamed from \"Inverter Block\" to \"Map\"\r\n    \"area\": \"Inverter_ID / Area\",\r\n    \"reference\": \"Reference Doc\",\r\n    \"image_columns\": [\"Thermal_Photo\", \"Annotated Image\", \"Wide Photo Name\", \"Zoom Photo Name\"],\r\n    \"latitude\": \"Latitude\",\r\n    \"longitude\": \"Longitude\"\r\n}\r\n\r\n\r\ndef load_column_mappings():\r\n    \"\"\"Load column mappings from environment variable or use defaults\"\"\"\r\n    custom_mappings = os.environ.get(\"COLUMN_MAPPINGS\", \"\")\r\n    if custom_mappings:\r\n        try:\r\n            return json.loads(custom_mappings)\r\n        except json.JSONDecodeError:\r\n            print(\"Error parsing COLUMN_MAPPINGS, using defaults\")\r\n    \r\n    # Allow individual column overrides\r\n    mappings = DEFAULT_COLUMN_MAPPINGS.copy()\r\n    for key in mappings:\r\n        env_override = os.environ.get(f\"COLUMN_{key.upper()}\")\r\n        if env_override:\r\n            mappings[key] = env_override\r\n    \r\n    # Handle image columns specially\r\n    image_columns_str = os.environ.get(\"IMAGE_COLUMNS\", \"\")\r\n    if image_columns_str:\r\n        mappings[\"image_columns\"] = [x.strip() for x in image_columns_str.split(\",\") if x.strip()]\r\n        \r\n    return mappings\r\n\r\n\r\ndef create_pdf(output_pdf, pagesize=None):\r\n    \"\"\"Create a new PDF canvas with the specified page size\"\"\"\r\n    if pagesize is None:\r\n        pagesize_name = os.environ.get(\"PAGE_SIZE\", \"legal\").lower()\r\n        if pagesize_name == \"letter\":\r\n            pagesize = letter\r\n        else:\r\n            pagesize = legal\r\n    \r\n    return canvas.Canvas(output_pdf, pagesize=pagesize)\r\n\r\n\r\ndef get_spreadsheet(csv_path):\r\n    \"\"\"Load CSV data with proper encoding\"\"\"\r\n    encoding = os.environ.get(\"CSV_ENCODING\", \"utf-8\")\r\n    return pd.read_csv(csv_path, encoding=encoding)\r\n\r\n\r\ndef start_new_page(pdf):\r\n    \"\"\"Start a new page in the PDF\"\"\"\r\n    pdf.showPage()\r\n\r\n\r\ndef get_page_dimensions():\r\n    \"\"\"Get page dimensions based on configured page size\"\"\"\r\n    pagesize_name = os.environ.get(\"PAGE_SIZE\", \"legal\").lower()\r\n    if pagesize_name == \"letter\":\r\n        return letter\r\n    else:\r\n        return legal\r\n\r\n\r\ndef get_page_width():\r\n    \"\"\"Get page width based on configured page size\"\"\"\r\n    width, height = get_page_dimensions()\r\n    return width\r\n\r\n\r\ndef get_page_height():\r\n    \"\"\"Get page height based on configured page size\"\"\"\r\n    width, height = get_page_dimensions()\r\n    return height\r\n\r\n\r\ndef calculate_scaled_image_dimensions(image_path, target_width=None, target_height=None):\r\n    \"\"\"Calculate scaled dimensions maintaining aspect ratio\"\"\"\r\n    with Image.open(image_path) as img:\r\n        w, h = img.size\r\n    \r\n    if target_width and not target_height:\r\n        return target_width, int(target_width * h / w)\r\n    elif target_height and not target_width:\r\n        return int(target_height * w / h), target_height\r\n    elif target_width and target_height:\r\n        return target_width, target_height\r\n    else:\r\n        return w, h\r\n\r\n\r\ndef resize_image(image_path, output_path, target_width=None, target_height=None):\r\n    \"\"\"Resize image maintaining aspect ratio if only one dimension specified\"\"\"\r\n    try:\r\n        img = Image.open(image_path)\r\n        \r\n        if target_width or target_height:\r\n            w, h = img.size\r\n            \r\n            if target_width and not target_height:\r\n                target_height = int(h * target_width / w)\r\n            elif target_height and not target_width:\r\n                target_width = int(w * target_height / h)\r\n                \r\n            img = img.resize((target_width, target_height))\r\n        \r\n        # Determine the output format\r\n        _, ext = os.path.splitext(output_path)\r\n        if ext.lower() in ['.jpg', '.jpeg']:\r\n            img.save(output_path, 'JPEG', quality=95)\r\n        else:\r\n            img.save(output_path, 'PNG')\r\n            \r\n    except Exception as e:\r\n        print(f\"Error resizing image {image_path}: {e}\")\r\n        # Just copy the file if we can't resize it\r\n        img.save(output_path)\r\n\r\n\r\ndef delete_image(image_path):\r\n    \"\"\"Delete a temporary image file\"\"\"\r\n    if os.path.exists(image_path):\r\n        try:\r\n            os.remove(image_path)\r\n        except Exception as e:\r\n            print(f\"Could not delete {image_path}: {e}\")\r\n    else:\r\n        print(f\"File does not exist: {image_path}\")\r\n\r\n\r\ndef get_file_extension(file_path):\r\n    \"\"\"Get the file extension without the dot\"\"\"\r\n    _, file_extension = os.path.splitext(file_path)\r\n    return file_extension[1:] if file_extension else 'png'\r\n\r\n\r\ndef split_list(input_list, size):\r\n    \"\"\"Split a list into chunks of specified size\"\"\"\r\n    return [input_list[i:i + size] for i in range(0, len(input_list), size)]\r\n\r\n\r\ndef add_location_header(pdf, location_number, x, y):\r\n    \"\"\"Add location number at the top of the images section\"\"\"\r\n    if not location_number:\r\n        return\r\n        \r\n    location_font = os.environ.get(\"LOCATION_FONT\", \"Helvetica\")\r\n    location_font_size = int(os.environ.get(\"DATA_LOCATION_FONT_SIZE\", 12))\r\n    location_label = os.environ.get(\"LOCATION_LABEL\", \"Location\")\r\n    \r\n    pdf.setFont(location_font, location_font_size)\r\n    pdf.drawString(x, y, f\"{location_label}: #{location_number}\")\r\n\r\n\r\ndef add_images_to_pdf(pdf, image_list_found, location_number, logo_offset):\r\n    \"\"\"Add images to the PDF in a grid layout\"\"\"\r\n    images_per_row = int(os.environ.get('IMAGES_PER_ROW', 2))\r\n    image_grid_row_height = int(os.environ.get('IMAGE_GRID_ROW_HEIGHT', 200))\r\n    show_location_at_top = os.environ.get('SHOW_LOCATION_AT_TOP', 'true').lower() == 'true'\r\n    \r\n    # Calculate starting Y position based on logo offset\r\n    header_gap = int(os.environ.get('HEADER_IMAGE_GAP', 20))\r\n    image_y_start = logo_offset + header_gap\r\n    image_start_y = get_page_height() - image_y_start\r\n    \r\n    # Add location at top if enabled\r\n    if show_location_at_top and location_number:\r\n        location_font_size = int(os.environ.get(\"DATA_LOCATION_FONT_SIZE\", 12))\r\n        margin_left = int(os.environ.get(\"IMAGE_MARGIN_LEFT\", 30))\r\n        add_location_header(pdf, location_number, margin_left, image_start_y + location_font_size)\r\n        image_start_y -= location_font_size * 1.5  # Add space after location header\r\n    \r\n    # Skip if no images found\r\n    if not image_list_found:\r\n        return image_start_y, int(os.environ.get(\"IMAGE_MARGIN_LEFT\", 30))\r\n    \r\n    # Split images into rows\r\n    rows = split_list(image_list_found, images_per_row)\r\n    image_grid_row_width = int(os.environ.get('IMAGE_GRID_ROW_WIDTH', -1))  # -1 means auto-size\r\n    left_margin = int(os.environ.get(\"IMAGE_MARGIN_LEFT\", 30))\r\n    \r\n    for row_idx, row in enumerate(rows):\r\n        # Calculate widths for this row\r\n        image_widths = []\r\n        for image in row:\r\n            if image_grid_row_width == -1:\r\n                width, _ = calculate_scaled_image_dimensions(image, target_height=image_grid_row_height)\r\n            else:\r\n                width = image_grid_row_width\r\n            image_widths.append(width)\r\n        \r\n        # Calculate spacing between images\r\n        page_width = get_page_width()\r\n        total_image_width = sum(image_widths)\r\n        available_space = page_width - 2 * left_margin\r\n        \r\n        if len(row) > 1:\r\n            # Calculate equal spacing between images\r\n            spacing = (available_space - total_image_width) / (len(row) - 1)\r\n            spacing = max(spacing, 10)  # Ensure minimum spacing\r\n        else:\r\n            spacing = 0\r\n        \r\n        # Center the row if only one image\r\n        if len(row) == 1:\r\n            start_x = (page_width - image_widths[0]) / 2\r\n        else:\r\n            start_x = left_margin\r\n        \r\n        # Draw each image in the row\r\n        for img_idx, image in enumerate(row):\r\n            width = image_widths[img_idx]\r\n            image_tmp = f\"{image}.tmp.{get_file_extension(image)}\"\r\n            \r\n            # Resize the image\r\n            resize_image(image, image_tmp, target_width=width, target_height=image_grid_row_height)\r\n            \r\n            # Calculate position\r\n            y = image_start_y - image_grid_row_height\r\n            x = start_x\r\n            \r\n            print(f\"Drawing image {img_idx+1} in row {row_idx+1} at ({x}, {y})\")\r\n            \r\n            try:\r\n                pdf.drawImage(image_tmp, x, y, width=width, height=image_grid_row_height)\r\n            except Exception as e:\r\n                print(f\"Error adding image {image} to PDF: {e}\")\r\n                \r\n            delete_image(image_tmp)\r\n            start_x += width + spacing\r\n        \r\n        # Update Y position for next row\r\n        image_start_y -= image_grid_row_height + int(os.environ.get(\"IMAGE_ROW_GAP\", 15))\r\n\r\n    # Return position for data section to start\r\n    return image_start_y, left_margin\r\n\r\n\r\ndef wrap_text(text, font_name, font_size, max_width):\r\n    \"\"\"Wrap text to fit within max_width\"\"\"\r\n    words = text.split()\r\n    lines = []\r\n    current_line = []\r\n    \r\n    for word in words:\r\n        test_line = ' '.join(current_line + [word])\r\n        width = pdfmetrics.stringWidth(test_line, font_name, font_size)\r\n        \r\n        if width <= max_width:\r\n            current_line.append(word)\r\n        else:\r\n            if current_line:\r\n                lines.append(' '.join(current_line))\r\n                current_line = [word]\r\n            else:\r\n                # Word is too long for the line, force it\r\n                lines.append(word)\r\n                current_line = []\r\n    \r\n    if current_line:\r\n        lines.append(' '.join(current_line))\r\n    \r\n    return lines\r\n\r\n\r\ndef get_report_keys():\r\n    \"\"\"Get the list of fields to include in the report\"\"\"\r\n    # Default keys\r\n    default_keys = ['Incident_ID', 'Inspection Type', 'Finding', 'Location',\r\n                   'Inverter_ID / Area', 'Reference Doc', 'Longitude', 'Latitude']\r\n    \r\n    # Allow override via environment variable\r\n    custom_keys = os.environ.get(\"REPORT_FIELDS\", \"\")\r\n    if custom_keys:\r\n        return [k.strip() for k in custom_keys.split(\",\") if k.strip()]\r\n    return default_keys\r\n\r\n\r\ndef add_data_to_pdf(pdf, row, column_mappings, offset):\r\n    \"\"\"Add data fields to the PDF with improved formatting\"\"\"\r\n    y, left_margin = offset\r\n    data_font = os.environ.get(\"DATA_FONT\", \"Helvetica\")\r\n    data_font_bold = data_font\r\n    data_font_size = int(os.environ.get(\"DATA_FONT_SIZE\", 11))\r\n    \r\n    # Add a gap after images\r\n    y -= int(os.environ.get(\"DATA_TOP_MARGIN\", 20))\r\n    \r\n    pdf.setFont(data_font, data_font_size)\r\n    \r\n    # Get report keys from environment or defaults\r\n    report_keys = get_report_keys()\r\n    \r\n    # Calculate column widths\r\n    page_width = get_page_width()\r\n    label_width = page_width * 0.2  # 20% for labels\r\n    value_width = page_width * 0.7  # 70% for values\r\n    right_margin = page_width * 0.1  # 10% for right margin\r\n    \r\n    # Create data table\r\n    for key in report_keys:\r\n        # Skip this field if it doesn't exist in the data\r\n        if key not in row:\r\n            print(f\"Warning: Field '{key}' not found in row data, skipping\")\r\n            continue\r\n            \r\n        value = row[key]\r\n        \r\n        # Skip empty values if configured to do so\r\n        if pd.isna(value) and os.environ.get(\"SKIP_EMPTY_FIELDS\", \"true\").lower() == \"true\":\r\n            continue\r\n            \r\n        x = left_margin\r\n        \r\n        # Get custom label for this field if defined\r\n        field_label = os.environ.get(f\"LABEL_{key.upper().replace(' ', '_')}\", key)\r\n        \r\n        # Draw field label\r\n        pdf.setFont(data_font, data_font_size)\r\n        pdf.drawString(x, y, f\"{field_label}:\")\r\n        \r\n        # Draw field value\r\n        pdf.setFont(data_font, data_font_size)\r\n        \r\n        # Handle multi-line values for \"Finding\" field\r\n        if key == \"Finding\" and len(str(value)) > 70:\r\n            lines = wrap_text(str(value), data_font, data_font_size, value_width)\r\n            for i, line in enumerate(lines):\r\n                if i == 0:\r\n                    pdf.drawString(x + label_width, y, line)\r\n                else:\r\n                    y -= data_font_size * 1.2\r\n                    pdf.drawString(x + label_width, y, line)\r\n        else:\r\n            pdf.drawString(x + label_width, y, f\"{value}\")\r\n        \r\n        y -= data_font_size * 1.5  # Spacing between fields\r\n        \r\n    y -= data_font_size  # Extra space after fields\r\n\r\n    return y\r\n\r\n\r\ndef add_map_to_pdf(pdf, map_image, offset):\r\n    \"\"\"Add a map image to the bottom of the PDF with improved sizing\"\"\"\r\n    if not map_image or not os.path.exists(map_image):\r\n        print(f\"Map image not found: {map_image}\")\r\n        return\r\n    \r\n    # Calculate dimensions\r\n    width, height = get_page_dimensions()\r\n    \r\n    # Use more space for the map (adjust as needed)\r\n    map_height = min(offset * 0.9, height * 0.4)  # Use 90% of remaining space or 40% of page height\r\n    \r\n    # Calculate width while maintaining aspect ratio\r\n    with Image.open(map_image) as img:\r\n        img_width, img_height = img.size\r\n        map_width = map_height * img_width / img_height\r\n    \r\n    # Ensure map isn't too wide\r\n    if map_width > width * 0.9:\r\n        map_width = width * 0.9\r\n        map_height = map_width * img_height / img_width\r\n    \r\n    # Center horizontally\r\n    start_x = (width - map_width) / 2\r\n    start_y = (offset - map_height) / 2  # Center in available space\r\n    \r\n    try:\r\n        # Create temp resized version\r\n        map_tmp = f\"{map_image}.tmp.{get_file_extension(map_image)}\"\r\n        resize_image(map_image, map_tmp, target_width=map_width, target_height=map_height)\r\n        \r\n        pdf.drawImage(map_tmp, start_x, start_y, width=map_width, height=map_height)\r\n        delete_image(map_tmp)\r\n    except Exception as e:\r\n        print(f\"Error adding map image to PDF: {e}\")\r\n\r\n\r\ndef save_pdf(pdf):\r\n    \"\"\"Save the PDF document\"\"\"\r\n    pdf.save()\r\n\r\n\r\ndef find_map_image(map_name, image_dir):\r\n    \"\"\"Find a map image file based on name\"\"\"\r\n    if not map_name:\r\n        return None\r\n        \r\n    # Look for exact match first\r\n    map_name = str(map_name).strip()\r\n    \r\n    # Simple directory check\r\n    direct_path = os.path.join(image_dir, map_name)\r\n    if os.path.exists(direct_path):\r\n        return direct_path\r\n        \r\n    # Check common image extensions\r\n    for ext in ['png', 'jpg', 'jpeg', 'gif']:\r\n        path = os.path.join(image_dir, f\"{map_name}.{ext}\")\r\n        if os.path.exists(path):\r\n            return path\r\n            \r\n    # Try finding a file containing the map name\r\n    files = recursive_file_list(image_dir)\r\n    map_file = next((f for f in files if map_name.lower() in os.path.basename(f).lower()), None)\r\n    \r\n    return map_file\r\n\r\n\r\ndef recursive_file_list(image_dir):\r\n    \"\"\"Get a list of all files in a directory and its subdirectories\"\"\"\r\n    if not os.path.exists(image_dir):\r\n        print(f\"Directory does not exist: {image_dir}\")\r\n        return []\r\n        \r\n    return [os.path.join(root, file) for root, dirs, files in os.walk(image_dir) for file in files]\r\n\r\n\r\ndef add_logo_to_pdf(pdf, logo, client_logo):\r\n    \"\"\"Add logos and header text to the PDF\"\"\"\r\n    width, height = get_page_dimensions()\r\n    \r\n    # Logo dimensions\r\n    logo_width = int(os.environ.get(\"LOGO_WIDTH\", 106))\r\n    logo_height = int(os.environ.get(\"LOGO_HEIGHT\", 24))\r\n    logo_margin = int(os.environ.get(\"LOGO_MARGIN\", 30))\r\n\r\n    # Client logo on left\r\n    client_logo_y = height - 35\r\n    client_logo_x = logo_margin\r\n    \r\n    print(f\"Printing client_logo at ({client_logo_x},{client_logo_y}) - {logo_width}, {logo_height}\")\r\n    pdf.drawImage(client_logo, client_logo_x, client_logo_y, width=logo_width, height=logo_height)\r\n\r\n    # Company logo on right\r\n    logo_x = width - logo_width - logo_margin\r\n    logo_y = height - 35\r\n    \r\n    print(f\"Printing logo at ({logo_x},{logo_y}) - {logo_width}, {logo_height}\")\r\n    pdf.drawImage(logo, logo_x, logo_y, width=logo_width, height=logo_height)\r\n    \r\n    # Header text\r\n    header_font = os.environ.get(\"HEADER_FONT\", \"Calibrib\")\r\n    header_font_size = int(os.environ.get(\"HEADER_FONT_SIZE\", 16))\r\n    pdf.setFont(header_font, header_font_size)\r\n    \r\n    text = os.environ.get('HEADER_TEXT', 'YOU FORGOT TO SET THE HEADER TEXT')\r\n    text2 = os.environ.get('SUBHEADER_TEXT', '')\r\n\r\n    # Center header text\r\n    text_width = pdfmetrics.stringWidth(text, header_font, header_font_size)\r\n    new_x = (width - text_width) / 2\r\n    \r\n    text_width2 = pdfmetrics.stringWidth(text2, header_font, header_font_size)\r\n    new_x2 = (width - text_width2) / 2\r\n\r\n    text_height_start = height - 25\r\n    print(f\"Printing header at ({new_x},{text_height_start}) - {text_width}\")\r\n    pdf.drawString(new_x, text_height_start, text)\r\n    \r\n    if text2:\r\n        subheader_y = text_height_start - header_font_size + 0.1 * header_font_size\r\n        print(f\"Printing sub header at ({new_x2},{subheader_y}) - {text_width2}\")\r\n        pdf.drawString(new_x2, subheader_y, text2)\r\n        return get_page_height() - subheader_y\r\n    \r\n    return get_page_height() - text_height_start\r\n\r\n\r\ndef process_spreadsheet_row(row, pdf, logo, client_logo, base_image_dir, column_mappings):\r\n    \"\"\"Process a single row from the spreadsheet\"\"\"\r\n    # Load mappings for key fields\r\n    incident_id_col = column_mappings.get(\"incident_id\", \"Incident_ID\")\r\n    location_col = column_mappings.get(\"location_number\", \"Location #\")\r\n    map_col = column_mappings.get(\"map_image\", \"Map\")\r\n    image_cols = column_mappings.get(\"image_columns\", [])\r\n    \r\n    # Extract key values\r\n    incident_id = row.get(incident_id_col, \"Unknown\")\r\n    location_num = row.get(location_col, \"\")\r\n\r\n    print(f\"Processing Incident ID: {incident_id}\")\r\n    \r\n    # Check if base image directory exists\r\n    if not os.path.exists(base_image_dir):\r\n        print(f\"Base image directory not found: {base_image_dir}\")\r\n        return\r\n        \r\n    # Custom image directory path pattern from environment\r\n    image_dir_pattern = os.environ.get(\"IMAGE_DIR_PATTERN\", \"{base_dir}\")\r\n    image_dir = image_dir_pattern.format(\r\n        base_dir=base_image_dir,\r\n        incident_id=incident_id,\r\n        location=location_num\r\n    )\r\n    \r\n    print(f\"Image Directory: {image_dir}\")\r\n    \r\n    # Add logos and header\r\n    logo_offset = add_logo_to_pdf(pdf, logo, client_logo)\r\n    \r\n    # Process images\r\n    image_offset = (0, 0)  # Default if no images\r\n    \r\n    if image_cols:\r\n        # Get image filenames from row\r\n        image_list = []\r\n        for col in image_cols:\r\n            if col in row and row[col]:\r\n                image_list.append(str(row[col]))\r\n                \r\n        if image_list:\r\n            image_offset = process_images(image_dir, image_list, pdf, row, logo_offset, location_num)\r\n        else:\r\n            print(\"No images specified in row\")\r\n    else:\r\n        print(\"No image columns configured, skipping images\")\r\n\r\n    # Add data fields\r\n    text_offset = add_data_to_pdf(pdf, row, column_mappings, image_offset)\r\n    \r\n    # Add map if specified\r\n    if map_col in row and row[map_col]:\r\n        map_name = row[map_col]\r\n        map_image = find_map_image(map_name, base_image_dir)\r\n        \r\n        if map_image:\r\n            add_map_to_pdf(pdf, map_image, text_offset)\r\n        else:\r\n            print(f\"⚠️ Map image not found for '{map_name}'\")\r\n\r\n\r\ndef process_images(image_dir, image_list, pdf, row, logo_offset, location_number):\r\n    \"\"\"Find and add images to the PDF\"\"\"\r\n    if not os.path.exists(image_dir):\r\n        print(f\"Image directory not found: {image_dir}\")\r\n        return (0, 0)\r\n        \r\n    all_images = recursive_file_list(image_dir)\r\n    image_list_found = []\r\n    \r\n    for image_name in image_list:\r\n        if not image_name or pd.isna(image_name):\r\n            continue\r\n            \r\n        # Normalize the image name\r\n        image_name = str(image_name).strip()\r\n        \r\n        # Try direct path first\r\n        direct_path = os.path.join(image_dir, image_name)\r\n        if os.path.exists(direct_path):\r\n            image_list_found.append(direct_path)\r\n            continue\r\n            \r\n        # Try with common extensions\r\n        for ext in ['png', 'jpg', 'jpeg', 'gif']:\r\n            path = os.path.join(image_dir, f\"{image_name}.{ext}\")\r\n            if os.path.exists(path):\r\n                image_list_found.append(path)\r\n                break\r\n        else:\r\n            # Search for partial matches in all images\r\n            image_file = next((img for img in all_images if image_name.lower() in os.path.basename(img).lower()), None)\r\n            \r\n            if image_file:\r\n                image_list_found.append(image_file)\r\n            else:\r\n                print(f\"Could not find image: {image_name}\")\r\n    \r\n    if image_list_found:\r\n        return add_images_to_pdf(pdf, image_list_found, location_number, logo_offset)\r\n    else:\r\n        return (0, 0)\r\n\r\n\r\ndef process_spreadsheet(csv, pdf, logo_path, client_logo_path, base_image_dir):\r\n    \"\"\"Process all rows in the spreadsheet\"\"\"\r\n    logo = ImageReader(logo_path)\r\n    client_logo = ImageReader(client_logo_path)\r\n    column_mappings = load_column_mappings()\r\n    \r\n    # Process each row\r\n    for index, row in csv.iterrows():\r\n        print(f\"Processing row {index+1}/{len(csv)}\")\r\n        process_spreadsheet_row(row.to_dict(), pdf, logo, client_logo, base_image_dir, column_mappings)\r\n        start_new_page(pdf)\r\n\r\n\r\ndef compress_pdf(input_pdf, output_pdf):\r\n    \"\"\"Compress the PDF to reduce file size\"\"\"\r\n    print(\"Compressing PDF...\")\r\n    \r\n    try:\r\n        writer = PdfWriter(clone_from=input_pdf)\r\n        page_count = len(writer.pages)\r\n        \r\n        for i, page in enumerate(writer.pages, 1):\r\n            print(f\"Compressing page {i}/{page_count}\")\r\n            page.compress_content_streams()\r\n            \r\n            # Compress images if available\r\n            for j, img in enumerate(page.images, 1):\r\n                print(f\"Compressing image {j} on page {i}\")\r\n                try:\r\n                    quality = int(os.environ.get(\"IMAGE_COMPRESSION_QUALITY\", 80))\r\n                    img.replace(img.image, quality=quality)\r\n                except Exception as e:\r\n                    print(f\"Error compressing image: {e}\")\r\n        \r\n        with open(output_pdf, \"wb\") as f:\r\n            writer.write(f)\r\n            \r\n        return True\r\n    except Exception as e:\r\n        print(f\"Error compressing PDF: {e}\")\r\n        return False\r\n\r\n\r\ndef main():\r\n    # Parse command line arguments\r\n    if len(sys.argv) < 3:\r\n        print(\"Usage: python main.py data.csv output.pdf\")\r\n        sys.exit(-1)\r\n        \r\n    input_csv = sys.argv[1]\r\n    final_output_pdf = sys.argv[2]\r\n    temp_output_pdf = f\"{final_output_pdf}.tmp.pdf\"\r\n    \r\n    # Load paths from environment variables\r\n    logo_path = os.environ.get(\"COMPANY_LOGO\", \"./logo.png\")\r\n    client_logo_path = os.environ.get(\"CLIENT_LOGO\", \"./client_logo.png\")\r\n    base_image_dir = os.environ.get(\"IMAGE_FOLDER\", \"./Images\")\r\n    \r\n    # Validate required files exist\r\n    if not os.path.exists(base_image_dir):\r\n        print(f\"Error: Image folder not found: {base_image_dir}\")\r\n        sys.exit(-1)\r\n        \r\n    if not os.path.exists(client_logo_path):\r\n        print(f\"Error: Client logo not found: {client_logo_path}\")\r\n        sys.exit(-1)\r\n        \r\n    if not os.path.exists(logo_path):\r\n        print(f\"Error: Company logo not found: {logo_path}\")\r\n        sys.exit(-1)\r\n        \r\n    if not os.path.exists(input_csv):\r\n        print(f\"Error: CSV file not found: {input_csv}\")\r\n        sys.exit(-1)\r\n    \r\n    # Register fonts\r\n    try:\r\n        header_font = os.environ.get(\"HEADER_FONT\", \"Calibrib\")\r\n        data_font = os.environ.get(\"DATA_FONT\", \"Helvetica\")\r\n        \r\n        # Try to register fonts\r\n        fonts_registered = False\r\n        \r\n        try:\r\n            # Try TTF extension\r\n            pdfmetrics.registerFont(TTFont(header_font, f'{header_font}.ttf'))\r\n            pdfmetrics.registerFont(TTFont(data_font, f'{data_font}.ttf'))\r\n            # pdfmetrics.registerFont(TTFont(f\"{data_font} Bold\", f'{data_font}b.ttf'))\r\n            fonts_registered = True\r\n        except Exception as e1:\r\n            print(f\"Failed to register fonts with .ttf extension: {e1}\")\r\n            \r\n            try:\r\n                # Try with .TTF extension\r\n                pdfmetrics.registerFont(TTFont(header_font, f'{header_font}.TTF'))\r\n                pdfmetrics.registerFont(TTFont(data_font, f'{data_font}.TTF'))\r\n                # pdfmetrics.registerFont(TTFont(f\"{data_font} Bold\", f'{data_font}b.TTF'))\r\n                fonts_registered = True\r\n            except Exception as e2:\r\n                print(f\"Failed to register fonts with .TTF extension: {e2}\")\r\n        \r\n        if not fonts_registered:\r\n            print(\"Warning: Using default fonts\")\r\n            \r\n        print(\"Registered fonts:\", pdfmetrics.getRegisteredFontNames())\r\n    except Exception as e:\r\n        print(f\"Warning: Could not register fonts: {e}\")\r\n        print(\"Using default fonts\")\r\n\r\n    # Create the PDF\r\n    pdf = create_pdf(temp_output_pdf)\r\n    \r\n    # Load and process the CSV\r\n    try:\r\n        csv = get_spreadsheet(input_csv)\r\n        process_spreadsheet(csv, pdf, logo_path, client_logo_path, base_image_dir)\r\n        save_pdf(pdf)\r\n        \r\n        # Compress the PDF if enabled\r\n        if os.environ.get(\"COMPRESS_PDF\", \"true\").lower() == \"true\":\r\n            if compress_pdf(temp_output_pdf, final_output_pdf):\r\n                # Delete temp file if compression succeeded\r\n                if os.path.exists(temp_output_pdf):\r\n                    os.remove(temp_output_pdf)\r\n            else:\r\n                # Use uncompressed version if compression failed\r\n                import shutil\r\n                shutil.copy(temp_output_pdf, final_output_pdf)\r\n                if os.path.exists(temp_output_pdf):\r\n                    os.remove(temp_output_pdf)\r\n        else:\r\n            # Just rename temp file to final if no compression\r\n            import shutil\r\n            shutil.copy(temp_output_pdf, final_output_pdf)\r\n            if os.path.exists(temp_output_pdf):\r\n                os.remove(temp_output_pdf)\r\n            \r\n        print(f\"PDF successfully created: {final_output_pdf}\")\r\n    except Exception as e:\r\n        print(f\"Error processing CSV: {e}\")\r\n        sys.exit(-1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()","size_bytes":27341},"attached_assets/Latitude adjusterd flight plan (2)_1758037017412.py":{"content":"from qgis.core import QgsFeature, QgsGeometry, QgsPointXY, QgsVectorLayer, QgsProject\nfrom qgis.gui import QgsMapToolEmitPoint\nfrom qgis.PyQt.QtWidgets import QInputDialog\nfrom math import cos, radians\n\n# Function to convert feet to degrees, considering latitude for east-west conversion\ndef feet_to_degrees(feet, is_longitude, latitude=0):\n    if is_longitude:\n        # Adjust conversion factor based on latitude for longitude\n        return feet / (364000 * cos(radians(latitude)))\n    else:\n        # Latitude conversion remains the same for north-south\n        return feet / 364000\n\n# Prompt for project latitude\nproject_latitude, ok_lat = QInputDialog.getDouble(None, \"Project Latitude\", \"Enter the latitude of your project:\", decimals=6)\n\n# Set up the distances and number of zigzags\ndistance_north_south, ok_ns = QInputDialog.getDouble(None, \"Input Distance\", \"Enter North-South distance (in feet):\", 713, decimals=2)\ndistance_east_west, ok_ew = QInputDialog.getDouble(None, \"Input Distance\", \"Enter East-West distance (in feet):\", 44, decimals=2)\nzigzags, ok_z = QInputDialog.getInt(None, \"Input Zigzags\", \"Enter number of zigzags:\")\n\n# Convert feet input to degrees using the project latitude\ndistance_north_south_deg = feet_to_degrees(distance_north_south, False)\ndistance_east_west_deg = feet_to_degrees(distance_east_west, True, project_latitude)\n\n# Function to create a zigzag line\ndef create_zigzag_line(start_point, distance_ns_deg, distance_ew_deg, zigzags):\n    points = [QgsPointXY(start_point.x(), start_point.y())]\n    for i in range(zigzags):\n        # Move north or south\n        direction = 1 if i % 2 == 0 else -1\n        new_y = points[-1].y() + (distance_ns_deg * direction)\n        points.append(QgsPointXY(points[-1].x(), new_y))\n        # Move west\n        new_x = points[-1].x() - distance_ew_deg\n        points.append(QgsPointXY(new_x, new_y))\n    return QgsGeometry.fromPolylineXY(points)\n\n# Function to add a feature to the layer\ndef add_feature_to_layer(geometry, layer):\n    feat = QgsFeature()\n    feat.setGeometry(geometry)\n    layer.dataProvider().addFeature(feat)\n    layer.updateExtents()\n    layer.triggerRepaint()\n\n# Create the zigzag line and add it to a layer\ndef create_and_add_zigzag(start_point):\n    # Create a memory layer to store the zigzag line\n    line_layer = QgsVectorLayer('LineString?crs=EPSG:4326', 'Zigzag Line', 'memory')\n    QgsProject.instance().addMapLayer(line_layer)\n    line_layer.startEditing()\n    \n  \n   \n    # Create and add the zigzag line\n    geom = create_zigzag_line(start_point, distance_north_south_deg, distance_east_west_deg, zigzags)\n    add_feature_to_layer(geom, line_layer)\n    \n    line_layer.commitChanges()\n\n# Map tool to capture the click on the map\nclass PointTool(QgsMapToolEmitPoint):\n    def __init__(self, canvas):\n        self.canvas = canvas\n        QgsMapToolEmitPoint.__init__(self, self.canvas)\n\n    def canvasReleaseEvent(self, event):\n        point = self.toMapCoordinates(event.pos())\n        create_and_add_zigzag(point)\n\n# Set the map tool to capture the click\nmap_tool = PointTool(iface.mapCanvas())\niface.mapCanvas().setMapTool(map_tool)\n","size_bytes":3142},"attached_assets/local_s3_mock_wrapper_1758036993824.py":{"content":"\"\"\"\r\nLocal S3 Mock Wrapper Script\r\n\r\nThis script:\r\n1. Runs a Python script (like CVIZ_GPT_CSV.py) to process images\r\n2. Creates a local directory structure that mimics an S3 bucket\r\n3. Copies the output images to this structure\r\n4. Logs the entire process for Claude to see\r\n\r\n\r\nThis is useful for testing or for users who don't have AWS access.\r\n\r\nUsage: python local_s3_mock_wrapper.py your_script.py mock_bucket_name s3_prefix [script_args]\r\n\"\"\"\r\nimport sys\r\nimport subprocess\r\nimport datetime\r\nimport os\r\nimport time\r\nimport shutil\r\n\r\ndef run_script(script_path, script_args, log_file):\r\n    \"\"\"Run a Python script and capture its output to a log file.\"\"\"\r\n    with open(log_file, 'a') as f:\r\n        f.write(f\"=== Running {script_path} at {datetime.datetime.now()} ===\\n\\n\")\r\n        \r\n        try:\r\n            # Create the command: python script.py args\r\n            cmd = [sys.executable, script_path] + script_args\r\n            \r\n            # Run the process and capture output\r\n            process = subprocess.Popen(\r\n                cmd, \r\n                stdout=subprocess.PIPE, \r\n                stderr=subprocess.STDOUT,\r\n                text=True,\r\n                bufsize=1\r\n            )\r\n            \r\n            # Stream output to both console and file\r\n            for line in process.stdout:\r\n                print(line, end='')  # Print to console\r\n                f.write(line)        # Write to file\r\n                \r\n            # Wait for process to complete\r\n            return_code = process.wait()\r\n            \r\n            # Write completion status\r\n            f.write(f\"\\n\\n=== Script completed with return code {return_code} ===\\n\")\r\n            f.write(f\"=== Finished at {datetime.datetime.now()} ===\\n\\n\")\r\n            \r\n            print(f\"\\nScript completed with return code {return_code}\")\r\n            \r\n            return return_code == 0  # Return True if script succeeded\r\n            \r\n        except Exception as e:\r\n            error_msg = f\"Error running script: {e}\"\r\n            print(error_msg)\r\n            f.write(f\"\\n\\n{error_msg}\\n\")\r\n            f.write(f\"=== Failed at {datetime.datetime.now()} ===\\n\\n\")\r\n            return False\r\n\r\ndef copy_to_mock_s3(local_directory, mock_bucket_dir, s3_prefix, log_file):\r\n    \"\"\"Copy all files to a local directory structure that mimics an S3 bucket.\"\"\"\r\n    with open(log_file, 'a') as f:\r\n        f.write(f\"=== Starting copy to mock S3 from {local_directory} to {mock_bucket_dir}/{s3_prefix} at {datetime.datetime.now()} ===\\n\\n\")\r\n        \r\n        try:\r\n            # Create the mock S3 bucket directory if it doesn't exist\r\n            os.makedirs(mock_bucket_dir, exist_ok=True)\r\n            \r\n            # Create the prefix directory\r\n            prefix_dir = os.path.join(mock_bucket_dir, s3_prefix)\r\n            os.makedirs(prefix_dir, exist_ok=True)\r\n            \r\n            # Check if source directory exists\r\n            if not os.path.exists(local_directory):\r\n                error_msg = f\"Local directory {local_directory} does not exist\"\r\n                print(error_msg)\r\n                f.write(f\"{error_msg}\\n\")\r\n                f.write(f\"=== Copy failed at {datetime.datetime.now()} ===\\n\\n\")\r\n                return False\r\n            \r\n            # Count files to copy\r\n            file_count = sum(len(files) for _, _, files in os.walk(local_directory))\r\n            f.write(f\"Found {file_count} files to copy\\n\")\r\n            print(f\"Found {file_count} files to copy\")\r\n            \r\n            # Copy files\r\n            copied_count = 0\r\n            start_time = time.time()\r\n            \r\n            for root, dirs, files in os.walk(local_directory):\r\n                for filename in files:\r\n                    local_path = os.path.join(root, filename)\r\n                    \r\n                    # Calculate relative path for destination\r\n                    relative_path = os.path.relpath(local_path, local_directory)\r\n                    dest_path = os.path.join(prefix_dir, relative_path)\r\n                    \r\n                    # Create destination directory if it doesn't exist\r\n                    os.makedirs(os.path.dirname(dest_path), exist_ok=True)\r\n                    \r\n                    # Copy file\r\n                    try:\r\n                        shutil.copy2(local_path, dest_path)\r\n                        copied_count += 1\r\n                        \r\n                        # Log progress every 10 files\r\n                        if copied_count % 10 == 0 or copied_count == file_count:\r\n                            progress = (copied_count / file_count) * 100\r\n                            elapsed = time.time() - start_time\r\n                            msg = f\"Copied {copied_count}/{file_count} files ({progress:.1f}%) in {elapsed:.1f} seconds\"\r\n                            print(msg)\r\n                            f.write(f\"{msg}\\n\")\r\n                            \r\n                    except Exception as e:\r\n                        error_msg = f\"Error copying {local_path} to {dest_path}: {e}\"\r\n                        print(error_msg)\r\n                        f.write(f\"{error_msg}\\n\")\r\n            \r\n            # Log completion\r\n            total_time = time.time() - start_time\r\n            success_msg = f\"Successfully copied {copied_count}/{file_count} files to mock S3 in {total_time:.1f} seconds\"\r\n            print(success_msg)\r\n            f.write(f\"{success_msg}\\n\")\r\n            f.write(f\"Files are accessible at: {os.path.abspath(prefix_dir)}\\n\")\r\n            print(f\"Files are accessible at: {os.path.abspath(prefix_dir)}\")\r\n            \r\n            # Create a simple HTML index file to browse the images\r\n            index_path = os.path.join(prefix_dir, \"index.html\")\r\n            with open(index_path, 'w') as index_file:\r\n                index_file.write(\"<html><head><title>Mock S3 Bucket</title></head><body>\\n\")\r\n                index_file.write(f\"<h1>Mock S3 Bucket: {os.path.basename(mock_bucket_dir)}/{s3_prefix}</h1>\\n\")\r\n                index_file.write(\"<ul>\\n\")\r\n                \r\n                # Add links to all image files\r\n                for root, _, files in os.walk(prefix_dir):\r\n                    for filename in files:\r\n                        if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):\r\n                            file_path = os.path.join(root, filename)\r\n                            relative_path = os.path.relpath(file_path, prefix_dir)\r\n                            index_file.write(f'  <li><a href=\"{relative_path}\">{relative_path}</a></li>\\n')\r\n                \r\n                index_file.write(\"</ul></body></html>\")\r\n            \r\n            f.write(f\"Created HTML index at: {index_path}\\n\")\r\n            print(f\"Created HTML index at: {index_path}\")\r\n            \r\n            f.write(f\"=== Copy to mock S3 completed at {datetime.datetime.now()} ===\\n\\n\")\r\n            return True\r\n            \r\n        except Exception as e:\r\n            error_msg = f\"Error during copy to mock S3: {e}\"\r\n            print(error_msg)\r\n            f.write(f\"{error_msg}\\n\")\r\n            f.write(f\"=== Copy failed at {datetime.datetime.now()} ===\\n\\n\")\r\n            return False\r\n\r\ndef main():\r\n    if len(sys.argv) < 4:\r\n        print(\"Usage: python local_s3_mock_wrapper.py your_script.py mock_bucket_name s3_prefix [script_args]\")\r\n        print(\"Example: python local_s3_mock_wrapper.py CVIZ_GPT_CSV.py my-bucket thermal-images\")\r\n        sys.exit(1)\r\n    \r\n    script_path = sys.argv[1]\r\n    mock_bucket_name = sys.argv[2]\r\n    s3_prefix = sys.argv[3]\r\n    script_args = sys.argv[4:]\r\n    \r\n    # Create a log file name based on the script name\r\n    script_name = os.path.basename(script_path)\r\n    base_name = os.path.splitext(script_name)[0]\r\n    timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n    log_file = f\"{base_name}_mock_s3_{timestamp}.log\"\r\n    \r\n    # Create the mock bucket directory in the current directory\r\n    mock_bucket_dir = os.path.join(os.getcwd(), \"mock_s3\", mock_bucket_name)\r\n    \r\n    print(f\"Running {script_path} with arguments: {' '.join(script_args)}\")\r\n    print(f\"Output will be saved to {log_file}\")\r\n    print(f\"Images will be copied to {mock_bucket_dir}/{s3_prefix}/\")\r\n    \r\n    # Determine the output folder from CVIZ_GPT_CSV.py\r\n    # This is a bit of a hack, but it works for this specific script\r\n    output_folder = None\r\n    if \"CVIZ_GPT_CSV.py\" in script_path:\r\n        with open(script_path, 'r') as f:\r\n            for line in f:\r\n                if \"output_folder\" in line and \"=\" in line:\r\n                    # Extract the output folder path\r\n                    output_folder = line.split(\"=\")[1].strip().strip('\"\\'')\r\n                    break\r\n    \r\n    # If we couldn't determine the output folder, ask the user\r\n    if not output_folder:\r\n        output_folder = input(\"Enter the path to the output folder containing images to copy: \")\r\n    \r\n    # Run the script\r\n    with open(log_file, 'w') as f:\r\n        f.write(f\"=== Mock S3 Wrapper Log ===\\n\")\r\n        f.write(f\"Script: {script_path}\\n\")\r\n        f.write(f\"Arguments: {' '.join(script_args)}\\n\")\r\n        f.write(f\"Mock Bucket: {mock_bucket_name}\\n\")\r\n        f.write(f\"S3 Prefix: {s3_prefix}\\n\")\r\n        f.write(f\"Output Folder: {output_folder}\\n\")\r\n        f.write(f\"Started at: {datetime.datetime.now()}\\n\\n\")\r\n    \r\n    # Run the script\r\n    script_success = run_script(script_path, script_args, log_file)\r\n    \r\n    # Copy to mock S3 if script succeeded\r\n    if script_success:\r\n        print(f\"\\nCopying output files from {output_folder} to mock S3...\")\r\n        copy_success = copy_to_mock_s3(output_folder, mock_bucket_dir, s3_prefix, log_file)\r\n        \r\n        if copy_success:\r\n            print(f\"\\nEntire process completed successfully!\")\r\n            print(f\"You can view the images by opening: {os.path.join(mock_bucket_dir, s3_prefix, 'index.html')}\")\r\n        else:\r\n            print(f\"\\nScript ran successfully, but copy to mock S3 failed. Check {log_file} for details.\")\r\n    else:\r\n        print(f\"\\nScript failed. Copy to mock S3 skipped. Check {log_file} for details.\")\r\n    \r\n    print(f\"Log saved to {os.path.abspath(log_file)}\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n","size_bytes":10248},"attached_assets/process_anomaly_images_1758037065237.py":{"content":"#!/usr/bin/env python\r\n\"\"\"\r\nProcess Anomaly Images\r\n\r\nThis script processes thermal and wide images that have anomalies detected, \r\nadds the Automate Solar logo, and saves them to a dedicated output folder.\r\n\"\"\"\r\n\r\nimport os\r\nimport cv2\r\nimport numpy as np\r\nfrom PIL import Image\r\nimport argparse\r\nimport glob\r\n\r\ndef has_bounding_box(image_path):\r\n    \"\"\"\r\n    Check if an image has red bounding boxes indicating anomalies.\r\n    Returns True if red rectangles are detected, False otherwise.\r\n    \"\"\"\r\n    try:\r\n        # Read the image\r\n        img = cv2.imread(image_path)\r\n        if img is None:\r\n            print(f\"Could not read image: {image_path}\")\r\n            return False\r\n        \r\n        # Convert to HSV space for easier color detection\r\n        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\r\n        \r\n        # Define red color range in HSV\r\n        # Red has two ranges in HSV, so we need to check both\r\n        lower_red1 = np.array([0, 120, 70])\r\n        upper_red1 = np.array([10, 255, 255])\r\n        mask1 = cv2.inRange(hsv, lower_red1, upper_red1)\r\n        \r\n        lower_red2 = np.array([170, 120, 70])  \r\n        upper_red2 = np.array([180, 255, 255])\r\n        mask2 = cv2.inRange(hsv, lower_red2, upper_red2)\r\n        \r\n        # Combine masks\r\n        red_mask = cv2.bitwise_or(mask1, mask2)\r\n        \r\n        # To consider an image as having a bounding box, we look for:\r\n        # - Sufficient red pixels in a pattern consistent with a bounding box\r\n        \r\n        # Count red pixels\r\n        red_pixel_count = cv2.countNonZero(red_mask)\r\n        \r\n        # Detect if red pixels form lines (potential bounding boxes)\r\n        # We'll apply morphological operations to identify line segments\r\n        kernel = np.ones((3, 3), np.uint8)\r\n        dilated = cv2.dilate(red_mask, kernel, iterations=1)\r\n        eroded = cv2.erode(dilated, kernel, iterations=1)\r\n        \r\n        # Find contours that could be rectangles\r\n        contours, _ = cv2.findContours(eroded, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\r\n        \r\n        # Check if any contour could be a bounding box\r\n        for contour in contours:\r\n            # Approximate the contour to a polygon\r\n            perimeter = cv2.arcLength(contour, True)\r\n            approx = cv2.approxPolyDP(contour, 0.04 * perimeter, True)\r\n            \r\n            # If it has 4 points, it could be a rectangle\r\n            if len(approx) == 4:\r\n                return True\r\n        \r\n        # Also check if there's a reasonable number of red pixels that could be a bounding box\r\n        # A typical bounding box may have at least 500 red pixels\r\n        if red_pixel_count > 500:\r\n            return True\r\n            \r\n        return False\r\n    \r\n    except Exception as e:\r\n        print(f\"Error checking for bounding boxes in {image_path}: {e}\")\r\n        return False\r\n\r\ndef add_logo_to_image(image_path, logo_path, output_path):\r\n    \"\"\"\r\n    Add the Automate Solar logo to an image.\r\n    \r\n    Args:\r\n        image_path: Path to the source image\r\n        logo_path: Path to the logo image\r\n        output_path: Path where the image with logo should be saved\r\n    \"\"\"\r\n    try:\r\n        # Read the source image\r\n        img = cv2.imread(image_path)\r\n        if img is None:\r\n            print(f\"Could not read image: {image_path}\")\r\n            return False\r\n        \r\n        # Read the logo\r\n        logo = cv2.imread(logo_path, cv2.IMREAD_UNCHANGED)\r\n        if logo is None:\r\n            print(f\"Could not read logo: {logo_path}\")\r\n            return False\r\n        \r\n        # Make sure logo has an alpha channel\r\n        if logo.shape[2] == 3:  # Convert BGR to BGRA\r\n            b, g, r = cv2.split(logo)\r\n            alpha = np.ones(b.shape, dtype=b.dtype) * 255\r\n            logo = cv2.merge((b, g, r, alpha))\r\n        \r\n        # Calculate logo size (30% of image width)\r\n        img_h, img_w = img.shape[:2]\r\n        logo_aspect_ratio = logo.shape[1] / logo.shape[0]\r\n        logo_width = int(img_w * 0.2)  # Logo width is 20% of image width\r\n        logo_height = int(logo_width / logo_aspect_ratio)\r\n        \r\n        # Resize logo\r\n        logo = cv2.resize(logo, (logo_width, logo_height))\r\n        \r\n        # Define region of interest\r\n        roi_y = img_h - logo_height - 20  # 20 pixels from bottom\r\n        roi_x = 20  # 20 pixels from left\r\n        \r\n        # Get region of interest from source image\r\n        roi = img[roi_y:roi_y + logo_height, roi_x:roi_x + logo_width]\r\n        \r\n        # Create mask from logo alpha channel\r\n        if logo.shape[2] == 4:  # If logo has alpha channel\r\n            logo_alpha = logo[:, :, 3] / 255.0\r\n            alpha_3channel = cv2.merge([logo_alpha, logo_alpha, logo_alpha])\r\n            \r\n            # Extract BGR channels from logo\r\n            logo_bgr = logo[:, :, :3]\r\n            \r\n            # Blend logo with image region\r\n            for c in range(0, 3):\r\n                roi[:, :, c] = roi[:, :, c] * (1 - alpha_3channel[:, :, c]) + \\\r\n                               logo_bgr[:, :, c] * alpha_3channel[:, :, c]\r\n            \r\n            # Place the blended region back in the image\r\n            img[roi_y:roi_y + logo_height, roi_x:roi_x + logo_width] = roi\r\n        else:\r\n            # If no alpha channel, just overlay logo\r\n            img[roi_y:roi_y + logo_height, roi_x:roi_x + logo_width] = logo[:, :, :3]\r\n        \r\n        # Save the result\r\n        cv2.imwrite(output_path, img)\r\n        return True\r\n    \r\n    except Exception as e:\r\n        print(f\"Error adding logo to {image_path}: {e}\")\r\n        return False\r\n\r\ndef process_images(input_folder, output_folder, logo_path):\r\n    \"\"\"\r\n    Process all annotated images in the input folder:\r\n    - Check if they have bounding boxes (indicating anomalies)\r\n    - If yes, add the logo and save to output folder\r\n    \r\n    Args:\r\n        input_folder: Folder containing annotated images\r\n        output_folder: Folder where processed images will be saved\r\n        logo_path: Path to the logo file\r\n    \"\"\"\r\n    if not os.path.exists(output_folder):\r\n        os.makedirs(output_folder)\r\n    \r\n    # Count variables\r\n    total_images = 0\r\n    anomaly_images = 0\r\n    \r\n    # Get all JPG files in the input folder\r\n    image_patterns = ['*A.JPG', '*A.jpg', '*TA.JPG', '*TA.jpg', '*WA.JPG', '*WA.jpg', '*ZA.JPG', '*ZA.jpg']\r\n    \r\n    for pattern in image_patterns:\r\n        image_files = glob.glob(os.path.join(input_folder, pattern))\r\n        \r\n        for image_path in image_files:\r\n            total_images += 1\r\n            filename = os.path.basename(image_path)\r\n            \r\n            # Skip T.JPG files (thermal) that are not annotated\r\n            if '_T.' in filename or 't.' in filename:\r\n                print(f\"Skipping thermal image: {filename}\")\r\n                continue\r\n            \r\n            print(f\"Processing {filename}...\")\r\n            \r\n            # Check if image has bounding boxes (anomalies)\r\n            if has_bounding_box(image_path):\r\n                anomaly_images += 1\r\n                output_path = os.path.join(output_folder, filename)\r\n                \r\n                # Add logo and save\r\n                if add_logo_to_image(image_path, logo_path, output_path):\r\n                    print(f\"✓ Added logo to {filename} and saved to {output_folder}\")\r\n                else:\r\n                    print(f\"✗ Failed to process {filename}\")\r\n            else:\r\n                print(f\"- No anomalies detected in {filename}, skipping\")\r\n    \r\n    print(f\"\\nSummary:\")\r\n    print(f\"Total images processed: {total_images}\")\r\n    print(f\"Images with anomalies: {anomaly_images}\")\r\n    print(f\"Images saved to: {output_folder}\")\r\n\r\ndef main():\r\n    # Parse command line arguments\r\n    parser = argparse.ArgumentParser(description='Process annotated images with anomalies.')\r\n    parser.add_argument('--input', default='Thermal_outputsA', help='Input folder containing annotated images')\r\n    parser.add_argument('--output', default='Processed_Anomaly_Images', help='Output folder for processed images')\r\n    parser.add_argument('--logo', default='Pic_Logo.png', help='Path to logo file')\r\n    \r\n    args = parser.parse_args()\r\n    \r\n    # Check if logo file exists\r\n    if not os.path.exists(args.logo):\r\n        print(f\"Error: Logo file not found: {args.logo}\")\r\n        return\r\n    \r\n    # Process images\r\n    process_images(args.input, args.output, args.logo)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n","size_bytes":8466},"components/ThermalMap.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\ninterface ThermalAnomaly {\n  id: string;\n  jobId: string;\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  coordinates: {\n    lat: number;\n    lng: number;\n  };\n  temperature: number;\n  description: string;\n  image: string;\n  detectedAt: string;\n}\n\ninterface AnomalyType {\n  color: string;\n  icon: string;\n  description: string;\n}\n\ninterface SeverityLevel {\n  color: string;\n  priority: number;\n  description: string;\n}\n\ninterface ThermalMapProps {\n  anomalies: ThermalAnomaly[];\n  center: [number, number];\n  zoom: number;\n  anomalyTypes: Record<string, AnomalyType>;\n  severityLevels: Record<string, SeverityLevel>;\n  onAnomalyClick?: (anomaly: ThermalAnomaly) => void;\n}\n\nconst ThermalMap: React.FC<ThermalMapProps> = ({\n  anomalies,\n  center,\n  zoom,\n  anomalyTypes,\n  severityLevels,\n  onAnomalyClick\n}) => {\n  // Create custom markers for different anomaly types and severities\n  const createCustomIcon = (anomaly: ThermalAnomaly) => {\n    const typeConfig = anomalyTypes[anomaly.type];\n    const severityConfig = severityLevels[anomaly.severity];\n    \n    const iconHtml = `\n      <div style=\"\n        background-color: ${severityConfig.color};\n        border: 3px solid ${typeConfig.color};\n        border-radius: 50%;\n        width: 20px;\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 10px;\n        color: white;\n        font-weight: bold;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        position: relative;\n      \">\n        ${typeConfig.icon}\n      </div>\n    `;\n\n    return L.divIcon({\n      html: iconHtml,\n      className: 'custom-thermal-marker',\n      iconSize: [20, 20],\n      iconAnchor: [10, 10],\n      popupAnchor: [0, -10],\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const formatTemperature = (temp: number) => {\n    return `${temp.toFixed(1)}°C`;\n  };\n\n  return (\n    <div className=\"h-96 w-full rounded-lg overflow-hidden border border-gray-200\">\n      <MapContainer\n        center={center}\n        zoom={zoom}\n        style={{ height: '100%', width: '100%' }}\n        scrollWheelZoom={true}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        {anomalies.map((anomaly) => (\n          <Marker\n            key={anomaly.id}\n            position={[anomaly.coordinates.lat, anomaly.coordinates.lng]}\n            icon={createCustomIcon(anomaly)}\n            eventHandlers={{\n              click: () => {\n                if (onAnomalyClick) {\n                  onAnomalyClick(anomaly);\n                }\n              },\n            }}\n          >\n            <Popup className=\"thermal-anomaly-popup\">\n              <div className=\"p-2 min-w-64\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"font-bold text-lg text-gray-800\">\n                    {anomalyTypes[anomaly.type].icon} {anomalyTypes[anomaly.type].description}\n                  </h3>\n                  <span \n                    className={`px-2 py-1 rounded-full text-xs font-medium text-white`}\n                    style={{ backgroundColor: severityLevels[anomaly.severity].color }}\n                  >\n                    {anomaly.severity.toUpperCase()}\n                  </span>\n                </div>\n                \n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Temperature:</span>\n                    <span className=\"font-semibold text-red-600\">\n                      {formatTemperature(anomaly.temperature)}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Coordinates:</span>\n                    <span className=\"font-mono text-xs\">\n                      {anomaly.coordinates.lat.toFixed(6)}, {anomaly.coordinates.lng.toFixed(6)}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Job ID:</span>\n                    <span className=\"font-mono text-xs\">{anomaly.jobId.slice(-8)}</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Detected:</span>\n                    <span className=\"text-xs\">{formatDate(anomaly.detectedAt)}</span>\n                  </div>\n                </div>\n                \n                <div className=\"mt-3 pt-2 border-t border-gray-200\">\n                  <p className=\"text-sm text-gray-700\">{anomaly.description}</p>\n                </div>\n                \n                {anomaly.image && (\n                  <div className=\"mt-3\">\n                    <img \n                      src={`/images/${anomaly.image}`}\n                      alt=\"Thermal anomaly\"\n                      className=\"w-full h-32 object-cover rounded-md\"\n                      onError={(e) => {\n                        (e.target as HTMLImageElement).style.display = 'none';\n                      }}\n                    />\n                  </div>\n                )}\n                \n                <div className=\"mt-3 flex justify-between items-center\">\n                  <span className=\"text-xs text-gray-500\">ID: {anomaly.id}</span>\n                  <button \n                    className=\"px-3 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600 transition-colors\"\n                    onClick={() => {\n                      if (onAnomalyClick) {\n                        onAnomalyClick(anomaly);\n                      }\n                    }}\n                  >\n                    View Details\n                  </button>\n                </div>\n              </div>\n            </Popup>\n          </Marker>\n        ))}\n      </MapContainer>\n      \n      {/* Custom styles for the map */}\n      <style jsx global>{`\n        .custom-thermal-marker {\n          background: none !important;\n          border: none !important;\n        }\n        \n        .thermal-anomaly-popup .leaflet-popup-content-wrapper {\n          border-radius: 8px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        }\n        \n        .thermal-anomaly-popup .leaflet-popup-content {\n          margin: 0;\n          line-height: 1.4;\n        }\n        \n        .thermal-anomaly-popup .leaflet-popup-tip {\n          background: white;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default ThermalMap;","size_bytes":7409},"pages/dashboard.tsx":{"content":"import type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport dynamic from \"next/dynamic\";\nimport sampleData from \"../data/sampleAnomalies.json\";\n\n// Dynamically import map component to avoid SSR issues\nconst ThermalMap = dynamic(() => import(\"../components/ThermalMap\"), {\n  ssr: false,\n  loading: () => <div className=\"h-96 bg-gray-100 animate-pulse rounded-lg flex items-center justify-center\">Loading map...</div>\n});\n\ninterface JobData {\n  id: string;\n  status: 'created' | 'uploading' | 'processing' | 'completed' | 'error';\n  fileCount: number;\n  processedCount: number;\n  anomalyCount?: number;\n  location?: string;\n  centerCoordinates?: {\n    lat: number;\n    lng: number;\n  };\n  createdAt: string;\n  completedAt?: string | null;\n  reportGenerated?: boolean;\n}\n\ninterface ThermalAnomaly {\n  id: string;\n  jobId: string;\n  type: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  coordinates: {\n    lat: number;\n    lng: number;\n  };\n  temperature: number;\n  description: string;\n  image: string;\n  detectedAt: string;\n}\n\nconst Dashboard: NextPage = () => {\n  const [jobs, setJobs] = useState<JobData[]>([]);\n  const [selectedJob, setSelectedJob] = useState<string | null>(null);\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [mapCenter, setMapCenter] = useState<[number, number]>([36.1627, -115.1656]);\n  const [mapZoom, setMapZoom] = useState(10);\n\n  const thermalAnomalies: ThermalAnomaly[] = sampleData.thermalAnomalies as ThermalAnomaly[];\n  const anomalyTypes = sampleData.anomalyTypes;\n  const severityLevels = sampleData.severityLevels;\n\n  // Load jobs data\n  useEffect(() => {\n    const loadJobs = async () => {\n      try {\n        // Load real jobs from API\n        const response = await fetch('/api/jobs');\n        if (response.ok) {\n          const realJobs = await response.json();\n          \n          // Combine with sample data\n          const combinedJobs: JobData[] = [\n            ...Object.values(realJobs).map((job: any) => ({\n              ...job,\n              anomalyCount: thermalAnomalies.filter(a => a.jobId === job.id).length,\n              location: job.id === 'job_mfmvv1ks_6mik79tsm' ? 'Nevada Solar Farm' : `Location ${job.id.slice(-4)}`,\n              centerCoordinates: { lat: 36.1627, lng: -115.1656 },\n              reportGenerated: job.status === 'completed'\n            })),\n            ...(sampleData.jobsWithAnomalies as JobData[]).filter(sampleJob => \n              !Object.keys(realJobs).includes(sampleJob.id)\n            )\n          ];\n          \n          setJobs(combinedJobs);\n        } else {\n          // Fallback to sample data only\n          setJobs(sampleData.jobsWithAnomalies as JobData[]);\n        }\n      } catch (error) {\n        console.error('Failed to load jobs:', error);\n        setJobs(sampleData.jobsWithAnomalies as JobData[]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadJobs();\n    \n    // Refresh every 30 seconds\n    const interval = setInterval(loadJobs, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Filtered jobs based on status and search\n  const filteredJobs = useMemo(() => {\n    return jobs.filter(job => {\n      const matchesStatus = statusFilter === 'all' || job.status === statusFilter;\n      const matchesSearch = searchTerm === '' || \n        job.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (job.location && job.location.toLowerCase().includes(searchTerm.toLowerCase()));\n      return matchesStatus && matchesSearch;\n    });\n  }, [jobs, statusFilter, searchTerm]);\n\n  // Get anomalies for selected job or all jobs\n  const displayedAnomalies = useMemo(() => {\n    if (selectedJob) {\n      return thermalAnomalies.filter(anomaly => anomaly.jobId === selectedJob);\n    }\n    return thermalAnomalies;\n  }, [selectedJob, thermalAnomalies]);\n\n  const handleJobSelect = (jobId: string) => {\n    const job = jobs.find(j => j.id === jobId);\n    if (job && job.centerCoordinates) {\n      setSelectedJob(jobId);\n      setMapCenter([job.centerCoordinates.lat, job.centerCoordinates.lng]);\n      setMapZoom(12);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const badges = {\n      'created': 'bg-gray-100 text-gray-800',\n      'uploading': 'bg-blue-100 text-blue-800',\n      'processing': 'bg-yellow-100 text-yellow-800', \n      'completed': 'bg-green-100 text-green-800',\n      'error': 'bg-red-100 text-red-800'\n    };\n    \n    return badges[status as keyof typeof badges] || 'bg-gray-100 text-gray-800';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const getProgressPercentage = (job: JobData) => {\n    if (job.status === 'completed') return 100;\n    if (job.fileCount === 0) return 0;\n    return Math.round((job.processedCount / job.fileCount) * 100);\n  };\n\n  // Stats calculations\n  const totalJobs = jobs.length;\n  const completedJobs = jobs.filter(j => j.status === 'completed').length;\n  const totalAnomalies = thermalAnomalies.length;\n  const criticalAnomalies = thermalAnomalies.filter(a => a.severity === 'critical').length;\n\n  return (\n    <>\n      <Head>\n        <title>Dashboard - ComplianceDrone</title>\n        <meta name=\"description\" content=\"ComplianceDrone thermal inspection dashboard with job tracking and anomaly visualization\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      {/* Header */}\n      <header className=\"gradient-bg text-white\">\n        <div className=\"cd-container\">\n          <nav className=\"flex items-center justify-between py-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Image \n                src=\"/logo.png\" \n                alt=\"ComplianceDrone Logo\" \n                width={50} \n                height={50}\n                priority\n                className=\"rounded-lg\"\n              />\n              <h1 className=\"text-2xl font-bold\">ComplianceDrone Dashboard</h1>\n            </div>\n            <div className=\"hidden md:flex space-x-8\">\n              <a href=\"/\" className=\"hover:text-gray-200 transition-colors\">Home</a>\n              <a href=\"/upload\" className=\"hover:text-gray-200 transition-colors\">Upload</a>\n              <a href=\"#\" className=\"text-gray-300\">Dashboard</a>\n              <a href=\"#contact\" className=\"hover:text-gray-200 transition-colors\">Contact</a>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"min-h-screen bg-gray-50\">\n        <div className=\"cd-container py-8\">\n          {/* Stats Overview */}\n          <div className=\"cd-grid cd-grid-4 gap-6 mb-8\">\n            <div className=\"card text-center\">\n              <h3 className=\"text-3xl font-bold text-gradient\">{totalJobs}</h3>\n              <p className=\"text-gray-600\">Total Jobs</p>\n            </div>\n            <div className=\"card text-center\">\n              <h3 className=\"text-3xl font-bold text-gradient\">{completedJobs}</h3>\n              <p className=\"text-gray-600\">Completed</p>\n            </div>\n            <div className=\"card text-center\">\n              <h3 className=\"text-3xl font-bold text-gradient\">{totalAnomalies}</h3>\n              <p className=\"text-gray-600\">Anomalies Detected</p>\n            </div>\n            <div className=\"card text-center\">\n              <h3 className=\"text-3xl font-bold text-red-600\">{criticalAnomalies}</h3>\n              <p className=\"text-gray-600\">Critical Issues</p>\n            </div>\n          </div>\n\n          {/* Dashboard Content */}\n          <div className=\"cd-grid cd-grid-2 gap-8\">\n            {/* Job Tracking Panel */}\n            <div className=\"card\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-gradient\">Job Tracking</h2>\n                <div className=\"flex space-x-4\">\n                  {/* Status Filter */}\n                  <select\n                    value={statusFilter}\n                    onChange={(e) => setStatusFilter(e.target.value)}\n                    className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-compliance-orange focus:border-transparent\"\n                  >\n                    <option value=\"all\">All Status</option>\n                    <option value=\"created\">Created</option>\n                    <option value=\"uploading\">Uploading</option>\n                    <option value=\"processing\">Processing</option>\n                    <option value=\"completed\">Completed</option>\n                    <option value=\"error\">Error</option>\n                  </select>\n                  \n                  {/* Search */}\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search jobs...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-compliance-orange focus:border-transparent\"\n                  />\n                </div>\n              </div>\n\n              {/* Jobs Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200\">\n                      <th className=\"text-left py-3 px-4 font-semibold\">Job ID</th>\n                      <th className=\"text-left py-3 px-4 font-semibold\">Location</th>\n                      <th className=\"text-left py-3 px-4 font-semibold\">Status</th>\n                      <th className=\"text-left py-3 px-4 font-semibold\">Progress</th>\n                      <th className=\"text-left py-3 px-4 font-semibold\">Anomalies</th>\n                      <th className=\"text-left py-3 px-4 font-semibold\">Created</th>\n                      <th className=\"text-left py-3 px-4 font-semibold\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {isLoading ? (\n                      <tr>\n                        <td colSpan={7} className=\"text-center py-8\">\n                          <div className=\"animate-pulse\">Loading jobs...</div>\n                        </td>\n                      </tr>\n                    ) : filteredJobs.length === 0 ? (\n                      <tr>\n                        <td colSpan={7} className=\"text-center py-8 text-gray-500\">\n                          No jobs found matching your criteria\n                        </td>\n                      </tr>\n                    ) : (\n                      filteredJobs.map((job) => (\n                        <tr \n                          key={job.id} \n                          className={`border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${\n                            selectedJob === job.id ? 'bg-orange-50' : ''\n                          }`}\n                          onClick={() => handleJobSelect(job.id)}\n                        >\n                          <td className=\"py-4 px-4\">\n                            <span className=\"font-mono text-sm\">{job.id}</span>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <span className=\"text-sm\">{job.location || 'Unknown'}</span>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusBadge(job.status)}`}>\n                              {job.status.toUpperCase()}\n                            </span>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                                <div \n                                  className=\"bg-compliance-orange h-2 rounded-full transition-all duration-300\"\n                                  style={{ width: `${getProgressPercentage(job)}%` }}\n                                ></div>\n                              </div>\n                              <span className=\"text-sm text-gray-600\">\n                                {job.processedCount}/{job.fileCount}\n                              </span>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <span className={`px-2 py-1 rounded-full text-sm ${\n                              (job.anomalyCount || 0) > 0 \n                                ? 'bg-red-100 text-red-800' \n                                : 'bg-green-100 text-green-800'\n                            }`}>\n                              {job.anomalyCount || 0}\n                            </span>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <span className=\"text-sm text-gray-600\">{formatDate(job.createdAt)}</span>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex space-x-2\">\n                              {job.reportGenerated && (\n                                <button className=\"text-compliance-orange hover:text-compliance-peach transition-colors\">\n                                  📄\n                                </button>\n                              )}\n                              <button className=\"text-gray-600 hover:text-compliance-orange transition-colors\">\n                                👁️\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            {/* Map Panel */}\n            <div className=\"card\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-gradient\">Thermal Anomaly Map</h2>\n                <div className=\"flex items-center space-x-4\">\n                  {selectedJob && (\n                    <button\n                      onClick={() => setSelectedJob(null)}\n                      className=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\n                    >\n                      Show All Jobs\n                    </button>\n                  )}\n                  <span className=\"text-sm text-gray-600\">\n                    {displayedAnomalies.length} anomalies\n                  </span>\n                </div>\n              </div>\n              \n              <ThermalMap \n                anomalies={displayedAnomalies}\n                center={mapCenter}\n                zoom={mapZoom}\n                anomalyTypes={anomalyTypes}\n                severityLevels={severityLevels}\n                onAnomalyClick={(anomaly) => {\n                  console.log('Anomaly clicked:', anomaly);\n                }}\n              />\n            </div>\n          </div>\n\n          {/* Anomaly Legend */}\n          <div className=\"card mt-8\">\n            <h3 className=\"text-xl font-bold text-gradient mb-4\">Anomaly Types & Severity</h3>\n            <div className=\"cd-grid cd-grid-2 gap-6\">\n              {/* Anomaly Types */}\n              <div>\n                <h4 className=\"font-semibold mb-3\">Issue Types</h4>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {Object.entries(anomalyTypes).map(([type, config]) => (\n                    <div key={type} className=\"flex items-center space-x-2\">\n                      <div \n                        className=\"w-4 h-4 rounded-full\"\n                        style={{ backgroundColor: config.color }}\n                      ></div>\n                      <span className=\"text-sm\">{config.icon} {config.description}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Severity Levels */}\n              <div>\n                <h4 className=\"font-semibold mb-3\">Severity Levels</h4>\n                <div className=\"space-y-2\">\n                  {Object.entries(severityLevels).map(([severity, config]) => (\n                    <div key={severity} className=\"flex items-center space-x-2\">\n                      <div \n                        className=\"w-4 h-4 rounded-full\"\n                        style={{ backgroundColor: config.color }}\n                      ></div>\n                      <span className=\"text-sm capitalize font-medium\">{severity}</span>\n                      <span className=\"text-sm text-gray-600\">- {config.description}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Dashboard;","size_bytes":17101},"pages/upload.tsx":{"content":"import type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport { useState, useCallback, useRef } from \"react\";\n\ninterface UploadedFile {\n  file: File;\n  id: string;\n  preview: string;\n  status: 'ready' | 'uploading' | 'uploaded' | 'error';\n  progress: number;\n  error?: string;\n}\n\ninterface JobStatus {\n  id: string;\n  status: 'created' | 'uploading' | 'processing' | 'completed' | 'error';\n  fileCount: number;\n  processedCount: number;\n  createdAt: string;\n}\n\nconst Upload: NextPage = () => {\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const [isDragActive, setIsDragActive] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  const [jobStatus, setJobStatus] = useState<JobStatus | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/tiff'];\n  const maxFileSize = 20 * 1024 * 1024; // 20MB\n  const maxFiles = 500;\n\n  const generateId = () => Math.random().toString(36).substr(2, 9);\n\n  const validateFile = (file: File): string | null => {\n    if (!allowedTypes.includes(file.type)) {\n      return 'Only JPG, JPEG, PNG, and TIFF files are allowed';\n    }\n    if (file.size > maxFileSize) {\n      return 'File size must be less than 20MB';\n    }\n    return null;\n  };\n\n  const processFiles = useCallback((files: FileList | File[]) => {\n    const fileArray = Array.from(files);\n    const totalFiles = uploadedFiles.length + fileArray.length;\n\n    if (totalFiles > maxFiles) {\n      alert(`Maximum ${maxFiles} files allowed. You're trying to upload ${totalFiles} files.`);\n      return;\n    }\n\n    const newFiles: UploadedFile[] = fileArray.map(file => {\n      const error = validateFile(file);\n      return {\n        file,\n        id: generateId(),\n        preview: URL.createObjectURL(file),\n        status: error ? 'error' : 'ready',\n        progress: 0,\n        error\n      };\n    });\n\n    setUploadedFiles(prev => [...prev, ...newFiles]);\n  }, [uploadedFiles.length]);\n\n  const onDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragActive(true);\n  }, []);\n\n  const onDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragActive(false);\n  }, []);\n\n  const onDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const onDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragActive(false);\n\n    const files = e.dataTransfer.files;\n    if (files && files.length > 0) {\n      processFiles(files);\n    }\n  }, [processFiles]);\n\n  const onFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      processFiles(e.target.files);\n    }\n  };\n\n  const removeFile = (id: string) => {\n    setUploadedFiles(prev => {\n      const fileToRemove = prev.find(f => f.id === id);\n      if (fileToRemove) {\n        URL.revokeObjectURL(fileToRemove.preview);\n      }\n      return prev.filter(f => f.id !== id);\n    });\n  };\n\n  const clearAllFiles = () => {\n    uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n    setUploadedFiles([]);\n    setJobStatus(null);\n  };\n\n  // Upload single file with progress tracking\n  const uploadFileWithProgress = (file: UploadedFile, jobId: string): Promise<void> => {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      const formData = new FormData();\n      formData.append('file', file.file);\n      formData.append('jobId', jobId);\n\n      // Track upload progress\n      xhr.upload.addEventListener('progress', (e) => {\n        if (e.lengthComputable) {\n          const progress = Math.round((e.loaded / e.total) * 100);\n          setUploadedFiles(prev =>\n            prev.map(f => f.id === file.id ? { ...f, progress } : f)\n          );\n        }\n      });\n\n      // Handle successful upload\n      xhr.addEventListener('load', () => {\n        if (xhr.status === 200) {\n          try {\n            const response = JSON.parse(xhr.responseText);\n            setUploadedFiles(prev =>\n              prev.map(f => f.id === file.id ? { \n                ...f, \n                status: 'uploaded', \n                progress: 100 \n              } : f)\n            );\n            resolve();\n          } catch (error) {\n            reject(new Error('Invalid response from server'));\n          }\n        } else {\n          reject(new Error(`Upload failed: ${xhr.statusText}`));\n        }\n      });\n\n      // Handle errors\n      xhr.addEventListener('error', () => {\n        reject(new Error('Network error during upload'));\n      });\n\n      // Start upload\n      xhr.open('POST', '/api/upload');\n      xhr.send(formData);\n    });\n  };\n\n  // Update job status from backend\n  const fetchJobStatus = async (jobId: string) => {\n    try {\n      const response = await fetch(`/api/jobs?jobId=${jobId}`);\n      if (response.ok) {\n        const job = await response.json();\n        setJobStatus(job);\n        return job;\n      }\n    } catch (error) {\n      console.error('Failed to fetch job status:', error);\n    }\n    return null;\n  };\n\n  const startUpload = async () => {\n    const validFiles = uploadedFiles.filter(f => f.status === 'ready');\n    if (validFiles.length === 0) {\n      alert('No valid files to upload');\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      // Create job\n      const jobResponse = await fetch('/api/jobs', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ fileCount: validFiles.length })\n      });\n\n      if (!jobResponse.ok) {\n        throw new Error('Failed to create job');\n      }\n\n      const job = await jobResponse.json();\n      setJobStatus(job);\n\n      // Set all files to uploading status\n      setUploadedFiles(prev => \n        prev.map(f => validFiles.find(vf => vf.id === f.id) ? { ...f, status: 'uploading', progress: 0 } : f)\n      );\n\n      // Upload files concurrently (max 5 at a time)\n      const concurrencyLimit = 5;\n      const uploadPromises: Promise<void>[] = [];\n      \n      for (let i = 0; i < validFiles.length; i += concurrencyLimit) {\n        const batch = validFiles.slice(i, i + concurrencyLimit);\n        const batchPromises = batch.map(file => \n          uploadFileWithProgress(file, job.id).catch(error => {\n            setUploadedFiles(prev =>\n              prev.map(f => f.id === file.id ? { \n                ...f, \n                status: 'error', \n                error: error instanceof Error ? error.message : 'Upload failed' \n              } : f)\n            );\n          })\n        );\n        \n        await Promise.all(batchPromises);\n      }\n\n      // Fetch final job status from backend\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Brief delay for backend processing\n      await fetchJobStatus(job.id);\n\n    } catch (error) {\n      alert(error instanceof Error ? error.message : 'Upload failed');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const validFilesCount = uploadedFiles.filter(f => f.status !== 'error').length;\n  const uploadedCount = uploadedFiles.filter(f => f.status === 'uploaded').length;\n\n  return (\n    <>\n      <Head>\n        <title>Upload Thermal Images - ComplianceDrone</title>\n        <meta name=\"description\" content=\"Upload thermal inspection images for AI-powered analysis and PDF report generation\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      {/* Header */}\n      <header className=\"gradient-bg text-white\">\n        <div className=\"cd-container\">\n          <nav className=\"flex items-center justify-between py-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Image \n                src=\"/logo.png\" \n                alt=\"ComplianceDrone Logo\" \n                width={50} \n                height={50}\n                priority\n                className=\"rounded-lg\"\n              />\n              <h1 className=\"text-2xl font-bold\">ComplianceDrone</h1>\n            </div>\n            <div className=\"hidden md:flex space-x-8\">\n              <a href=\"/\" className=\"hover:text-gray-200 transition-colors\">Home</a>\n              <a href=\"#\" className=\"text-gray-300\">Upload</a>\n              <a href=\"/dashboard\" className=\"hover:text-gray-200 transition-colors\">Dashboard</a>\n              <a href=\"#contact\" className=\"hover:text-gray-200 transition-colors\">Contact</a>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"min-h-screen bg-gray-50\">\n        <div className=\"cd-container py-12\">\n          {/* Header Section */}\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold text-gradient mb-4\">\n              Upload Thermal Images\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Upload your thermal inspection images for AI-powered analysis. \n              Supports JPG, JPEG, PNG, and TIFF files up to 20MB each.\n            </p>\n          </div>\n\n          {/* Upload Area */}\n          <div className=\"max-w-4xl mx-auto\">\n            <div\n              className={`border-2 border-dashed rounded-lg p-12 text-center transition-all duration-300 ${\n                isDragActive \n                  ? 'border-compliance-orange bg-orange-50' \n                  : 'border-gray-300 bg-white hover:border-compliance-orange hover:bg-orange-50'\n              }`}\n              onDragEnter={onDragEnter}\n              onDragLeave={onDragLeave}\n              onDragOver={onDragOver}\n              onDrop={onDrop}\n            >\n              <div className=\"mb-6\">\n                <svg className=\"mx-auto h-12 w-12 text-gray-400\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 48 48\">\n                  <path d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                </svg>\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">\n                Drop thermal images here, or click to browse\n              </h3>\n              <p className=\"text-gray-500 mb-6\">\n                Support for JPG, JPEG, PNG, TIFF files (up to {maxFiles} files, 20MB each)\n              </p>\n              <button\n                onClick={() => fileInputRef.current?.click()}\n                className=\"btn-primary inline-flex items-center space-x-2\"\n                disabled={isUploading}\n              >\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\n                </svg>\n                <span>Browse Files</span>\n              </button>\n            </div>\n\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept=\".jpg,.jpeg,.png,.tiff\"\n              onChange={onFileInputChange}\n              className=\"hidden\"\n            />\n          </div>\n\n          {/* File Preview Section */}\n          {uploadedFiles.length > 0 && (\n            <div className=\"max-w-4xl mx-auto mt-12\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-2xl font-bold text-gray-800\">\n                  Uploaded Files ({validFilesCount})\n                </h3>\n                <div className=\"flex space-x-4\">\n                  <button\n                    onClick={clearAllFiles}\n                    className=\"text-gray-600 hover:text-red-600 transition-colors\"\n                    disabled={isUploading}\n                  >\n                    Clear All\n                  </button>\n                  {validFilesCount > 0 && (\n                    <button\n                      onClick={startUpload}\n                      disabled={isUploading || validFilesCount === 0}\n                      className=\"btn-primary disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      {isUploading ? 'Uploading...' : `Process ${validFilesCount} Images`}\n                    </button>\n                  )}\n                </div>\n              </div>\n\n              {/* Job Status */}\n              {jobStatus && (\n                <div className=\"card mb-6\">\n                  <h4 className=\"font-semibold mb-2\">Job Status: {jobStatus.id}</h4>\n                  <div className=\"flex items-center space-x-4\">\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                      jobStatus.status === 'completed' ? 'bg-green-100 text-green-800' :\n                      jobStatus.status === 'processing' ? 'bg-yellow-100 text-yellow-800' :\n                      jobStatus.status === 'error' ? 'bg-red-100 text-red-800' :\n                      'bg-blue-100 text-blue-800'\n                    }`}>\n                      {jobStatus.status.toUpperCase()}\n                    </span>\n                    <span className=\"text-gray-600\">\n                      {uploadedCount} of {jobStatus.fileCount} files uploaded\n                    </span>\n                  </div>\n                </div>\n              )}\n\n              {/* File Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {uploadedFiles.map((uploadedFile) => (\n                  <div key={uploadedFile.id} className=\"card\">\n                    <div className=\"relative\">\n                      <img\n                        src={uploadedFile.preview}\n                        alt={uploadedFile.file.name}\n                        className=\"w-full h-32 object-cover rounded-lg mb-3\"\n                      />\n                      <button\n                        onClick={() => removeFile(uploadedFile.id)}\n                        className=\"absolute top-2 right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm hover:bg-red-600 transition-colors\"\n                        disabled={isUploading}\n                      >\n                        ×\n                      </button>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"font-medium text-gray-800 mb-1 truncate\" title={uploadedFile.file.name}>\n                        {uploadedFile.file.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-500 mb-2\">\n                        {formatFileSize(uploadedFile.file.size)}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className={`px-2 py-1 rounded text-xs font-medium ${\n                          uploadedFile.status === 'uploaded' ? 'bg-green-100 text-green-800' :\n                          uploadedFile.status === 'uploading' ? 'bg-yellow-100 text-yellow-800' :\n                          uploadedFile.status === 'error' ? 'bg-red-100 text-red-800' :\n                          'bg-gray-100 text-gray-800'\n                        }`}>\n                          {uploadedFile.status.toUpperCase()}\n                        </span>\n                        \n                        {uploadedFile.status === 'uploading' && (\n                          <div className=\"w-16 bg-gray-200 rounded-full h-1\">\n                            <div \n                              className=\"bg-compliance-orange h-1 rounded-full transition-all duration-300\"\n                              style={{ width: `${uploadedFile.progress}%` }}\n                            />\n                          </div>\n                        )}\n                      </div>\n                      \n                      {uploadedFile.error && (\n                        <p className=\"text-red-600 text-xs mt-2\">{uploadedFile.error}</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Upload;","size_bytes":16699},"pages/api/jobs.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport fs from 'fs';\nimport path from 'path';\nimport { hasValidSession } from '../../lib/nextAuth';\nimport { isValidJobId, getSecureJobPath, getUploadsDir } from '../../lib/pathValidation';\n\nconst uploadsDir = getUploadsDir();\nconst jobsIndexPath = path.join(uploadsDir, 'jobs-index.json');\n\n// Ensure uploads directory exists\nif (!fs.existsSync(uploadsDir)) {\n  fs.mkdirSync(uploadsDir, { recursive: true });\n}\n\ninterface JobMetadata {\n  id: string;\n  status: 'created' | 'uploading' | 'processing' | 'completed' | 'error';\n  fileCount: number;\n  processedCount: number;\n  uploadedFiles: any[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface JobsIndex {\n  [jobId: string]: {\n    id: string;\n    status: string;\n    fileCount: number;\n    createdAt: string;\n    updatedAt: string;\n  };\n}\n\nconst generateJobId = (): string => {\n  const timestamp = Date.now().toString(36);\n  const random = Math.random().toString(36).substr(2, 9);\n  return `job_${timestamp}_${random}`;\n};\n\nconst loadJobsIndex = (): JobsIndex => {\n  if (fs.existsSync(jobsIndexPath)) {\n    try {\n      return JSON.parse(fs.readFileSync(jobsIndexPath, 'utf8'));\n    } catch (error) {\n      console.error('Error loading jobs index:', error);\n    }\n  }\n  return {};\n};\n\nconst saveJobsIndex = (index: JobsIndex): void => {\n  try {\n    fs.writeFileSync(jobsIndexPath, JSON.stringify(index, null, 2));\n  } catch (error) {\n    console.error('Error saving jobs index:', error);\n  }\n};\n\nconst createJob = (fileCount: number): JobMetadata => {\n  const jobId = generateJobId();\n  const timestamp = new Date().toISOString();\n  \n  const job: JobMetadata = {\n    id: jobId,\n    status: 'created',\n    fileCount,\n    processedCount: 0,\n    uploadedFiles: [],\n    createdAt: timestamp,\n    updatedAt: timestamp\n  };\n\n  // Create secure job directory\n  const jobDir = getSecureJobPath(jobId);\n  if (!fs.existsSync(jobDir)) {\n    fs.mkdirSync(jobDir, { recursive: true });\n  }\n\n  // Save job metadata\n  const jobMetadataPath = path.join(jobDir, 'metadata.json');\n  fs.writeFileSync(jobMetadataPath, JSON.stringify(job, null, 2));\n\n  // Update jobs index\n  const jobsIndex = loadJobsIndex();\n  jobsIndex[jobId] = {\n    id: jobId,\n    status: job.status,\n    fileCount: job.fileCount,\n    createdAt: job.createdAt,\n    updatedAt: job.updatedAt\n  };\n  saveJobsIndex(jobsIndex);\n\n  return job;\n};\n\nconst getJob = (jobId: string): JobMetadata | null => {\n  // Validate jobId format to prevent path traversal\n  if (!isValidJobId(jobId)) {\n    console.error('Invalid job ID format:', jobId);\n    return null;\n  }\n  \n  const jobDir = getSecureJobPath(jobId);\n  const jobMetadataPath = path.join(jobDir, 'metadata.json');\n  \n  if (!fs.existsSync(jobMetadataPath)) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(fs.readFileSync(jobMetadataPath, 'utf8'));\n  } catch (error) {\n    console.error('Error loading job metadata:', error);\n    return null;\n  }\n};\n\nconst updateJobStatus = (jobId: string, status: JobMetadata['status']): JobMetadata | null => {\n  const job = getJob(jobId);\n  if (!job) return null;\n\n  job.status = status;\n  job.updatedAt = new Date().toISOString();\n\n  // Save updated job metadata with secure path\n  const jobDir = getSecureJobPath(jobId);\n  const jobMetadataPath = path.join(jobDir, 'metadata.json');\n  fs.writeFileSync(jobMetadataPath, JSON.stringify(job, null, 2));\n\n  // Update jobs index\n  const jobsIndex = loadJobsIndex();\n  if (jobsIndex[jobId]) {\n    jobsIndex[jobId].status = status;\n    jobsIndex[jobId].updatedAt = job.updatedAt;\n    saveJobsIndex(jobsIndex);\n  }\n\n  return job;\n};\n\nconst listJobs = (limit: number = 50): JobsIndex => {\n  const jobsIndex = loadJobsIndex();\n  const sortedJobs = Object.values(jobsIndex)\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, limit);\n\n  const result: JobsIndex = {};\n  sortedJobs.forEach(job => {\n    result[job.id] = job;\n  });\n\n  return result;\n};\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  // Check authentication first\n  if (!(await hasValidSession(req))) {\n    return res.status(401).json({ \n      error: 'Unauthorized',\n      message: 'Authentication required. Please log in to continue.' \n    });\n  }\n  try {\n    switch (req.method) {\n      case 'POST':\n        // Create new job\n        const { fileCount } = req.body;\n        \n        if (!fileCount || typeof fileCount !== 'number' || fileCount <= 0) {\n          return res.status(400).json({ error: 'Valid file count is required' });\n        }\n\n        if (fileCount > 500) {\n          return res.status(400).json({ error: 'Maximum 500 files allowed per job' });\n        }\n\n        const newJob = createJob(fileCount);\n        res.status(201).json(newJob);\n        break;\n\n      case 'GET':\n        const { jobId } = req.query;\n        \n        if (jobId && typeof jobId === 'string') {\n          // Validate jobId format before processing\n          if (!isValidJobId(jobId)) {\n            return res.status(400).json({ \n              error: 'Invalid job ID format. Only alphanumeric characters, underscores, and hyphens are allowed.' \n            });\n          }\n          \n          // Get specific job\n          const job = getJob(jobId);\n          if (!job) {\n            return res.status(404).json({ error: 'Job not found' });\n          }\n          res.status(200).json(job);\n        } else {\n          // List all jobs\n          const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n          const jobs = listJobs(limit);\n          res.status(200).json(jobs);\n        }\n        break;\n\n      case 'PUT':\n        // Update job status\n        const { jobId: updateJobId } = req.query;\n        const { status } = req.body;\n        \n        if (!updateJobId || typeof updateJobId !== 'string') {\n          return res.status(400).json({ error: 'Job ID is required' });\n        }\n        \n        // Validate jobId format before processing\n        if (!isValidJobId(updateJobId)) {\n          return res.status(400).json({ \n            error: 'Invalid job ID format. Only alphanumeric characters, underscores, and hyphens are allowed.' \n          });\n        }\n\n        if (!status || !['created', 'uploading', 'processing', 'completed', 'error'].includes(status)) {\n          return res.status(400).json({ error: 'Valid status is required' });\n        }\n\n        const updatedJob = updateJobStatus(updateJobId, status);\n        if (!updatedJob) {\n          return res.status(404).json({ error: 'Job not found' });\n        }\n\n        res.status(200).json(updatedJob);\n        break;\n\n      default:\n        res.status(405).json({ error: 'Method not allowed' });\n    }\n  } catch (error) {\n    console.error('Jobs API error:', error);\n    res.status(500).json({ \n      error: 'Internal server error', \n      details: error instanceof Error ? error.message : 'Unknown error' \n    });\n  }\n}","size_bytes":6953},"pages/api/upload.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { IncomingForm, File } from 'formidable';\nimport fs from 'fs/promises';\nimport fsSync from 'fs';\nimport path from 'path';\nimport { createReadStream } from 'fs';\nimport { hasValidSession } from '../../lib/nextAuth';\nimport { isValidJobId, getSecureJobPath, getSecureFilePath, sanitizeFilename, getUploadsDir } from '../../lib/pathValidation';\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n\nconst allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/tiff'];\nconst maxFileSize = 20 * 1024 * 1024; // 20MB\nconst uploadsDir = getUploadsDir();\nconst jobsIndexPath = path.join(uploadsDir, 'jobs-index.json');\n\n// File signatures for validation (magic numbers)\nconst fileSignatures = {\n  'image/jpeg': [0xFF, 0xD8, 0xFF],\n  'image/jpg': [0xFF, 0xD8, 0xFF],\n  'image/png': [0x89, 0x50, 0x4E, 0x47],\n  'image/tiff': [0x49, 0x49, 0x2A, 0x00], // Little endian TIFF\n};\n\n// Rate limiting storage (in production, use Redis or database)\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\nconst RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute\nconst RATE_LIMIT_MAX_REQUESTS = 50; // Max requests per window\n\n// Ensure uploads directory exists\nif (!fsSync.existsSync(uploadsDir)) {\n  fsSync.mkdirSync(uploadsDir, { recursive: true });\n}\n\n// Rate limiting function\nconst checkRateLimit = (clientIp: string): boolean => {\n  const now = Date.now();\n  const clientData = rateLimitStore.get(clientIp);\n  \n  if (!clientData || now > clientData.resetTime) {\n    rateLimitStore.set(clientIp, { count: 1, resetTime: now + RATE_LIMIT_WINDOW });\n    return true;\n  }\n  \n  if (clientData.count >= RATE_LIMIT_MAX_REQUESTS) {\n    return false;\n  }\n  \n  clientData.count++;\n  return true;\n};\n\n// Enhanced file validation with signature verification\nconst validateFileSignature = async (filePath: string, mimeType: string): Promise<boolean> => {\n  try {\n    const expectedSignature = fileSignatures[mimeType as keyof typeof fileSignatures];\n    if (!expectedSignature) return false;\n    \n    const buffer = Buffer.alloc(expectedSignature.length);\n    const fd = await fs.open(filePath, 'r');\n    await fd.read(buffer, 0, expectedSignature.length, 0);\n    await fd.close();\n    \n    return expectedSignature.every((byte, index) => buffer[index] === byte);\n  } catch (error) {\n    console.error('File signature validation error:', error);\n    return false;\n  }\n};\n\n// Load and save jobs index functions\nconst loadJobsIndex = async () => {\n  try {\n    if (fsSync.existsSync(jobsIndexPath)) {\n      const data = await fs.readFile(jobsIndexPath, 'utf8');\n      return JSON.parse(data);\n    }\n  } catch (error) {\n    console.error('Error loading jobs index:', error);\n  }\n  return {};\n};\n\nconst saveJobsIndex = async (index: any) => {\n  try {\n    await fs.writeFile(jobsIndexPath, JSON.stringify(index, null, 2));\n  } catch (error) {\n    console.error('Error saving jobs index:', error);\n  }\n};\n\n// Update job status in both metadata and jobs index\nconst updateJobStatus = async (jobId: string, status: string, metadata?: any) => {\n  // Validate jobId and get secure path\n  if (!isValidJobId(jobId)) {\n    throw new Error('Invalid job ID format');\n  }\n  const jobDir = getSecureJobPath(jobId);\n  const jobMetadataPath = path.join(jobDir, 'metadata.json');\n  \n  try {\n    // Update job metadata\n    let jobMetadata = metadata;\n    if (!jobMetadata && fsSync.existsSync(jobMetadataPath)) {\n      const data = await fs.readFile(jobMetadataPath, 'utf8');\n      jobMetadata = JSON.parse(data);\n    }\n    \n    if (jobMetadata) {\n      jobMetadata.status = status;\n      jobMetadata.updatedAt = new Date().toISOString();\n      await fs.writeFile(jobMetadataPath, JSON.stringify(jobMetadata, null, 2));\n      \n      // Update jobs index\n      const jobsIndex = await loadJobsIndex();\n      if (jobsIndex[jobId]) {\n        jobsIndex[jobId].status = status;\n        jobsIndex[jobId].updatedAt = jobMetadata.updatedAt;\n        await saveJobsIndex(jobsIndex);\n      }\n    }\n  } catch (error) {\n    console.error('Error updating job status:', error);\n  }\n};\n\nconst validateFile = async (file: File): Promise<string | null> => {\n  if (!file.mimetype || !allowedTypes.includes(file.mimetype)) {\n    return 'Only JPG, JPEG, PNG, and TIFF files are allowed';\n  }\n  if (file.size > maxFileSize) {\n    return 'File size must be less than 20MB';\n  }\n  if (!file.originalFilename) {\n    return 'Invalid file name';\n  }\n  \n  // Validate file signature to prevent spoofed MIME types\n  const isValidSignature = await validateFileSignature(file.filepath, file.mimetype);\n  if (!isValidSignature) {\n    return 'Invalid file format or corrupted file';\n  }\n  \n  return null;\n};\n\nconst generateUniqueFilename = (originalName: string): string => {\n  const sanitized = sanitizeFilename(originalName);\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substr(2, 9);\n  const extension = path.extname(sanitized);\n  const baseName = path.basename(sanitized, extension);\n  return `${baseName}_${timestamp}_${random}${extension}`;\n};\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  // Check authentication first\n  if (!(await hasValidSession(req))) {\n    return res.status(401).json({ \n      error: 'Unauthorized',\n      message: 'Authentication required. Please log in to continue.' \n    });\n  }\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  \n  // Rate limiting\n  const clientIp = req.headers['x-forwarded-for'] as string || req.socket.remoteAddress || 'unknown';\n  if (!checkRateLimit(clientIp)) {\n    return res.status(429).json({ error: 'Rate limit exceeded. Please try again later.' });\n  }\n\n  const form = new IncomingForm({\n    uploadDir: uploadsDir,\n    keepExtensions: true,\n    maxFileSize: maxFileSize,\n    maxFiles: 1, // Handle one file at a time\n  });\n\n  try {\n    const [fields, files] = await form.parse(req);\n    \n    const jobId = Array.isArray(fields.jobId) ? fields.jobId[0] : fields.jobId;\n    if (!jobId) {\n      return res.status(400).json({ error: 'Job ID is required' });\n    }\n    \n    // Validate jobId format to prevent path traversal\n    if (!isValidJobId(jobId)) {\n      return res.status(400).json({ \n        error: 'Invalid job ID format. Only alphanumeric characters, underscores, and hyphens are allowed.' \n      });\n    }\n\n    const uploadedFile = Array.isArray(files.file) ? files.file[0] : files.file;\n    if (!uploadedFile) {\n      return res.status(400).json({ error: 'No file uploaded' });\n    }\n\n    // Validate file with enhanced security\n    const validationError = await validateFile(uploadedFile);\n    if (validationError) {\n      // Clean up the uploaded file\n      if (fsSync.existsSync(uploadedFile.filepath)) {\n        await fs.unlink(uploadedFile.filepath);\n      }\n      return res.status(400).json({ error: validationError });\n    }\n\n    // Create secure job directory if it doesn't exist\n    const jobDir = getSecureJobPath(jobId);\n    if (!fsSync.existsSync(jobDir)) {\n      await fs.mkdir(jobDir, { recursive: true });\n    }\n\n    // Generate unique filename and create secure file path\n    const uniqueFilename = generateUniqueFilename(uploadedFile.originalFilename || 'unknown');\n    const finalPath = getSecureFilePath(jobId, uniqueFilename);\n    \n    // Move file to final location\n    await fs.rename(uploadedFile.filepath, finalPath);\n\n    // Update job metadata with secure path\n    const jobMetadataPath = path.join(jobDir, 'metadata.json');\n    let jobMetadata = {\n      id: jobId,\n      status: 'uploading',\n      fileCount: 0,\n      processedCount: 0,\n      uploadedFiles: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n\n    if (fsSync.existsSync(jobMetadataPath)) {\n      const existingData = await fs.readFile(jobMetadataPath, 'utf8');\n      jobMetadata = { ...JSON.parse(existingData), updatedAt: new Date().toISOString() };\n    }\n\n    // Add uploaded file to metadata\n    jobMetadata.uploadedFiles.push({\n      filename: uniqueFilename,\n      originalName: uploadedFile.originalFilename,\n      size: uploadedFile.size,\n      mimetype: uploadedFile.mimetype,\n      uploadedAt: new Date().toISOString()\n    });\n\n    // Update status to 'uploading' if this is the first file\n    if (jobMetadata.uploadedFiles.length === 1) {\n      await updateJobStatus(jobId, 'uploading', jobMetadata);\n    }\n    \n    // Check if all files have been uploaded\n    const allFilesUploaded = jobMetadata.uploadedFiles.length >= jobMetadata.fileCount;\n    \n    if (allFilesUploaded) {\n      // Transition to processing status\n      await updateJobStatus(jobId, 'processing', jobMetadata);\n    } else {\n      // Just update the metadata file\n      await fs.writeFile(jobMetadataPath, JSON.stringify(jobMetadata, null, 2));\n    }\n\n    res.status(200).json({\n      success: true,\n      jobId,\n      filename: uniqueFilename,\n      originalName: uploadedFile.originalFilename,\n      size: uploadedFile.size,\n      uploadedFiles: jobMetadata.uploadedFiles.length,\n      totalFiles: jobMetadata.fileCount,\n      status: jobMetadata.status,\n      allFilesUploaded: jobMetadata.uploadedFiles.length >= jobMetadata.fileCount\n    });\n\n  } catch (error) {\n    console.error('Upload error:', error);\n    \n    if (error.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({ error: 'File too large. Maximum size is 20MB.' });\n    }\n    \n    // Handle path traversal security errors specifically\n    if (error instanceof Error && (error.message.includes('Invalid job ID') || error.message.includes('Path traversal'))) {\n      return res.status(400).json({ error: 'Security validation failed: Invalid job ID or filename' });\n    }\n    \n    res.status(500).json({ \n      error: 'Upload failed', \n      details: error instanceof Error ? error.message : 'Unknown error' \n    });\n  }\n}","size_bytes":9932},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  dialect: \"postgresql\",\n  schema: \"./shared/schema.ts\",\n  out: \"./drizzle\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n  verbose: true,\n  strict: true,\n});","size_bytes":248},"hooks/useAuth.ts":{"content":"// React authentication hook for ComplianceDrone\n// Based on Replit Auth integration\n\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useRouter } from \"next/router\";\n\nexport interface AuthUser {\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  pilotProfile?: {\n    id: string;\n    status: 'pending' | 'approved' | 'active' | 'inactive' | 'suspended';\n    companyName?: string;\n    phoneNumber?: string;\n    part107Certified: boolean;\n    completedJobs: number;\n    averageRating?: number;\n  };\n}\n\n// Custom fetch function with error handling\nconst fetchUser = async (): Promise<AuthUser | null> => {\n  const response = await fetch('/api/auth/user');\n  \n  if (response.status === 401) {\n    return null; // User not authenticated\n  }\n  \n  if (!response.ok) {\n    throw new Error(`Failed to fetch user: ${response.statusText}`);\n  }\n  \n  return response.json();\n};\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: fetchUser,\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const login = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const logout = () => {\n    // Clear the user query cache\n    queryClient.setQueryData([\"/api/auth/user\"], null);\n    // Redirect to logout endpoint\n    window.location.href = \"/api/logout\";\n  };\n\n  const refreshUser = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    isPilot: !!user?.pilotProfile,\n    pilotStatus: user?.pilotProfile?.status || null,\n    login,\n    logout,\n    refreshUser,\n    error\n  };\n}","size_bytes":1781},"lib/authUtils.ts":{"content":"// Authentication utilities for error handling and validation\n// Based on Replit Auth integration\n\nexport function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message) || \n         error.message.includes('Unauthorized') ||\n         (error as any)?.status === 401;\n}\n\n// Toast notification helper for unauthorized errors\nexport function handleUnauthorizedError(error: Error, showToast?: (message: { title: string; description: string; variant: string }) => void) {\n  if (isUnauthorizedError(error)) {\n    if (showToast) {\n      showToast({\n        title: \"Session Expired\",\n        description: \"Please log in again to continue.\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    \n    return true;\n  }\n  \n  return false;\n}\n\n// Form validation utilities\nexport const validateEmail = (email: string): string | null => {\n  if (!email) return \"Email is required\";\n  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) return \"Please enter a valid email address\";\n  return null;\n};\n\nexport const validatePhone = (phone: string): string | null => {\n  if (!phone) return \"Phone number is required\";\n  if (!/^\\+?[\\d\\s\\-\\(\\)\\.]{10,}$/.test(phone)) return \"Please enter a valid phone number\";\n  return null;\n};\n\nexport const validatePart107 = (number: string): string | null => {\n  if (!number) return \"Part 107 certificate number is required\";\n  if (!/^\\d{8,12}$/.test(number.replace(/\\D/g, ''))) return \"Please enter a valid Part 107 certificate number\";\n  return null;\n};\n\n// Status helpers\nexport const getPilotStatusColor = (status: string) => {\n  switch (status) {\n    case 'approved':\n    case 'active':\n      return 'text-green-600 bg-green-100';\n    case 'pending':\n      return 'text-yellow-600 bg-yellow-100';\n    case 'inactive':\n      return 'text-gray-600 bg-gray-100';\n    case 'suspended':\n      return 'text-red-600 bg-red-100';\n    default:\n      return 'text-gray-600 bg-gray-100';\n  }\n};\n\nexport const getPilotStatusText = (status: string) => {\n  switch (status) {\n    case 'pending':\n      return 'Application Pending';\n    case 'approved':\n      return 'Approved';\n    case 'active':\n      return 'Active';\n    case 'inactive':\n      return 'Inactive';\n    case 'suspended':\n      return 'Suspended';\n    default:\n      return 'Unknown';\n  }\n};","size_bytes":2381},"pages/profile.tsx":{"content":"// ComplianceDrone Pilot Profile Page\n// Displays pilot information, status, and performance metrics\n\nimport type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { getPilotStatusColor, getPilotStatusText } from \"../lib/authUtils\";\n\ninterface PilotProfile {\n  id: string;\n  userId: string;\n  companyName?: string;\n  businessType: string;\n  phoneNumber?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  part107Certified: boolean;\n  part107Number?: string;\n  licenseExpiryDate?: string;\n  thermalExperienceYears?: number;\n  totalFlightHours?: number;\n  droneModels?: string[];\n  thermalCameraModels?: string[];\n  hasInsurance: boolean;\n  insuranceProvider?: string;\n  insurancePolicyNumber?: string;\n  insuranceExpiryDate?: string;\n  liabilityCoverage?: number;\n  serviceStates?: string[];\n  maxTravelDistance?: number;\n  status: 'pending' | 'approved' | 'active' | 'inactive' | 'suspended';\n  completedJobs: number;\n  averageRating?: number;\n  totalEarnings: number;\n  applicationNotes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst Profile: NextPage = () => {\n  const { user, isLoading, isAuthenticated, isPilot, logout } = useAuth();\n  const [profile, setProfile] = useState<PilotProfile | null>(null);\n  const [profileLoading, setProfileLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      window.location.href = \"/api/login\";\n    }\n  }, [isAuthenticated, isLoading]);\n\n  // Load pilot profile\n  useEffect(() => {\n    const loadProfile = async () => {\n      if (!isAuthenticated || !isPilot) return;\n\n      try {\n        const response = await fetch('/api/auth/pilot-profile');\n        if (response.ok) {\n          const profileData = await response.json();\n          setProfile(profileData);\n        } else if (response.status === 404) {\n          // No pilot profile found - this is OK, user can register\n          setProfile(null);\n        } else {\n          setError('Failed to load profile');\n        }\n      } catch (err) {\n        setError('Network error loading profile');\n      } finally {\n        setProfileLoading(false);\n      }\n    };\n\n    loadProfile();\n  }, [isAuthenticated, isPilot]);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatCurrency = (cents: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(cents / 100);\n  };\n\n  const getStatusMessage = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return {\n          message: 'Your application is under review. We\\'ll notify you once it\\'s approved.',\n          action: null\n        };\n      case 'approved':\n        return {\n          message: 'Your application has been approved! You can now accept thermal inspection jobs.',\n          action: { text: 'Browse Jobs', href: '/dashboard' }\n        };\n      case 'active':\n        return {\n          message: 'You\\'re an active pilot. Keep up the great work!',\n          action: { text: 'View Jobs', href: '/dashboard' }\n        };\n      case 'inactive':\n        return {\n          message: 'Your account is currently inactive. Contact support to reactivate.',\n          action: { text: 'Contact Support', href: '#contact' }\n        };\n      case 'suspended':\n        return {\n          message: 'Your account has been suspended. Please contact support for assistance.',\n          action: { text: 'Contact Support', href: '#contact' }\n        };\n      default:\n        return {\n          message: 'Status unknown',\n          action: null\n        };\n    }\n  };\n\n  if (isLoading || profileLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Pilot Profile - ComplianceDrone</title>\n        <meta name=\"description\" content=\"Your ComplianceDrone pilot profile and dashboard\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      {/* Header */}\n      <header className=\"gradient-bg text-white\">\n        <div className=\"cd-container\">\n          <nav className=\"flex items-center justify-between py-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Image \n                src=\"/logo.png\" \n                alt=\"ComplianceDrone Logo\" \n                width={50} \n                height={50}\n                priority\n                className=\"rounded-lg\"\n              />\n              <h1 className=\"text-2xl font-bold\">ComplianceDrone</h1>\n            </div>\n            <div className=\"flex items-center space-x-6\">\n              <Link href=\"/dashboard\" className=\"hover:text-gray-200 transition-colors\">\n                Dashboard\n              </Link>\n              <Link href=\"/upload\" className=\"hover:text-gray-200 transition-colors\">\n                Upload\n              </Link>\n              <div className=\"flex items-center space-x-3\">\n                {user?.profileImageUrl && (\n                  <Image\n                    src={user.profileImageUrl}\n                    alt=\"Profile\"\n                    width={32}\n                    height={32}\n                    className=\"rounded-full\"\n                    style={{ objectFit: 'cover' }}\n                  />\n                )}\n                <span className=\"text-sm\">\n                  {user?.firstName ? `${user.firstName} ${user.lastName}` : user?.email}\n                </span>\n                <button\n                  onClick={logout}\n                  className=\"text-sm hover:text-gray-200 transition-colors\"\n                >\n                  Logout\n                </button>\n              </div>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"cd-container\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Pilot Profile</h2>\n            <p className=\"text-gray-600\">Manage your professional thermal inspection pilot account</p>\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n              <p className=\"text-red-600\">{error}</p>\n            </div>\n          )}\n\n          {!isPilot && !profile ? (\n            <div className=\"card text-center\">\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <svg className=\"w-8 h-8 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-1a.5.5 0 01.5.5v1a.5.5 0 01-.5.5\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Welcome to ComplianceDrone!</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  You're not yet registered as a pilot. Complete your application to start earning with thermal inspections.\n                </p>\n                <Link href=\"/register\" className=\"btn-primary text-lg px-8 py-4\">\n                  Become a Pilot\n                </Link>\n              </div>\n            </div>\n          ) : profile ? (\n            <div className=\"space-y-6\">\n              {/* Status Card */}\n              <div className=\"card\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-2xl font-bold text-gray-900\">Account Status</h3>\n                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getPilotStatusColor(profile.status)}`}>\n                    {getPilotStatusText(profile.status)}\n                  </span>\n                </div>\n                \n                {(() => {\n                  const statusInfo = getStatusMessage(profile.status);\n                  return (\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <p className=\"text-blue-800 mb-3\">{statusInfo.message}</p>\n                      {statusInfo.action && (\n                        <Link href={statusInfo.action.href} className=\"btn-secondary\">\n                          {statusInfo.action.text}\n                        </Link>\n                      )}\n                    </div>\n                  );\n                })()}\n              </div>\n\n              {/* Performance Metrics */}\n              <div className=\"cd-grid cd-grid-3 gap-6\">\n                <div className=\"card text-center\">\n                  <h4 className=\"text-3xl font-bold text-gradient\">{profile.completedJobs}</h4>\n                  <p className=\"text-gray-600\">Jobs Completed</p>\n                </div>\n                <div className=\"card text-center\">\n                  <h4 className=\"text-3xl font-bold text-gradient\">\n                    {profile.averageRating ? `${profile.averageRating}.0` : 'N/A'}\n                  </h4>\n                  <p className=\"text-gray-600\">Average Rating</p>\n                </div>\n                <div className=\"card text-center\">\n                  <h4 className=\"text-3xl font-bold text-gradient\">\n                    {formatCurrency(profile.totalEarnings)}\n                  </h4>\n                  <p className=\"text-gray-600\">Total Earnings</p>\n                </div>\n              </div>\n\n              {/* Profile Information */}\n              <div className=\"cd-grid cd-grid-2 gap-6\">\n                {/* Business Info */}\n                <div className=\"card\">\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-4 border-b pb-2\">Business Information</h3>\n                  <div className=\"space-y-3\">\n                    {profile.companyName && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Company</label>\n                        <p className=\"text-gray-900\">{profile.companyName}</p>\n                      </div>\n                    )}\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Business Type</label>\n                      <p className=\"text-gray-900 capitalize\">{profile.businessType}</p>\n                    </div>\n                    {profile.address && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Location</label>\n                        <p className=\"text-gray-900\">\n                          {profile.city}, {profile.state} {profile.zipCode}\n                        </p>\n                      </div>\n                    )}\n                    {profile.phoneNumber && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Phone</label>\n                        <p className=\"text-gray-900\">{profile.phoneNumber}</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Qualifications */}\n                <div className=\"card\">\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-4 border-b pb-2\">Qualifications</h3>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">Part 107 Certified</label>\n                      <p className=\"text-gray-900\">\n                        {profile.part107Certified ? (\n                          <span className=\"flex items-center space-x-2\">\n                            <span className=\"text-green-600\">✓ Yes</span>\n                            {profile.part107Number && (\n                              <span className=\"text-sm text-gray-500\">#{profile.part107Number}</span>\n                            )}\n                          </span>\n                        ) : (\n                          <span className=\"text-red-600\">✗ No</span>\n                        )}\n                      </p>\n                    </div>\n                    {profile.thermalExperienceYears !== undefined && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Thermal Experience</label>\n                        <p className=\"text-gray-900\">{profile.thermalExperienceYears} years</p>\n                      </div>\n                    )}\n                    {profile.totalFlightHours !== undefined && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Flight Hours</label>\n                        <p className=\"text-gray-900\">{profile.totalFlightHours} hours</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Equipment */}\n                <div className=\"card\">\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-4 border-b pb-2\">Equipment</h3>\n                  <div className=\"space-y-3\">\n                    {profile.droneModels && profile.droneModels.length > 0 && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Drone Models</label>\n                        <ul className=\"text-gray-900 text-sm\">\n                          {profile.droneModels.map((model, index) => (\n                            <li key={index}>• {model}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    {profile.thermalCameraModels && profile.thermalCameraModels.length > 0 && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Thermal Cameras</label>\n                        <ul className=\"text-gray-900 text-sm\">\n                          {profile.thermalCameraModels.map((camera, index) => (\n                            <li key={index}>• {camera}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Service Area */}\n                <div className=\"card\">\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-4 border-b pb-2\">Service Coverage</h3>\n                  <div className=\"space-y-3\">\n                    {profile.serviceStates && profile.serviceStates.length > 0 && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Service States</label>\n                        <p className=\"text-gray-900\">{profile.serviceStates.join(', ')}</p>\n                      </div>\n                    )}\n                    {profile.maxTravelDistance && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Max Travel Distance</label>\n                        <p className=\"text-gray-900\">{profile.maxTravelDistance} miles</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Insurance Information */}\n              {profile.hasInsurance && (\n                <div className=\"card\">\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-4 border-b pb-2\">Insurance Coverage</h3>\n                  <div className=\"cd-grid cd-grid-2 gap-6\">\n                    {profile.insuranceProvider && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Provider</label>\n                        <p className=\"text-gray-900\">{profile.insuranceProvider}</p>\n                      </div>\n                    )}\n                    {profile.liabilityCoverage && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Liability Coverage</label>\n                        <p className=\"text-gray-900\">{formatCurrency(profile.liabilityCoverage * 100)}</p>\n                      </div>\n                    )}\n                    {profile.insuranceExpiryDate && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-500\">Expiry Date</label>\n                        <p className=\"text-gray-900\">{formatDate(profile.insuranceExpiryDate)}</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {/* Account Actions */}\n              <div className=\"text-center\">\n                <Link href=\"/dashboard\" className=\"btn-primary mr-4\">\n                  View Dashboard\n                </Link>\n                <Link href=\"/upload\" className=\"btn-secondary\">\n                  Upload Images\n                </Link>\n              </div>\n            </div>\n          ) : (\n            <div className=\"card text-center\">\n              <p className=\"text-gray-600\">Loading profile information...</p>\n            </div>\n          )}\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Profile;","size_bytes":17604},"pages/register.tsx":{"content":"// ComplianceDrone Pilot Registration Page\n// Professional registration form with comprehensive screening\n\nimport type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { validateEmail, validatePhone, validatePart107 } from \"../lib/authUtils\";\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  OutlinedInput,\n  Box,\n  TextField,\n  Checkbox,\n  FormControlLabel,\n  Typography\n} from '@mui/material';\nimport { SelectChangeEvent } from '@mui/material/Select';\n\ninterface RegistrationForm {\n  // Business Information\n  companyName: string;\n  businessType: 'individual' | 'llc' | 'corporation' | 'partnership';\n  taxId: string;\n  \n  // Contact Information\n  phoneNumber: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  \n  // Pilot Qualifications\n  part107Certified: boolean;\n  part107Number: string;\n  licenseExpiryDate: string;\n  thermalExperienceYears: number;\n  totalFlightHours: number;\n  \n  // Equipment\n  droneModels: string[];\n  thermalCameraModels: string[];\n  additionalEquipment: string[];\n  \n  // Insurance\n  hasInsurance: boolean;\n  insuranceProvider: string;\n  insurancePolicyNumber: string;\n  insuranceExpiryDate: string;\n  liabilityCoverage: number;\n  \n  // Service Area\n  serviceAreaType: 'local' | 'nationwide';\n  serviceRadius: number;\n  isNationwide: boolean;\n  \n  // Application Notes\n  applicationNotes: string;\n}\n\nconst initialForm: RegistrationForm = {\n  companyName: '',\n  businessType: 'individual',\n  taxId: '',\n  phoneNumber: '',\n  address: '',\n  city: '',\n  state: '',\n  zipCode: '',\n  part107Certified: false,\n  part107Number: '',\n  licenseExpiryDate: '',\n  thermalExperienceYears: 0,\n  totalFlightHours: 0,\n  droneModels: [],\n  thermalCameraModels: [],\n  additionalEquipment: [],\n  hasInsurance: false,\n  insuranceProvider: '',\n  insurancePolicyNumber: '',\n  insuranceExpiryDate: '',\n  liabilityCoverage: 0,\n  serviceAreaType: 'local',\n  serviceRadius: 50,\n  isNationwide: false,\n  applicationNotes: ''\n};\n\nconst US_STATES = [\n  'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS',\n  'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY',\n  'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'\n];\n\nconst DRONE_MODELS = [\n  'DJI Mavic 3 Enterprise',\n  'DJI Mavic 3 Enterprise Thermal',\n  'DJI Matrice 300 RTK',\n  'DJI Matrice 30T',\n  'DJI Air 3',\n  'Autel EVO Max 4T',\n  'FLIR Vue TZ20',\n  'Skydio X2',\n  'Other'\n];\n\nconst THERMAL_CAMERAS = [\n  'DJI Zenmuse H30',\n  'DJI Zenmuse H20T',\n  'DJI Zenmuse H20 Series',\n  'DJI Zenmuse XT2',\n  'FLIR Vue Pro R',\n  'FLIR Duo Pro R',\n  'FLIR XT2',\n  'Teledyne FLIR Boson',\n  'Workswell WIRIS Pro',\n  'Other'\n];\n\nconst ADDITIONAL_INVENTORY = [\n  'RTK Base Station',\n  'Extra Batteries',\n  'Multi-battery Charging Hub',\n  'Rugged Carrying Case',\n  'iPad/Tablet Controller',\n  'Backup Controller',\n  'Memory Cards',\n  'Calibration Equipment',\n  'Other'\n];\n\nconst TRAVEL_RADIUS_OPTIONS = [\n  { value: 25, label: '25 miles' },\n  { value: 50, label: '50 miles' },\n  { value: 100, label: '100 miles' },\n  { value: 150, label: '150 miles' },\n  { value: 200, label: '200 miles' },\n  { value: 250, label: '250 miles' },\n  { value: 300, label: '300 miles' },\n];\n\nconst Register: NextPage = () => {\n  const { user, isLoading, isAuthenticated, isPilot } = useAuth();\n  const [formData, setFormData] = useState<RegistrationForm>(initialForm);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      window.location.href = \"/api/login\";\n    }\n  }, [isAuthenticated, isLoading]);\n\n  // Redirect if already a pilot\n  useEffect(() => {\n    if (isPilot) {\n      window.location.href = \"/profile\";\n    }\n  }, [isPilot]);\n\n  const validateForm = (): Record<string, string> => {\n    const newErrors: Record<string, string> = {};\n\n    // Contact validation\n    const phoneError = validatePhone(formData.phoneNumber);\n    if (phoneError) newErrors.phoneNumber = phoneError;\n\n    if (!formData.address) newErrors.address = \"Address is required\";\n    if (!formData.city) newErrors.city = \"City is required\";\n    if (!formData.state) newErrors.state = \"State is required\";\n    if (!formData.zipCode) newErrors.zipCode = \"ZIP code is required\";\n\n    // Pilot qualifications\n    if (formData.part107Certified) {\n      const part107Error = validatePart107(formData.part107Number);\n      if (part107Error) newErrors.part107Number = part107Error;\n      \n      if (!formData.licenseExpiryDate) {\n        newErrors.licenseExpiryDate = \"License expiry date is required\";\n      }\n    }\n\n    if (formData.thermalExperienceYears < 0) {\n      newErrors.thermalExperienceYears = \"Experience years cannot be negative\";\n    }\n\n    if (formData.totalFlightHours < 0) {\n      newErrors.totalFlightHours = \"Flight hours cannot be negative\";\n    }\n\n    // Equipment\n    if (formData.droneModels.length === 0) {\n      newErrors.droneModels = \"Please select at least one drone model\";\n    }\n\n    if (formData.thermalCameraModels.length === 0) {\n      newErrors.thermalCameraModels = \"Please select at least one thermal camera\";\n    }\n\n    // Insurance\n    if (formData.hasInsurance) {\n      if (!formData.insuranceProvider) newErrors.insuranceProvider = \"Insurance provider is required\";\n      if (!formData.insurancePolicyNumber) newErrors.insurancePolicyNumber = \"Policy number is required\";\n      if (!formData.insuranceExpiryDate) newErrors.insuranceExpiryDate = \"Insurance expiry date is required\";\n      if (formData.liabilityCoverage <= 0) newErrors.liabilityCoverage = \"Liability coverage amount is required\";\n    }\n\n    // Service area\n    if (!formData.isNationwide && formData.serviceRadius <= 0) {\n      newErrors.serviceRadius = \"Service radius is required for local service\";\n    }\n\n    return newErrors;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setErrors({});\n\n    const formErrors = validateForm();\n    if (Object.keys(formErrors).length > 0) {\n      setErrors(formErrors);\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/register-pilot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        setSubmitSuccess(true);\n        setTimeout(() => {\n          window.location.href = \"/profile\";\n        }, 2000);\n      } else {\n        const errorData = await response.json();\n        setErrors({ submit: errorData.message || 'Registration failed' });\n      }\n    } catch (error) {\n      setErrors({ submit: 'Network error. Please try again.' });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleMultiSelect = (field: keyof Pick<RegistrationForm, 'droneModels' | 'thermalCameraModels' | 'additionalEquipment'>, value: string[]) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleServiceAreaChange = (isNationwide: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      isNationwide,\n      serviceAreaType: isNationwide ? 'nationwide' : 'local'\n    }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (submitSuccess) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Application Submitted!</h2>\n          <p className=\"text-gray-600 mb-4\">Thank you for applying to become a ComplianceDrone pilot.</p>\n          <p className=\"text-sm text-gray-500\">Redirecting to your profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Become a Pilot - ComplianceDrone</title>\n        <meta name=\"description\" content=\"Apply to become a certified thermal inspection pilot with ComplianceDrone\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      {/* Header */}\n      <header className=\"gradient-bg text-white\">\n        <div className=\"cd-container\">\n          <nav className=\"flex items-center justify-between py-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Image \n                src=\"/logo.png\" \n                alt=\"ComplianceDrone Logo\" \n                width={50} \n                height={50}\n                priority\n                className=\"rounded-lg\"\n              />\n              <h1 className=\"text-2xl font-bold\">ComplianceDrone</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm\">Welcome, {user?.firstName || user?.email}</span>\n              <Link href=\"/dashboard\" className=\"hover:text-gray-200 transition-colors\">\n                Dashboard\n              </Link>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"min-h-screen bg-gray-50 py-12\">\n        <div className=\"cd-container max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-4xl font-bold text-gradient mb-4\">\n              Become a Certified Pilot\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Join our network of professional thermal inspection pilots\n            </p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"card\">\n            {errors.submit && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n                <p className=\"text-red-600\">{errors.submit}</p>\n              </div>\n            )}\n\n            {/* Business Information */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Business Information\n              </h3>\n              <div className=\"cd-grid cd-grid-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">\n                    Company Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-input\"\n                    value={formData.companyName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, companyName: e.target.value }))}\n                    placeholder=\"Your business name\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Business Type *\n                  </label>\n                  <select\n                    className=\"form-input\"\n                    value={formData.businessType}\n                    onChange={(e) => setFormData(prev => ({ ...prev, businessType: e.target.value as any }))}\n                    required\n                  >\n                    <option value=\"individual\">Individual</option>\n                    <option value=\"llc\">LLC</option>\n                    <option value=\"corporation\">Corporation</option>\n                    <option value=\"partnership\">Partnership</option>\n                  </select>\n                </div>\n\n                <div className=\"cd-grid-span-2\">\n                  <label className=\"form-label\">\n                    Tax ID (Optional)\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-input\"\n                    value={formData.taxId}\n                    onChange={(e) => setFormData(prev => ({ ...prev, taxId: e.target.value }))}\n                    placeholder=\"Federal Tax ID or SSN\"\n                  />\n                </div>\n              </div>\n            </section>\n\n            {/* Contact Information */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Contact Information\n              </h3>\n              <div className=\"cd-grid cd-grid-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">\n                    Phone Number *\n                  </label>\n                  <input\n                    type=\"tel\"\n                    className={`form-input ${errors.phoneNumber ? 'border-red-300' : ''}`}\n                    value={formData.phoneNumber}\n                    onChange={(e) => setFormData(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                    placeholder=\"(555) 123-4567\"\n                    required\n                  />\n                  {errors.phoneNumber && <p className=\"form-error\">{errors.phoneNumber}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    State *\n                  </label>\n                  <select\n                    className={`form-input ${errors.state ? 'border-red-300' : ''}`}\n                    value={formData.state}\n                    onChange={(e) => setFormData(prev => ({ ...prev, state: e.target.value }))}\n                    required\n                  >\n                    <option value=\"\">Select State</option>\n                    {US_STATES.map(state => (\n                      <option key={state} value={state}>{state}</option>\n                    ))}\n                  </select>\n                  {errors.state && <p className=\"form-error\">{errors.state}</p>}\n                </div>\n\n                <div className=\"cd-grid-span-2\">\n                  <label className=\"form-label\">\n                    Address *\n                  </label>\n                  <input\n                    type=\"text\"\n                    className={`form-input ${errors.address ? 'border-red-300' : ''}`}\n                    value={formData.address}\n                    onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                    placeholder=\"Street address\"\n                    required\n                  />\n                  {errors.address && <p className=\"form-error\">{errors.address}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    City *\n                  </label>\n                  <input\n                    type=\"text\"\n                    className={`form-input ${errors.city ? 'border-red-300' : ''}`}\n                    value={formData.city}\n                    onChange={(e) => setFormData(prev => ({ ...prev, city: e.target.value }))}\n                    placeholder=\"City\"\n                    required\n                  />\n                  {errors.city && <p className=\"form-error\">{errors.city}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    ZIP Code *\n                  </label>\n                  <input\n                    type=\"text\"\n                    className={`form-input ${errors.zipCode ? 'border-red-300' : ''}`}\n                    value={formData.zipCode}\n                    onChange={(e) => setFormData(prev => ({ ...prev, zipCode: e.target.value }))}\n                    placeholder=\"12345\"\n                    required\n                  />\n                  {errors.zipCode && <p className=\"form-error\">{errors.zipCode}</p>}\n                </div>\n              </div>\n            </section>\n\n            {/* Pilot Qualifications */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Pilot Qualifications\n              </h3>\n              \n              <div className=\"mb-6\">\n                <label className=\"flex items-center space-x-3\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.part107Certified}\n                    onChange={(e) => setFormData(prev => ({ ...prev, part107Certified: e.target.checked }))}\n                    className=\"form-checkbox\"\n                  />\n                  <span className=\"form-label mb-0\">I hold a valid Part 107 Remote Pilot Certificate</span>\n                </label>\n              </div>\n\n              {formData.part107Certified && (\n                <div className=\"cd-grid cd-grid-2 gap-6 mb-6\">\n                  <div>\n                    <label className=\"form-label\">\n                      Part 107 Certificate Number *\n                    </label>\n                    <input\n                      type=\"text\"\n                      className={`form-input ${errors.part107Number ? 'border-red-300' : ''}`}\n                      value={formData.part107Number}\n                      onChange={(e) => setFormData(prev => ({ ...prev, part107Number: e.target.value }))}\n                      placeholder=\"Certificate number\"\n                      required\n                    />\n                    {errors.part107Number && <p className=\"form-error\">{errors.part107Number}</p>}\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">\n                      License Expiry Date *\n                    </label>\n                    <input\n                      type=\"date\"\n                      className={`form-input ${errors.licenseExpiryDate ? 'border-red-300' : ''}`}\n                      value={formData.licenseExpiryDate}\n                      onChange={(e) => setFormData(prev => ({ ...prev, licenseExpiryDate: e.target.value }))}\n                      required\n                    />\n                    {errors.licenseExpiryDate && <p className=\"form-error\">{errors.licenseExpiryDate}</p>}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"cd-grid cd-grid-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">\n                    Thermal Inspection Experience (Years)\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    className={`form-input ${errors.thermalExperienceYears ? 'border-red-300' : ''}`}\n                    value={formData.thermalExperienceYears}\n                    onChange={(e) => setFormData(prev => ({ ...prev, thermalExperienceYears: parseInt(e.target.value) || 0 }))}\n                    placeholder=\"0\"\n                  />\n                  {errors.thermalExperienceYears && <p className=\"form-error\">{errors.thermalExperienceYears}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Total Flight Hours\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    className={`form-input ${errors.totalFlightHours ? 'border-red-300' : ''}`}\n                    value={formData.totalFlightHours}\n                    onChange={(e) => setFormData(prev => ({ ...prev, totalFlightHours: parseInt(e.target.value) || 0 }))}\n                    placeholder=\"0\"\n                  />\n                  {errors.totalFlightHours && <p className=\"form-error\">{errors.totalFlightHours}</p>}\n                </div>\n              </div>\n            </section>\n\n            {/* Equipment */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Equipment & Inventory\n              </h3>\n              \n              <div className=\"cd-grid cd-grid-2 gap-6\">\n                <div>\n                  <FormControl fullWidth error={!!errors.droneModels}>\n                    <InputLabel>Drone Models *</InputLabel>\n                    <Select<string[]>\n                      multiple\n                      value={formData.droneModels}\n                      onChange={(e: SelectChangeEvent<string[]>) => {\n                        const value = typeof e.target.value === 'string' ? [e.target.value] : e.target.value;\n                        handleMultiSelect('droneModels', value);\n                      }}\n                      input={<OutlinedInput label=\"Drone Models *\" />}\n                      renderValue={(selected: string[]) => (\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                          {selected.map((value) => (\n                            <Chip key={value} label={value} size=\"small\" />\n                          ))}\n                        </Box>\n                      )}\n                      sx={{\n                        '& .MuiOutlinedInput-root': {\n                          borderRadius: '8px',\n                        },\n                      }}\n                    >\n                      {DRONE_MODELS.map((model) => (\n                        <MenuItem key={model} value={model}>\n                          {model}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    {errors.droneModels && (\n                      <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 1.75 }}>\n                        {errors.droneModels}\n                      </Typography>\n                    )}\n                  </FormControl>\n                </div>\n\n                <div>\n                  <FormControl fullWidth error={!!errors.thermalCameraModels}>\n                    <InputLabel>Thermal Camera Equipment *</InputLabel>\n                    <Select<string[]>\n                      multiple\n                      value={formData.thermalCameraModels}\n                      onChange={(e: SelectChangeEvent<string[]>) => {\n                        const value = typeof e.target.value === 'string' ? [e.target.value] : e.target.value;\n                        handleMultiSelect('thermalCameraModels', value);\n                      }}\n                      input={<OutlinedInput label=\"Thermal Camera Equipment *\" />}\n                      renderValue={(selected: string[]) => (\n                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                          {selected.map((value) => (\n                            <Chip key={value} label={value} size=\"small\" />\n                          ))}\n                        </Box>\n                      )}\n                      sx={{\n                        '& .MuiOutlinedInput-root': {\n                          borderRadius: '8px',\n                        },\n                      }}\n                    >\n                      {THERMAL_CAMERAS.map((camera) => (\n                        <MenuItem key={camera} value={camera}>\n                          {camera}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                    {errors.thermalCameraModels && (\n                      <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 1.75 }}>\n                        {errors.thermalCameraModels}\n                      </Typography>\n                    )}\n                  </FormControl>\n                </div>\n              </div>\n              \n              <div className=\"mt-6\">\n                <FormControl fullWidth>\n                  <InputLabel>Additional Equipment</InputLabel>\n                  <Select<string[]>\n                    multiple\n                    value={formData.additionalEquipment}\n                    onChange={(e: SelectChangeEvent<string[]>) => {\n                      const value = typeof e.target.value === 'string' ? [e.target.value] : e.target.value;\n                      handleMultiSelect('additionalEquipment', value);\n                    }}\n                    input={<OutlinedInput label=\"Additional Equipment\" />}\n                    renderValue={(selected: string[]) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {selected.map((value) => (\n                          <Chip key={value} label={value} size=\"small\" />\n                        ))}\n                      </Box>\n                    )}\n                    sx={{\n                      '& .MuiOutlinedInput-root': {\n                        borderRadius: '8px',\n                      },\n                    }}\n                  >\n                    {ADDITIONAL_INVENTORY.map((equipment) => (\n                      <MenuItem key={equipment} value={equipment}>\n                        {equipment}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                  <Typography variant=\"caption\" color=\"textSecondary\" sx={{ mt: 0.5, ml: 1.75 }}>\n                    Select any additional equipment you have available\n                  </Typography>\n                </FormControl>\n              </div>\n            </section>\n\n            {/* Insurance Information */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Insurance Information\n              </h3>\n              \n              <div className=\"mb-6\">\n                <label className=\"flex items-center space-x-3\">\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.hasInsurance}\n                    onChange={(e) => setFormData(prev => ({ ...prev, hasInsurance: e.target.checked }))}\n                    className=\"form-checkbox\"\n                  />\n                  <span className=\"form-label mb-0\">I have drone liability insurance</span>\n                </label>\n              </div>\n\n              {formData.hasInsurance && (\n                <div className=\"cd-grid cd-grid-2 gap-6\">\n                  <div>\n                    <label className=\"form-label\">\n                      Insurance Provider *\n                    </label>\n                    <input\n                      type=\"text\"\n                      className={`form-input ${errors.insuranceProvider ? 'border-red-300' : ''}`}\n                      value={formData.insuranceProvider}\n                      onChange={(e) => setFormData(prev => ({ ...prev, insuranceProvider: e.target.value }))}\n                      placeholder=\"Insurance company name\"\n                      required\n                    />\n                    {errors.insuranceProvider && <p className=\"form-error\">{errors.insuranceProvider}</p>}\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">\n                      Policy Number *\n                    </label>\n                    <input\n                      type=\"text\"\n                      className={`form-input ${errors.insurancePolicyNumber ? 'border-red-300' : ''}`}\n                      value={formData.insurancePolicyNumber}\n                      onChange={(e) => setFormData(prev => ({ ...prev, insurancePolicyNumber: e.target.value }))}\n                      placeholder=\"Policy number\"\n                      required\n                    />\n                    {errors.insurancePolicyNumber && <p className=\"form-error\">{errors.insurancePolicyNumber}</p>}\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">\n                      Insurance Expiry Date *\n                    </label>\n                    <input\n                      type=\"date\"\n                      className={`form-input ${errors.insuranceExpiryDate ? 'border-red-300' : ''}`}\n                      value={formData.insuranceExpiryDate}\n                      onChange={(e) => setFormData(prev => ({ ...prev, insuranceExpiryDate: e.target.value }))}\n                      required\n                    />\n                    {errors.insuranceExpiryDate && <p className=\"form-error\">{errors.insuranceExpiryDate}</p>}\n                  </div>\n\n                  <div>\n                    <label className=\"form-label\">\n                      Liability Coverage (USD) *\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"1000\"\n                      className={`form-input ${errors.liabilityCoverage ? 'border-red-300' : ''}`}\n                      value={formData.liabilityCoverage}\n                      onChange={(e) => setFormData(prev => ({ ...prev, liabilityCoverage: parseInt(e.target.value) || 0 }))}\n                      placeholder=\"e.g., 1000000\"\n                      required\n                    />\n                    {errors.liabilityCoverage && <p className=\"form-error\">{errors.liabilityCoverage}</p>}\n                  </div>\n                </div>\n              )}\n            </section>\n\n            {/* Service Area */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Service Coverage Area\n              </h3>\n              \n              <div className=\"mb-6\">\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={formData.isNationwide}\n                      onChange={(e) => handleServiceAreaChange(e.target.checked)}\n                      sx={{\n                        color: 'var(--compliance-orange)',\n                        '&.Mui-checked': {\n                          color: 'var(--compliance-orange)',\n                        },\n                      }}\n                    />\n                  }\n                  label={<Typography variant=\"body1\" fontWeight={600}>I offer nationwide service</Typography>}\n                />\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 4, mt: -1 }}>\n                  Check this if you're willing to travel anywhere in the US for jobs\n                </Typography>\n              </div>\n\n              {!formData.isNationwide && (\n                <div className=\"cd-grid cd-grid-2 gap-6\">\n                  <div>\n                    <label className=\"form-label\">\n                      Service Area Address *\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"form-input\"\n                      value={formData.address}\n                      onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                      placeholder=\"Your primary service area location\"\n                      required\n                    />\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      Enter the city/area you primarily serve from\n                    </p>\n                  </div>\n\n                  <div>\n                    <FormControl fullWidth error={!!errors.serviceRadius}>\n                      <InputLabel>Travel Radius *</InputLabel>\n                      <Select\n                        value={formData.serviceRadius.toString()}\n                        onChange={(e) => setFormData(prev => ({ ...prev, serviceRadius: parseInt(e.target.value) }))}\n                        label=\"Travel Radius *\"\n                        sx={{\n                          '& .MuiOutlinedInput-root': {\n                            borderRadius: '8px',\n                          },\n                        }}\n                      >\n                        {TRAVEL_RADIUS_OPTIONS.map((option) => (\n                          <MenuItem key={option.value} value={option.value.toString()}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                      {errors.serviceRadius && (\n                        <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 1.75 }}>\n                          {errors.serviceRadius}\n                        </Typography>\n                      )}\n                    </FormControl>\n                  </div>\n                </div>\n              )}\n            </section>\n\n            {/* Application Essay */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Tell Us About Yourself\n              </h3>\n              \n              <div>\n                <label className=\"form-label\">\n                  Why do you want to become a ComplianceDrone pilot? What relevant experience do you have?\n                </label>\n                <textarea\n                  rows={6}\n                  className=\"form-input resize-none\"\n                  value={formData.applicationNotes}\n                  onChange={(e) => setFormData(prev => ({ ...prev, applicationNotes: e.target.value }))}\n                  placeholder=\"Share your background in thermal inspection, drone operations, or relevant field experience. What makes you a good fit for professional thermal inspection work?\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  This helps us understand your qualifications and commitment to quality thermal inspection services.\n                </p>\n              </div>\n            </section>\n\n            {/* Submit */}\n            <div className=\"text-center\">\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"btn-primary text-lg px-12 py-4 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isSubmitting ? (\n                  <span className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Submitting Application...</span>\n                  </span>\n                ) : (\n                  'Submit Application'\n                )}\n              </button>\n              \n              <p className=\"text-sm text-gray-500 mt-4\">\n                Your application will be reviewed within 2-3 business days.\n              </p>\n            </div>\n          </form>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Register;","size_bytes":34813},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"// Main Express server for ComplianceDrone with authentication\nimport express from 'express';\nimport next from 'next';\nimport { storage } from './storage';\nimport { setupAuth, isAuthenticated } from './replitAuth';\nimport { createServer } from 'http';\n\n// Initialize Next.js\nconst dev = process.env.NODE_ENV !== 'production';\nconst nextApp = next({ dev });\nconst handle = nextApp.getRequestHandler();\n\nexport async function createApp(): Promise<express.Express> {\n  // Prepare Next.js\n  await nextApp.prepare();\n\n  const app = express();\n  \n  // Middleware\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Setup authentication\n  await setupAuth(app);\n\n  // Auth routes (these override Next.js API routes)\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUserWithPilotProfile(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Pilot registration endpoint\n  app.post('/api/auth/register-pilot', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const pilotData = req.body;\n\n      // Check if pilot profile already exists\n      const existingProfile = await storage.getPilotProfile(userId);\n      if (existingProfile) {\n        return res.status(409).json({ message: \"Pilot profile already exists\" });\n      }\n\n      // Create pilot profile\n      const profile = await storage.createPilotProfile({\n        userId,\n        ...pilotData,\n        status: 'pending'\n      });\n\n      res.status(201).json(profile);\n    } catch (error) {\n      console.error(\"Error creating pilot profile:\", error);\n      res.status(500).json({ message: \"Failed to create pilot profile\" });\n    }\n  });\n\n  // Get pilot profile endpoint\n  app.get('/api/auth/pilot-profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getPilotProfile(userId);\n      \n      if (!profile) {\n        return res.status(404).json({ message: \"Pilot profile not found\" });\n      }\n\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching pilot profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch pilot profile\" });\n    }\n  });\n\n  // Handle all other requests with Next.js\n  app.use((req, res) => {\n    return handle(req, res);\n  });\n\n  return app;\n}\n\nexport async function startServer(port: number = 5000) {\n  const app = await createApp();\n  const server = createServer(app);\n  \n  server.listen(port, '0.0.0.0', () => {\n    console.log(`ComplianceDrone server running on port ${port}`);\n  });\n  \n  return server;\n}\n\n// Start server if this file is run directly\nif (require.main === module) {\n  startServer();\n}","size_bytes":2932},"server/replitAuth.ts":{"content":"// Replit Auth integration for ComplianceDrone pilot authentication\n// Based on Replit Auth integration blueprint\n\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nconst dev = process.env.NODE_ENV !== 'production';\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true, // Auto-create sessions table\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production', // Only secure in production\n      sameSite: 'lax', // Important for OAuth flows\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  // Add domains from environment variable\n  const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n  \n  // Add localhost for development\n  if (dev || process.env.NODE_ENV === 'development') {\n    domains.push('localhost:5000');\n  }\n\n  for (const domain of domains) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: domain.includes('localhost') \n          ? `http://${domain}/api/callback`\n          : `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    // Handle localhost development vs production domains\n    const hostname = req.hostname === 'localhost' ? 'localhost:5000' : req.hostname;\n    passport.authenticate(`replitauth:${hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    // Handle localhost development vs production domains\n    const hostname = req.hostname === 'localhost' ? 'localhost:5000' : req.hostname;\n    passport.authenticate(`replitauth:${hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: req.hostname === 'localhost' \n            ? `${req.protocol}://${req.hostname}:5000`\n            : `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":5191},"server/storage.ts":{"content":"// Storage layer for ComplianceDrone authentication and pilot management\n// Integrates with Replit Auth integration for secure user operations\n\nimport {\n  users,\n  pilotProfiles,\n  jobs,\n  type User,\n  type UpsertUser,\n  type PilotProfile,\n  type UpsertPilotProfile,\n  type UserWithPilotProfile,\n  type PilotWithUser,\n} from \"../shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations - Required for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Extended user operations\n  getUserWithPilotProfile(id: string): Promise<UserWithPilotProfile | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  \n  // Pilot profile operations\n  createPilotProfile(profile: UpsertPilotProfile): Promise<PilotProfile>;\n  updatePilotProfile(id: string, profile: Partial<UpsertPilotProfile>): Promise<PilotProfile>;\n  getPilotProfile(userId: string): Promise<PilotProfile | undefined>;\n  getPilotProfileById(id: string): Promise<PilotProfile | undefined>;\n  getPilotWithUser(profileId: string): Promise<PilotWithUser | undefined>;\n  \n  // Pilot management operations\n  getPendingPilots(): Promise<PilotWithUser[]>;\n  getApprovedPilots(): Promise<PilotWithUser[]>;\n  approvePilot(profileId: string, approvedBy: string): Promise<PilotProfile>;\n  updatePilotStatus(profileId: string, status: 'pending' | 'approved' | 'active' | 'inactive' | 'suspended'): Promise<PilotProfile>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations - Required for Replit Auth\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Extended user operations\n  async getUserWithPilotProfile(id: string): Promise<UserWithPilotProfile | undefined> {\n    const [result] = await db\n      .select()\n      .from(users)\n      .leftJoin(pilotProfiles, eq(users.id, pilotProfiles.userId))\n      .where(eq(users.id, id));\n    \n    if (!result.users) return undefined;\n    \n    return {\n      ...result.users,\n      pilotProfile: result.pilot_profiles || undefined\n    };\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  // Pilot profile operations\n  async createPilotProfile(profileData: UpsertPilotProfile): Promise<PilotProfile> {\n    const [profile] = await db\n      .insert(pilotProfiles)\n      .values(profileData)\n      .returning();\n    return profile;\n  }\n\n  async updatePilotProfile(id: string, profileData: Partial<UpsertPilotProfile>): Promise<PilotProfile> {\n    const [profile] = await db\n      .update(pilotProfiles)\n      .set({\n        ...profileData,\n        updatedAt: new Date()\n      })\n      .where(eq(pilotProfiles.id, id))\n      .returning();\n    return profile;\n  }\n\n  async getPilotProfile(userId: string): Promise<PilotProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(pilotProfiles)\n      .where(eq(pilotProfiles.userId, userId));\n    return profile;\n  }\n\n  async getPilotProfileById(id: string): Promise<PilotProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(pilotProfiles)\n      .where(eq(pilotProfiles.id, id));\n    return profile;\n  }\n\n  async getPilotWithUser(profileId: string): Promise<PilotWithUser | undefined> {\n    const [result] = await db\n      .select()\n      .from(pilotProfiles)\n      .innerJoin(users, eq(pilotProfiles.userId, users.id))\n      .where(eq(pilotProfiles.id, profileId));\n    \n    if (!result.pilot_profiles || !result.users) return undefined;\n    \n    return {\n      ...result.pilot_profiles,\n      user: result.users\n    };\n  }\n\n  // Pilot management operations\n  async getPendingPilots(): Promise<PilotWithUser[]> {\n    const results = await db\n      .select()\n      .from(pilotProfiles)\n      .innerJoin(users, eq(pilotProfiles.userId, users.id))\n      .where(eq(pilotProfiles.status, 'pending'))\n      .orderBy(desc(pilotProfiles.createdAt));\n    \n    return results.map(result => ({\n      ...result.pilot_profiles,\n      user: result.users\n    }));\n  }\n\n  async getApprovedPilots(): Promise<PilotWithUser[]> {\n    const results = await db\n      .select()\n      .from(pilotProfiles)\n      .innerJoin(users, eq(pilotProfiles.userId, users.id))\n      .where(eq(pilotProfiles.status, 'approved'))\n      .orderBy(desc(pilotProfiles.createdAt));\n    \n    return results.map(result => ({\n      ...result.pilot_profiles,\n      user: result.users\n    }));\n  }\n\n  async approvePilot(profileId: string, approvedBy: string): Promise<PilotProfile> {\n    const [profile] = await db\n      .update(pilotProfiles)\n      .set({\n        status: 'approved',\n        approvedAt: new Date(),\n        approvedBy,\n        updatedAt: new Date()\n      })\n      .where(eq(pilotProfiles.id, profileId))\n      .returning();\n    return profile;\n  }\n\n  async updatePilotStatus(\n    profileId: string, \n    status: 'pending' | 'approved' | 'active' | 'inactive' | 'suspended'\n  ): Promise<PilotProfile> {\n    const [profile] = await db\n      .update(pilotProfiles)\n      .set({\n        status,\n        updatedAt: new Date()\n      })\n      .where(eq(pilotProfiles.id, profileId))\n      .returning();\n    return profile;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":5790},"shared/schema.ts":{"content":"// Database schema for ComplianceDrone authentication and pilot management\n// Integrates with Replit Auth integration for secure authentication\n\nimport { sql } from 'drizzle-orm';\nimport {\n  boolean,\n  index,\n  integer,\n  jsonb,\n  pgEnum,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table - Required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - Required for Replit Auth, extended with pilot fields\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pilot status enum\nexport const pilotStatusEnum = pgEnum('pilot_status', [\n  'pending',     // Initial registration, awaiting review\n  'approved',    // Approved by admin, can access platform\n  'active',      // Currently active pilot with jobs\n  'inactive',    // Temporarily inactive\n  'suspended'    // Account suspended\n]);\n\n// Pilot profiles - Extended information for drone pilots\nexport const pilotProfiles = pgTable(\"pilot_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  \n  // Professional Information\n  companyName: varchar(\"company_name\"),\n  businessType: varchar(\"business_type\"), // 'individual', 'llc', 'corporation', 'partnership'\n  taxId: varchar(\"tax_id\"),\n  \n  // Contact Information\n  phoneNumber: varchar(\"phone_number\"),\n  address: text(\"address\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  zipCode: varchar(\"zip_code\"),\n  \n  // Pilot Qualifications\n  part107Certified: boolean(\"part_107_certified\").default(false),\n  part107Number: varchar(\"part_107_number\"),\n  licenseExpiryDate: timestamp(\"license_expiry_date\"),\n  thermalExperienceYears: integer(\"thermal_experience_years\"),\n  totalFlightHours: integer(\"total_flight_hours\"),\n  \n  // Equipment Information\n  droneModels: jsonb(\"drone_models\").$type<string[]>(), // Array of drone model names\n  thermalCameraModels: jsonb(\"thermal_camera_models\").$type<string[]>(),\n  \n  // Insurance Information\n  hasInsurance: boolean(\"has_insurance\").default(false),\n  insuranceProvider: varchar(\"insurance_provider\"),\n  insurancePolicyNumber: varchar(\"insurance_policy_number\"),\n  insuranceExpiryDate: timestamp(\"insurance_expiry_date\"),\n  liabilityCoverage: integer(\"liability_coverage\"), // Coverage amount in USD\n  \n  // Geographic Coverage\n  serviceStates: jsonb(\"service_states\").$type<string[]>(),\n  maxTravelDistance: integer(\"max_travel_distance\"), // Miles from base location\n  \n  // Platform Status\n  status: pilotStatusEnum(\"status\").default('pending'),\n  approvedAt: timestamp(\"approved_at\"),\n  approvedBy: varchar(\"approved_by\"), // Admin user ID who approved\n  \n  // Performance Metrics\n  completedJobs: integer(\"completed_jobs\").default(0),\n  averageRating: integer(\"average_rating\"), // 1-5 star rating\n  totalEarnings: integer(\"total_earnings\").default(0), // In cents\n  \n  // Application Information\n  notes: text(\"notes\"), // Admin notes\n  applicationNotes: text(\"application_notes\"), // Pilot's application essay/notes\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Jobs table - Thermal inspection jobs\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientUserId: varchar(\"client_user_id\").references(() => users.id),\n  assignedPilotId: varchar(\"assigned_pilot_id\").references(() => pilotProfiles.id),\n  \n  // Job Details\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  location: varchar(\"location\"),\n  coordinatesLat: varchar(\"coordinates_lat\"),\n  coordinatesLng: varchar(\"coordinates_lng\"),\n  \n  // Job Status\n  status: varchar(\"status\").default('created'), // 'created', 'assigned', 'in_progress', 'completed', 'cancelled'\n  \n  // File Processing\n  fileCount: integer(\"file_count\").default(0),\n  processedCount: integer(\"processed_count\").default(0),\n  anomalyCount: integer(\"anomaly_count\"),\n  reportGenerated: boolean(\"report_generated\").default(false),\n  \n  // Scheduling\n  scheduledDate: timestamp(\"scheduled_date\"),\n  completedAt: timestamp(\"completed_at\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one }) => ({\n  pilotProfile: one(pilotProfiles, {\n    fields: [users.id],\n    references: [pilotProfiles.userId],\n  }),\n}));\n\nexport const pilotProfilesRelations = relations(pilotProfiles, ({ one, many }) => ({\n  user: one(users, {\n    fields: [pilotProfiles.userId],\n    references: [users.id],\n  }),\n  assignedJobs: many(jobs, {\n    relationName: \"pilot_jobs\",\n  }),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one }) => ({\n  client: one(users, {\n    fields: [jobs.clientUserId],\n    references: [users.id],\n  }),\n  assignedPilot: one(pilotProfiles, {\n    fields: [jobs.assignedPilotId],\n    references: [pilotProfiles.id],\n  }),\n}));\n\n// Type definitions for TypeScript\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type UpsertPilotProfile = typeof pilotProfiles.$inferInsert;\nexport type PilotProfile = typeof pilotProfiles.$inferSelect;\nexport type UpsertJob = typeof jobs.$inferInsert;\nexport type Job = typeof jobs.$inferSelect;\n\n// Combined types for API responses\nexport type UserWithPilotProfile = User & {\n  pilotProfile?: PilotProfile;\n};\n\nexport type PilotWithUser = PilotProfile & {\n  user: User;\n};","size_bytes":6080},"lib/nextAuth.ts":{"content":"// Authentication utility for Next.js API routes\n// Validates sessions against PostgreSQL session store\n\nimport { NextApiRequest } from 'next';\nimport { Pool } from 'pg';\nimport { parse } from 'cookie';\n\n// Create a connection pool instead of per-request clients\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  max: 20, // Maximum number of clients in the pool\n  idleTimeoutMillis: 30000, // Close idle clients after 30 seconds\n  connectionTimeoutMillis: 2000, // Return an error after 2 seconds if connection could not be established\n  maxUses: 7500, // Close (and replace) a connection after it has been used 7500 times\n});\n\n// Handle pool errors\npool.on('error', (err) => {\n  console.error('Unexpected error on idle PostgreSQL client:', err);\n});\n\n// Parse session ID from signed cookie\nfunction parseSessionId(cookieValue: string, secret: string): string | null {\n  try {\n    // Extract session ID from signed cookie format: s:sessionId.signature\n    if (cookieValue.startsWith('s:')) {\n      const unsigned = cookieValue.slice(2);\n      const sessionId = unsigned.split('.')[0];\n      return sessionId;\n    }\n    return cookieValue;\n  } catch {\n    return null;\n  }\n}\n\n// Validate session against PostgreSQL session store\nexport async function hasValidSession(req: NextApiRequest): Promise<boolean> {\n  let client;\n  try {\n    const cookieHeader = req.headers.cookie;\n    if (!cookieHeader) return false;\n    \n    const cookies = parse(cookieHeader);\n    const sessionCookie = cookies['connect.sid'];\n    if (!sessionCookie) return false;\n    \n    // Parse session ID\n    const sessionSecret = process.env.SESSION_SECRET;\n    if (!sessionSecret) {\n      console.error('SESSION_SECRET environment variable not set');\n      return false;\n    }\n    \n    const sessionId = parseSessionId(sessionCookie, sessionSecret);\n    if (!sessionId) return false;\n    \n    // Get client from pool instead of creating new connection\n    client = await pool.connect();\n    \n    const result = await client.query(\n      'SELECT sess FROM sessions WHERE sid = $1 AND expire > NOW()',\n      [sessionId]\n    );\n    \n    if (result.rows.length === 0) {\n      return false;\n    }\n    \n    const sessionData = result.rows[0].sess;\n    \n    // Check if session has user authentication\n    if (!sessionData.passport || !sessionData.passport.user) {\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Session validation error:', error);\n    return false;\n  } finally {\n    // Release client back to pool\n    if (client) {\n      client.release();\n    }\n  }\n}\n\n// Graceful shutdown function to close the pool\nexport async function closeDbPool(): Promise<void> {\n  try {\n    await pool.end();\n    console.log('Database pool closed');\n  } catch (error) {\n    console.error('Error closing database pool:', error);\n  }\n}\n\n// Synchronous fallback for backwards compatibility (not recommended)\nexport function hasValidSessionSync(req: NextApiRequest): boolean {\n  console.warn('hasValidSessionSync is deprecated and insecure. Use hasValidSession() instead.');\n  const cookieHeader = req.headers.cookie;\n  if (!cookieHeader) return false;\n  \n  const cookies = parse(cookieHeader);\n  return !!cookies['connect.sid'];\n}","size_bytes":3246},"lib/pathValidation.ts":{"content":"// Secure path validation utilities to prevent path traversal attacks\nimport path from 'path';\n\n// Strict regex pattern for jobId validation\n// Only allows alphanumeric characters, underscores, and hyphens (1-64 chars)\nconst JOB_ID_PATTERN = /^[a-zA-Z0-9_-]{1,64}$/;\n\n// Base uploads directory for secure path resolution\nconst UPLOADS_DIR = path.join(process.cwd(), 'uploads');\n\n/**\n * Validates jobId format and prevents path traversal attacks\n * @param jobId - The job identifier to validate\n * @returns true if valid, false otherwise\n */\nexport function isValidJobId(jobId: string): boolean {\n  if (!jobId || typeof jobId !== 'string') {\n    return false;\n  }\n  \n  return JOB_ID_PATTERN.test(jobId);\n}\n\n/**\n * Creates a secure job directory path and verifies it's within uploads directory\n * @param jobId - The job identifier (must be pre-validated)\n * @returns Secure absolute path to job directory\n * @throws Error if path traversal is detected\n */\nexport function getSecureJobPath(jobId: string): string {\n  if (!isValidJobId(jobId)) {\n    throw new Error('Invalid job ID format');\n  }\n  \n  // Create the intended job directory path\n  const jobDir = path.join(UPLOADS_DIR, jobId);\n  \n  // Resolve to absolute path and verify it's within uploads directory\n  const resolvedJobDir = path.resolve(jobDir);\n  const resolvedUploadsDir = path.resolve(UPLOADS_DIR);\n  \n  // Check if the resolved job directory is within the uploads directory\n  if (!resolvedJobDir.startsWith(resolvedUploadsDir + path.sep) && resolvedJobDir !== resolvedUploadsDir) {\n    throw new Error('Path traversal attack detected');\n  }\n  \n  return resolvedJobDir;\n}\n\n/**\n * Validates and sanitizes filename to prevent directory traversal in filenames\n * @param filename - Original filename\n * @returns Sanitized filename\n */\nexport function sanitizeFilename(filename: string): string {\n  if (!filename || typeof filename !== 'string') {\n    throw new Error('Invalid filename');\n  }\n  \n  // Remove any directory separators and relative path components\n  const sanitized = path.basename(filename)\n    .replace(/[<>:\"|?*]/g, '') // Remove invalid filename characters\n    .replace(/^\\.+/, '') // Remove leading dots\n    .trim();\n  \n  if (!sanitized || sanitized.length === 0) {\n    throw new Error('Invalid filename after sanitization');\n  }\n  \n  if (sanitized.length > 255) {\n    throw new Error('Filename too long');\n  }\n  \n  return sanitized;\n}\n\n/**\n * Creates a secure file path within a job directory\n * @param jobId - The job identifier\n * @param filename - The filename\n * @returns Secure absolute path to the file\n */\nexport function getSecureFilePath(jobId: string, filename: string): string {\n  const secureJobDir = getSecureJobPath(jobId);\n  const sanitizedFilename = sanitizeFilename(filename);\n  \n  return path.join(secureJobDir, sanitizedFilename);\n}\n\n/**\n * Gets the uploads directory path\n * @returns Absolute path to uploads directory\n */\nexport function getUploadsDir(): string {\n  return path.resolve(UPLOADS_DIR);\n}","size_bytes":3002},"attached_assets/PilotRegistration_1758128551798.js":{"content":"import {\r\n  ArrowBack,\r\n  ArrowForward,\r\n  CheckCircle,\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  CloudUpload,\r\n} from '@mui/icons-material';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  RadioGroup,\r\n  Radio,\r\n  Checkbox,\r\n  FormGroup,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  LinearProgress,\r\n  Card,\r\n  CardContent,\r\n  Alert,\r\n  Chip,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst steps = [\r\n  'Personal Information',\r\n  'Licensing & Certification',\r\n  'Equipment',\r\n  'Work Experience & Insurance',\r\n  'Review & Submit',\r\n];\r\n\r\nfunction PilotRegistration() {\r\n  const navigate = useNavigate();\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [equipmentDialogs, setEquipmentDialogs] = useState({\r\n    droneModels: false,\r\n    cameraEquipment: false,\r\n    additionalInventory: false,\r\n    additionalCertifications: false,\r\n    customSoftware: false,\r\n  });\r\n  const [customEquipment, setCustomEquipment] = useState('');\r\n  const [selectedQuantity, setSelectedQuantity] = useState(1);\r\n  const [customSoftwareDescription, setCustomSoftwareDescription] = useState('');\r\n  const [uploadedFiles, setUploadedFiles] = useState([]);\r\n  const [emailValidationError, setEmailValidationError] = useState('');\r\n  const [verificationSent, setVerificationSent] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    // Personal Information\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n    zipCode: '',\r\n\r\n    // Licensing & Certification\r\n    part107License: '',\r\n    licenseNumber: '',\r\n    licenseIssueDate: '',\r\n    licenseExpiration: '',\r\n    recurrentCertNumber: '',\r\n    willGetRecurrentBeforeFlying: false,\r\n    part61License: '',\r\n    part137License: '',\r\n    mqOperator: false,\r\n    additionalCertifications: [],\r\n\r\n    // Email verification\r\n    emailVerified: false,\r\n    verificationCode: '',\r\n\r\n    // Experience & Equipment\r\n    yearsExperience: '',\r\n    totalFlightHours: '',\r\n    commercialHours: '',\r\n    droneModels: [],\r\n    cameraEquipment: [],\r\n    additionalInventory: [],\r\n    softwareExperience: [],\r\n    softwareLicenses: [],\r\n    imageProcessingApproach: '',\r\n    customSoftwareDescription: '',\r\n\r\n    // Military & Insurance\r\n    militaryService: '',\r\n    militaryDroneOperator: false,\r\n    insuranceCoverage: [],\r\n\r\n    // Work Experience & Documents\r\n    workExperience: '',\r\n    uploadedDocuments: [],\r\n\r\n    // Availability & Services\r\n    availabilityType: '',\r\n    serviceRadius: '',\r\n    servicesOffered: [],\r\n    rateStructure: '',\r\n\r\n    // Additional\r\n    backgroundCheck: false,\r\n    termsAccepted: false,\r\n  });\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n\r\n    // Email validation\r\n    if (field === 'email') {\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (value && !emailRegex.test(value)) {\r\n        setEmailValidationError('Please enter a valid email address');\r\n      } else {\r\n        setEmailValidationError('');\r\n        // Send verification email if email is valid and changed\r\n        if (value && emailRegex.test(value) && value !== formData.email) {\r\n          sendVerificationEmail(value);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const sendVerificationEmail = async email => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/send-verification`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setVerificationSent(true);\r\n      }\r\n    } catch (error) {\r\n      // Verification email failed silently\r\n    }\r\n  };\r\n\r\n  const verifyEmail = async () => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/verify-email`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: formData.email,\r\n          code: formData.verificationCode,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setFormData(prev => ({ ...prev, emailVerified: true }));\r\n        setVerificationSent(false);\r\n      } else {\r\n        alert('Invalid verification code. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      alert('Verification failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleArrayChange = (field, value, checked) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: checked ? [...prev[field], value] : prev[field].filter(item => item !== value),\r\n    }));\r\n  };\r\n\r\n  // File upload handler\r\n  const handleFileUpload = (event, fileType = 'document') => {\r\n    const files = Array.from(event.target.files);\r\n    const newFiles = files.map(file => ({\r\n      name: file.name,\r\n      size: file.size,\r\n      type: fileType,\r\n      mimeType: file.type,\r\n      file: file,\r\n    }));\r\n\r\n    setUploadedFiles(prev => [...prev, ...newFiles]);\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      uploadedDocuments: [...prev.uploadedDocuments, ...newFiles.map(f => f.name)],\r\n    }));\r\n  };\r\n\r\n  const removeFile = fileName => {\r\n    setUploadedFiles(prev => prev.filter(file => file.name !== fileName));\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      uploadedDocuments: prev.uploadedDocuments.filter(name => name !== fileName),\r\n    }));\r\n  };\r\n\r\n  // Equipment management functions\r\n  const addEquipment = (field, equipment, quantity = 1) => {\r\n    if (equipment) {\r\n      const equipmentWithQuantity = `${equipment} (${quantity})`;\r\n      const existingIndex = formData[field].findIndex(item => item.startsWith(equipment));\r\n\r\n      if (existingIndex >= 0) {\r\n        // Update existing equipment quantity\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          [field]: prev[field].map((item, index) =>\r\n            index === existingIndex ? equipmentWithQuantity : item\r\n          ),\r\n        }));\r\n      } else {\r\n        // Add new equipment\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          [field]: [...prev[field], equipmentWithQuantity],\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const removeEquipment = (field, equipment) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: prev[field].filter(item => !item.startsWith(equipment)),\r\n    }));\r\n  };\r\n\r\n  const handleCustomEquipment = async (field, customEquipment) => {\r\n    // Notify backend about new equipment suggestion (equipment already added in handleAddFromDialog)\r\n    try {\r\n      await fetch(`${process.env.REACT_APP_API_URL}/api/equipment-suggestion`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          field,\r\n          equipment: customEquipment,\r\n          timestamp: new Date().toISOString(),\r\n          userEmail: formData.email,\r\n        }),\r\n      });\r\n    } catch (error) {\r\n      // Equipment suggestion notification failed - silent fail\r\n    }\r\n  };\r\n\r\n  // Equipment options\r\n  const droneOptions = [\r\n    'DJI Mavic 3 Enterprise',\r\n    'DJI Mavic 2 Enterprise',\r\n    'DJI Air 2S',\r\n    'DJI Mini 3 Pro',\r\n    'DJI Phantom 4 Pro',\r\n    'DJI Matrice 300 RTK',\r\n    'DJI Matrice 350 RTK',\r\n    'DJI Matrice 30/30T',\r\n    'DJI Inspire 2',\r\n    'Autel EVO II Pro',\r\n    'Parrot Anafi',\r\n    'Skydio 2+',\r\n    'Freefly Alta X',\r\n  ];\r\n\r\n  const cameraOptions = [\r\n    {\r\n      name: 'Zenmuse H30 Series',\r\n      description:\r\n        'Enhanced night vision and infrared performance, suitable for multi-scenario operations',\r\n    },\r\n    {\r\n      name: 'Zenmuse H20 Series',\r\n      description: 'Multi-sensor payloads with RGB, thermal, and laser rangefinder capabilities',\r\n    },\r\n    { name: 'Zenmuse H20T', description: 'Thermal imaging payload with RGB and thermal sensors' },\r\n    {\r\n      name: 'Zenmuse H20N',\r\n      description: 'Integrates starlight sensors for enhanced night vision capabilities',\r\n    },\r\n    {\r\n      name: 'Zenmuse P1',\r\n      description:\r\n        'Full-frame sensor with interchangeable lenses, ideal for photogrammetry missions',\r\n    },\r\n    {\r\n      name: 'Zenmuse L2',\r\n      description:\r\n        'LiDAR sensor with frame LiDAR, high-accuracy IMU, and 4/3 CMOS RGB mapping camera',\r\n    },\r\n    {\r\n      name: 'Zenmuse S1',\r\n      description:\r\n        'Versatile sensor for various lighting conditions, offering brightness and energy efficiency',\r\n    },\r\n    {\r\n      name: 'FLIR XT2',\r\n      description: 'Dual thermal and RGB sensor for professional thermal imaging',\r\n    },\r\n    {\r\n      name: 'FLIR Z20',\r\n      description: 'High-resolution thermal imaging camera for detailed heat analysis',\r\n    },\r\n  ];\r\n\r\n  const additionalInventoryOptions = [\r\n    'GNSS Mobile Station (DJI RTK, DJI RTK 2, DJI RTK 3, Reach RS2, Reach RS3, etc.)',\r\n    'Ground Control Points (GCPs)',\r\n    \"GPS-GCPs Propeller's AeroPoints\",\r\n    'Extra Batteries (TB60s, TB65s, BS60s, etc.)',\r\n    'Charging Hub',\r\n    'DJI Dock 2 (with Matrice 3D)',\r\n    'DJI Dock 3 (with Matrice 4T)',\r\n  ];\r\n\r\n  const openEquipmentDialog = field => {\r\n    setEquipmentDialogs(prev => ({ ...prev, [field]: true }));\r\n  };\r\n\r\n  const closeEquipmentDialog = field => {\r\n    setEquipmentDialogs(prev => ({ ...prev, [field]: false }));\r\n    setCustomEquipment('');\r\n    setSelectedQuantity(1);\r\n  };\r\n\r\n  const handleAddFromDialog = (field, selectedEquipment) => {\r\n    if (selectedEquipment === 'custom') {\r\n      if (customEquipment.trim()) {\r\n        addEquipment(field, customEquipment.trim(), selectedQuantity);\r\n        handleCustomEquipment(field, customEquipment.trim());\r\n        setCustomEquipment('');\r\n        closeEquipmentDialog(field);\r\n      }\r\n    } else {\r\n      addEquipment(field, selectedEquipment, selectedQuantity);\r\n      closeEquipmentDialog(field);\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setActiveStep(prev => prev + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(prev => prev - 1);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/pilot-registration`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        alert(\r\n          `Registration submitted successfully! We will review your application and contact you soon. Reference ID: ${result.pilot_id}`\r\n        );\r\n        navigate('/');\r\n      } else {\r\n        alert(`Error: ${result.error}`);\r\n      }\r\n    } catch (error) {\r\n      alert(`Network error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const renderStepContent = step => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <Box sx={{ space: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Personal Information\r\n            </Typography>\r\n            <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2, mb: 2 }}>\r\n              <TextField\r\n                label=\"First Name\"\r\n                value={formData.firstName}\r\n                onChange={e => handleInputChange('firstName', e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"Last Name\"\r\n                value={formData.lastName}\r\n                onChange={e => handleInputChange('lastName', e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n            <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2, mb: 2 }}>\r\n              <TextField\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                value={formData.email}\r\n                onChange={e => handleInputChange('email', e.target.value)}\r\n                required\r\n                fullWidth\r\n                error={!!emailValidationError}\r\n                helperText={emailValidationError}\r\n                InputProps={{\r\n                  endAdornment: formData.emailVerified ? (\r\n                    <CheckCircle sx={{ color: 'green' }} />\r\n                  ) : null,\r\n                }}\r\n              />\r\n              <TextField\r\n                label=\"Phone\"\r\n                value={formData.phone}\r\n                onChange={e => handleInputChange('phone', e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n\r\n            {/* Email Verification Section */}\r\n            {verificationSent && !formData.emailVerified && (\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  Verification code sent to {formData.email}\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>\r\n                  <TextField\r\n                    label=\"Verification Code\"\r\n                    value={formData.verificationCode}\r\n                    onChange={e => handleInputChange('verificationCode', e.target.value)}\r\n                    size=\"small\"\r\n                    sx={{ width: 150 }}\r\n                  />\r\n                  <Button\r\n                    onClick={verifyEmail}\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    disabled={!formData.verificationCode}\r\n                  >\r\n                    Verify\r\n                  </Button>\r\n                </Box>\r\n              </Alert>\r\n            )}\r\n\r\n            {formData.emailVerified && (\r\n              <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                ✅ Email verified successfully!\r\n              </Alert>\r\n            )}\r\n            <TextField\r\n              label=\"Address\"\r\n              value={formData.address}\r\n              onChange={e => handleInputChange('address', e.target.value)}\r\n              required\r\n              fullWidth\r\n              sx={{ mb: 2 }}\r\n            />\r\n            <Box sx={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', gap: 2 }}>\r\n              <TextField\r\n                label=\"City\"\r\n                value={formData.city}\r\n                onChange={e => handleInputChange('city', e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"State\"\r\n                value={formData.state}\r\n                onChange={e => handleInputChange('state', e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                label=\"ZIP Code\"\r\n                value={formData.zipCode}\r\n                onChange={e => handleInputChange('zipCode', e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n            </Box>\r\n          </Box>\r\n        );\r\n\r\n      case 1:\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Licensing & Certification\r\n            </Typography>\r\n            <FormControl component=\"fieldset\" sx={{ mb: 3 }}>\r\n              <FormLabel component=\"legend\">\r\n                Do you have a current Part 107 Remote Pilot License?\r\n              </FormLabel>\r\n              <RadioGroup\r\n                value={formData.part107License}\r\n                onChange={e => handleInputChange('part107License', e.target.value)}\r\n              >\r\n                <FormControlLabel\r\n                  value=\"yes\"\r\n                  control={<Radio />}\r\n                  label=\"Yes, I have a current Part 107 license\"\r\n                />\r\n                <FormControlLabel\r\n                  value=\"no\"\r\n                  control={<Radio />}\r\n                  label=\"No, I don't have Part 107\"\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n            {formData.part107License === 'yes' && (\r\n              <Box sx={{ mb: 3 }}>\r\n                <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2, mb: 2 }}>\r\n                  <TextField\r\n                    label=\"Part 107 License Number\"\r\n                    value={formData.licenseNumber}\r\n                    onChange={e => handleInputChange('licenseNumber', e.target.value)}\r\n                    required\r\n                  />\r\n                  <TextField\r\n                    label=\"License Issue Date\"\r\n                    type=\"date\"\r\n                    value={formData.licenseIssueDate}\r\n                    onChange={e => handleInputChange('licenseIssueDate', e.target.value)}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    required\r\n                  />\r\n                </Box>\r\n\r\n                {/* Recurrent Training Reminder */}\r\n                {formData.licenseIssueDate &&\r\n                  (() => {\r\n                    const issueDate = new Date(formData.licenseIssueDate);\r\n                    const twoYearsAgo = new Date();\r\n                    twoYearsAgo.setFullYear(twoYearsAgo.getFullYear() - 2);\r\n                    const needsRecurrent = issueDate <= twoYearsAgo;\r\n\r\n                    return needsRecurrent ? (\r\n                      <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                        <Typography variant=\"body2\">\r\n                          <strong>Reminder:</strong> Certificate holders must complete the online\r\n                          recurrent training every 24 calendar months. Complete the Part 107 Small\r\n                          UAS Recurrent (ALC-677) online training course (no cost) at{' '}\r\n                          <a\r\n                            href=\"https://www.faasafety.gov/gslac/ALC/CourseLanding.aspx?cID=677\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            style={{ color: '#1976d2', textDecoration: 'none' }}\r\n                          >\r\n                            faasafety.gov\r\n                          </a>\r\n                        </Typography>\r\n                      </Alert>\r\n                    ) : null;\r\n                  })()}\r\n\r\n                {/* File Upload for License */}\r\n                <Box sx={{ mb: 2 }}>\r\n                  <Typography variant=\"subtitle2\" gutterBottom>\r\n                    Upload copy of License and recurrent certification (PDF):\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    component=\"label\"\r\n                    startIcon={<CloudUpload />}\r\n                    sx={{ mb: 1 }}\r\n                  >\r\n                    Upload License PDF\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\".pdf\"\r\n                      hidden\r\n                      onChange={e => handleFileUpload(e, 'license')}\r\n                    />\r\n                  </Button>\r\n                  {uploadedFiles\r\n                    .filter(f => f.type === 'license')\r\n                    .map((file, index) => (\r\n                      <Chip\r\n                        key={index}\r\n                        label={file.name}\r\n                        onDelete={() => removeFile(file.name)}\r\n                        deleteIcon={<DeleteIcon />}\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 1 }}\r\n                      />\r\n                    ))}\r\n                </Box>\r\n\r\n                {/* Recurrent Certification Logic */}\r\n                {formData.licenseIssueDate &&\r\n                  (() => {\r\n                    const issueDate = new Date(formData.licenseIssueDate);\r\n                    const twoYearsAgo = new Date();\r\n                    twoYearsAgo.setFullYear(twoYearsAgo.getFullYear() - 2);\r\n                    const needsRecurrent = issueDate <= twoYearsAgo;\r\n\r\n                    return needsRecurrent ? (\r\n                      <Box sx={{ mb: 2 }}>\r\n                        <TextField\r\n                          label=\"Recurrent Certification Number (if completed)\"\r\n                          value={formData.recurrentCertNumber}\r\n                          onChange={e => handleInputChange('recurrentCertNumber', e.target.value)}\r\n                          fullWidth\r\n                          sx={{ mb: 2 }}\r\n                          helperText=\"Enter your recurrent training certificate number if you have completed it\"\r\n                        />\r\n                        {!formData.recurrentCertNumber && (\r\n                          <FormControlLabel\r\n                            control={\r\n                              <Checkbox\r\n                                checked={formData.willGetRecurrentBeforeFlying}\r\n                                onChange={e =>\r\n                                  handleInputChange(\r\n                                    'willGetRecurrentBeforeFlying',\r\n                                    e.target.checked\r\n                                  )\r\n                                }\r\n                              />\r\n                            }\r\n                            label=\"I will complete recurrent training before flying commercially\"\r\n                          />\r\n                        )}\r\n                      </Box>\r\n                    ) : null;\r\n                  })()}\r\n              </Box>\r\n            )}\r\n\r\n            {/* Other FAA Licenses */}\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Other FAA Licenses (Optional):\r\n              </Typography>\r\n              <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormLabel component=\"legend\">Part 61 Pilot License</FormLabel>\r\n                  <RadioGroup\r\n                    value={formData.part61License}\r\n                    onChange={e => handleInputChange('part61License', e.target.value)}\r\n                  >\r\n                    <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                    <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                  </RadioGroup>\r\n                </FormControl>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                  <FormLabel component=\"legend\">Part 137 Agricultural License</FormLabel>\r\n                  <RadioGroup\r\n                    value={formData.part137License}\r\n                    onChange={e => handleInputChange('part137License', e.target.value)}\r\n                  >\r\n                    <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                    <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                  </RadioGroup>\r\n                </FormControl>\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* MQ-1C Platform Operator Section */}\r\n            <Box sx={{ mb: 3 }}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={formData.mqOperator}\r\n                    onChange={e => handleInputChange('mqOperator', e.target.checked)}\r\n                  />\r\n                }\r\n                label=\"MQ-1C platform operator with Part 107\"\r\n              />\r\n\r\n              {formData.mqOperator && (\r\n                <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                  <Typography variant=\"body2\">Please upload a copy of your military ID.</Typography>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    component=\"label\"\r\n                    startIcon={<CloudUpload />}\r\n                    sx={{ mt: 1 }}\r\n                    size=\"small\"\r\n                  >\r\n                    Upload Military ID (PDF/Image)\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\".pdf,.jpg,.jpeg,.png\"\r\n                      hidden\r\n                      onChange={e => handleFileUpload(e, 'military-id')}\r\n                    />\r\n                  </Button>\r\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>\r\n                    {uploadedFiles\r\n                      .filter(f => f.type === 'military-id')\r\n                      .map((file, index) => (\r\n                        <Chip\r\n                          key={index}\r\n                          label={file.name}\r\n                          onDelete={() => removeFile(file.name)}\r\n                          deleteIcon={<DeleteIcon />}\r\n                          color=\"warning\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      ))}\r\n                  </Box>\r\n                </Alert>\r\n              )}\r\n            </Box>\r\n\r\n            {/* Relevant Certifications Section */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Relevant Certifications:\r\n              </Typography>\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                <Typography variant=\"body2\">\r\n                  Please upload any certifications showing additional training or competency\r\n                  relevant to drone operations, such as thermal imaging, construction inspection,\r\n                  mapping/surveying, first aid, or industry-specific training.\r\n                </Typography>\r\n              </Alert>\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                {formData.additionalCertifications.map((cert, index) => (\r\n                  <Chip\r\n                    key={index}\r\n                    label={cert}\r\n                    onDelete={() => removeEquipment('additionalCertifications', cert)}\r\n                    deleteIcon={<DeleteIcon />}\r\n                    color=\"success\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                ))}\r\n                {formData.additionalCertifications.length === 0 && (\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\r\n                    No certifications added yet.\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n\r\n              {/* Add Certification Button */}\r\n              <Box sx={{ mt: 2, mb: 2 }}>\r\n                <Button\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => openEquipmentDialog('additionalCertifications')}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                >\r\n                  Add Certification\r\n                </Button>\r\n              </Box>\r\n\r\n              {/* Certification Documents Upload */}\r\n              {formData.additionalCertifications.length > 0 && (\r\n                <Box sx={{ mt: 2 }}>\r\n                  <Typography variant=\"subtitle2\" gutterBottom>\r\n                    Upload Certification Documents (PDF):\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    component=\"label\"\r\n                    startIcon={<CloudUpload />}\r\n                    sx={{ mb: 1 }}\r\n                  >\r\n                    Upload Certification PDFs\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\".pdf\"\r\n                      multiple\r\n                      hidden\r\n                      onChange={e => handleFileUpload(e, 'certification')}\r\n                    />\r\n                  </Button>\r\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>\r\n                    {uploadedFiles\r\n                      .filter(f => f.type === 'certification')\r\n                      .map((file, index) => (\r\n                        <Chip\r\n                          key={index}\r\n                          label={file.name}\r\n                          onDelete={() => removeFile(file.name)}\r\n                          deleteIcon={<DeleteIcon />}\r\n                          color=\"success\"\r\n                          variant=\"outlined\"\r\n                        />\r\n                      ))}\r\n                  </Box>\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        );\r\n\r\n      case 2:\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Equipment\r\n            </Typography>\r\n\r\n            {/* Drone Models Section */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'space-between',\r\n                  mb: 2,\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle1\">Drone Models You Own/Operate:</Typography>\r\n                <Button\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => openEquipmentDialog('droneModels')}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                >\r\n                  Add Drone\r\n                </Button>\r\n              </Box>\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                {formData.droneModels.map((drone, index) => (\r\n                  <Chip\r\n                    key={index}\r\n                    label={drone}\r\n                    onDelete={() => removeEquipment('droneModels', drone)}\r\n                    deleteIcon={<DeleteIcon />}\r\n                    color=\"primary\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                ))}\r\n                {formData.droneModels.length === 0 && (\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\r\n                    No drones added yet. Click &quot;Add Drone&quot; to get started.\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* Camera/Sensor Equipment Section */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'space-between',\r\n                  mb: 2,\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle1\">Camera/Sensor Equipment:</Typography>\r\n                <Button\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => openEquipmentDialog('cameraEquipment')}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                >\r\n                  Add Camera/Sensor\r\n                </Button>\r\n              </Box>\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                {formData.cameraEquipment.map((equipment, index) => (\r\n                  <Chip\r\n                    key={index}\r\n                    label={equipment}\r\n                    onDelete={() => removeEquipment('cameraEquipment', equipment)}\r\n                    deleteIcon={<DeleteIcon />}\r\n                    color=\"secondary\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                ))}\r\n                {formData.cameraEquipment.length === 0 && (\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\r\n                    No camera/sensor equipment added yet. Click &quot;Add Camera/Sensor&quot; to get\r\n                    started.\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* Additional Inventory Section */}\r\n            <Box sx={{ mb: 4 }}>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'space-between',\r\n                  mb: 2,\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle1\">Additional Inventory & Equipment:</Typography>\r\n                <Button\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => openEquipmentDialog('additionalInventory')}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                >\r\n                  Add Equipment\r\n                </Button>\r\n              </Box>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                Include GNSS mobile stations, ground control points, batteries, etc.\r\n              </Typography>\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                {formData.additionalInventory.map((item, index) => (\r\n                  <Chip\r\n                    key={index}\r\n                    label={item}\r\n                    onDelete={() => removeEquipment('additionalInventory', item)}\r\n                    deleteIcon={<DeleteIcon />}\r\n                    color=\"success\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                ))}\r\n                {formData.additionalInventory.length === 0 && (\r\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\r\n                    No additional equipment added yet. Click &quot;Add Equipment&quot; to get\r\n                    started.\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* Software Licensing Section */}\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Image Processing & Software:\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n                Do you do your own image processing? What software do you use?\r\n              </Typography>\r\n\r\n              <FormControl component=\"fieldset\" sx={{ mb: 2 }}>\r\n                <FormLabel component=\"legend\">Image Processing Approach:</FormLabel>\r\n                <RadioGroup\r\n                  value={formData.imageProcessingApproach}\r\n                  onChange={e => handleInputChange('imageProcessingApproach', e.target.value)}\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"own-processing\"\r\n                    control={<Radio />}\r\n                    label=\"I do my own image processing\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"client-processing\"\r\n                    control={<Radio />}\r\n                    label=\"Client handles processing (I provide raw data)\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"both\"\r\n                    control={<Radio />}\r\n                    label=\"Both - depends on project requirements\"\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n              <Typography variant=\"subtitle2\" gutterBottom>\r\n                Software Licenses & Experience:\r\n              </Typography>\r\n              <FormGroup sx={{ mb: 2 }}>\r\n                {[\r\n                  'DroneDeploy',\r\n                  'Pix4D',\r\n                  'DJI Terra',\r\n                  'Agisoft Metashape',\r\n                  'Global Mapper',\r\n                  'ArcGIS',\r\n                  'QGIS',\r\n                  'Correlator3D',\r\n                  'Bentley ContextCapture',\r\n                  'Other/Custom Software',\r\n                ].map(software => (\r\n                  <FormControlLabel\r\n                    key={software}\r\n                    control={\r\n                      <Checkbox\r\n                        checked={formData.softwareLicenses.includes(software)}\r\n                        onChange={e => {\r\n                          if (software === 'Other/Custom Software' && e.target.checked) {\r\n                            setEquipmentDialogs(prev => ({ ...prev, customSoftware: true }));\r\n                          }\r\n                          handleArrayChange('softwareLicenses', software, e.target.checked);\r\n                        }}\r\n                      />\r\n                    }\r\n                    label={software}\r\n                  />\r\n                ))}\r\n              </FormGroup>\r\n            </Box>\r\n          </Box>\r\n        );\r\n\r\n      case 3:\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Work Experience & Insurance\r\n            </Typography>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Current Employment Status:\r\n              </Typography>\r\n              <FormGroup>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={formData.employmentStatus?.includes('own_company')}\r\n                      onChange={e => {\r\n                        const status = 'own_company';\r\n                        setFormData(prev => ({\r\n                          ...prev,\r\n                          employmentStatus: e.target.checked\r\n                            ? [...(prev.employmentStatus || []), status]\r\n                            : (prev.employmentStatus || []).filter(s => s !== status),\r\n                        }));\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"I own my own drone services company\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={formData.employmentStatus?.includes('open_to_joining')}\r\n                      onChange={e => {\r\n                        const status = 'open_to_joining';\r\n                        setFormData(prev => ({\r\n                          ...prev,\r\n                          employmentStatus: e.target.checked\r\n                            ? [...(prev.employmentStatus || []), status]\r\n                            : (prev.employmentStatus || []).filter(s => s !== status),\r\n                        }));\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"I'm open to joining a drone services company\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={formData.employmentStatus?.includes('fulltime_other')}\r\n                      onChange={e => {\r\n                        const status = 'fulltime_other';\r\n                        setFormData(prev => ({\r\n                          ...prev,\r\n                          employmentStatus: e.target.checked\r\n                            ? [...(prev.employmentStatus || []), status]\r\n                            : (prev.employmentStatus || []).filter(s => s !== status),\r\n                        }));\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"I have a full-time career outside of drone operations\"\r\n                />\r\n              </FormGroup>\r\n            </Box>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                FAA Waiver Experience:\r\n              </Typography>\r\n              <FormControl component=\"fieldset\" margin=\"normal\">\r\n                <RadioGroup\r\n                  value={formData.faaWaiverExperience || ''}\r\n                  onChange={e =>\r\n                    setFormData(prev => ({ ...prev, faaWaiverExperience: e.target.value }))\r\n                  }\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"yes\"\r\n                    control={<Radio />}\r\n                    label=\"Yes, I have applied for FAA waivers\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"no\"\r\n                    control={<Radio />}\r\n                    label=\"No, I have not applied for FAA waivers\"\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </Box>\r\n\r\n            <FormControl fullWidth sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Work Experience Background:\r\n              </Typography>\r\n              <TextField\r\n                value={formData.workExperience}\r\n                onChange={e => handleInputChange('workExperience', e.target.value)}\r\n                multiline\r\n                rows={4}\r\n                fullWidth\r\n                placeholder=\"Tell us a little bit about your work experience, outside of drone services. What industry do you work in and how long have you been in that industry?\"\r\n              />\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth sx={{ mb: 2 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Insurance Coverage:\r\n              </Typography>\r\n              <FormGroup>\r\n                {[\r\n                  'Commercial Liability Insurance',\r\n                  'Workers Compensation Insurance',\r\n                  'Property Damage Insurance',\r\n                  'Accident Insurance',\r\n                  'Other/Custom Insurance',\r\n                ].map(insurance => (\r\n                  <Box key={insurance} sx={{ mb: 2 }}>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={formData.insuranceCoverage.some(item =>\r\n                            item.startsWith(insurance)\r\n                          )}\r\n                          onChange={e => {\r\n                            if (e.target.checked) {\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                insuranceCoverage: [\r\n                                  ...prev.insuranceCoverage.filter(\r\n                                    item => !item.startsWith(insurance)\r\n                                  ),\r\n                                  insurance,\r\n                                ],\r\n                              }));\r\n                            } else {\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                insuranceCoverage: prev.insuranceCoverage.filter(\r\n                                  item => !item.startsWith(insurance)\r\n                                ),\r\n                              }));\r\n                            }\r\n                          }}\r\n                        />\r\n                      }\r\n                      label={insurance}\r\n                    />\r\n                    {formData.insuranceCoverage.some(item => item.startsWith(insurance)) && (\r\n                      <Box sx={{ ml: 4, mt: 1 }}>\r\n                        <FormControl size=\"small\" sx={{ minWidth: 200 }}>\r\n                          <InputLabel>Coverage Amount</InputLabel>\r\n                          <Select\r\n                            value={\r\n                              formData.insuranceCoverage\r\n                                .find(item => item.startsWith(insurance))\r\n                                ?.split(' - ')[1] || ''\r\n                            }\r\n                            onChange={e => {\r\n                              const amount = e.target.value;\r\n                              setFormData(prev => ({\r\n                                ...prev,\r\n                                insuranceCoverage: [\r\n                                  ...prev.insuranceCoverage.filter(\r\n                                    item => !item.startsWith(insurance)\r\n                                  ),\r\n                                  `${insurance} - ${amount}`,\r\n                                ],\r\n                              }));\r\n                            }}\r\n                            label=\"Coverage Amount\"\r\n                          >\r\n                            <MenuItem value=\"$100,000\">$100,000</MenuItem>\r\n                            <MenuItem value=\"$250,000\">$250,000</MenuItem>\r\n                            <MenuItem value=\"$500,000\">$500,000</MenuItem>\r\n                            <MenuItem value=\"$1,000,000\">$1,000,000</MenuItem>\r\n                            <MenuItem value=\"$2,000,000\">$2,000,000</MenuItem>\r\n                            <MenuItem value=\"$5,000,000\">$5,000,000</MenuItem>\r\n                            <MenuItem value=\"Other\">Other Amount</MenuItem>\r\n                          </Select>\r\n                        </FormControl>\r\n                      </Box>\r\n                    )}\r\n                  </Box>\r\n                ))}\r\n              </FormGroup>\r\n            </FormControl>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Availability & Travel Preferences:\r\n              </Typography>\r\n\r\n              <FormControl component=\"fieldset\" sx={{ mb: 2 }}>\r\n                <FormLabel component=\"legend\">\r\n                  Current work schedule and availability for drone operations:\r\n                </FormLabel>\r\n                <RadioGroup\r\n                  value={formData.availabilityType}\r\n                  onChange={e => handleInputChange('availabilityType', e.target.value)}\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"immediate\"\r\n                    control={<Radio />}\r\n                    label=\"Immediately available - drone operations are my primary focus\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"flexible\"\r\n                    control={<Radio />}\r\n                    label=\"Flexible schedule - can accommodate most project timelines\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"evenings-weekends\"\r\n                    control={<Radio />}\r\n                    label=\"Evenings and weekends - have other work commitments\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"project-based\"\r\n                    control={<Radio />}\r\n                    label=\"Project-based - available with advance notice\"\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n              <FormControl fullWidth sx={{ mb: 2 }}>\r\n                <InputLabel>Travel Range & Commitment</InputLabel>\r\n                <Select\r\n                  value={formData.serviceRadius}\r\n                  onChange={e => handleInputChange('serviceRadius', e.target.value)}\r\n                  label=\"Travel Range & Commitment\"\r\n                >\r\n                  <MenuItem value=\"local\">Local area only (within 25 miles)</MenuItem>\r\n                  <MenuItem value=\"regional\">Regional day trips (within 100 miles)</MenuItem>\r\n                  <MenuItem value=\"state\">Statewide - willing to travel same-day</MenuItem>\r\n                  <MenuItem value=\"multi-state\">Multi-state - willing to stay overnight</MenuItem>\r\n                  <MenuItem value=\"extended\">\r\n                    Extended assignments - willing to relocate temporarily for projects\r\n                  </MenuItem>\r\n                  <MenuItem value=\"national\">\r\n                    National - available for long-term travel assignments\r\n                  </MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl component=\"fieldset\" sx={{ mb: 2 }}>\r\n                <FormLabel component=\"legend\">Short-notice availability:</FormLabel>\r\n                <RadioGroup\r\n                  value={formData.shortNoticeAvailability || ''}\r\n                  onChange={e =>\r\n                    setFormData(prev => ({ ...prev, shortNoticeAvailability: e.target.value }))\r\n                  }\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"same-day\"\r\n                    control={<Radio />}\r\n                    label=\"Same-day availability for urgent projects\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"24-hours\"\r\n                    control={<Radio />}\r\n                    label=\"24-48 hours notice preferred\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"week\"\r\n                    control={<Radio />}\r\n                    label=\"1 week advance notice required\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"planning\"\r\n                    control={<Radio />}\r\n                    label=\"Prefer planned projects with 2+ weeks notice\"\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </Box>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Services You Can Provide:\r\n              </Typography>\r\n              <Box sx={{ mb: 2 }}>\r\n                {formData.servicesOffered?.map((service, index) => (\r\n                  <Chip\r\n                    key={index}\r\n                    label={service}\r\n                    onDelete={() => {\r\n                      setFormData(prev => ({\r\n                        ...prev,\r\n                        servicesOffered: prev.servicesOffered.filter((_, i) => i !== index),\r\n                      }));\r\n                    }}\r\n                    sx={{ mr: 1, mb: 1 }}\r\n                    color=\"primary\"\r\n                  />\r\n                ))}\r\n              </Box>\r\n\r\n              <FormControl fullWidth sx={{ mb: 2 }}>\r\n                <InputLabel>Add Service</InputLabel>\r\n                <Select\r\n                  value=\"\"\r\n                  onChange={e => {\r\n                    const service = e.target.value;\r\n                    if (service === 'custom') {\r\n                      setEquipmentDialogs(prev => ({ ...prev, customService: true }));\r\n                    } else if (service && !formData.servicesOffered?.includes(service)) {\r\n                      setFormData(prev => ({\r\n                        ...prev,\r\n                        servicesOffered: [...(prev.servicesOffered || []), service],\r\n                      }));\r\n                    }\r\n                  }}\r\n                  label=\"Add Service\"\r\n                >\r\n                  <MenuItem value=\"Solar Panel Inspection\">Solar Panel Inspection</MenuItem>\r\n                  <MenuItem value=\"Roof Inspection\">Roof Inspection</MenuItem>\r\n                  <MenuItem value=\"Construction Site Monitoring\">\r\n                    Construction Site Monitoring\r\n                  </MenuItem>\r\n                  <MenuItem value=\"Real Estate Photography\">Real Estate Photography</MenuItem>\r\n                  <MenuItem value=\"Infrastructure Inspection\">Infrastructure Inspection</MenuItem>\r\n                  <MenuItem value=\"Agricultural Monitoring\">Agricultural Monitoring</MenuItem>\r\n                  <MenuItem value=\"Thermal Imaging Services\">Thermal Imaging Services</MenuItem>\r\n                  <MenuItem value=\"Mapping & Surveying\">Mapping & Surveying</MenuItem>\r\n                  <MenuItem value=\"Search & Rescue\">Search & Rescue</MenuItem>\r\n                  <MenuItem value=\"Event Photography/Videography\">\r\n                    Event Photography/Videography\r\n                  </MenuItem>\r\n                  <MenuItem value=\"custom\">Other/Custom Service</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Box>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>\r\n                Additional Information:\r\n              </Typography>\r\n              <TextField\r\n                fullWidth\r\n                multiline\r\n                rows={3}\r\n                value={formData.additionalInfo || ''}\r\n                onChange={e => setFormData(prev => ({ ...prev, additionalInfo: e.target.value }))}\r\n                placeholder=\"Please share any additional qualifications, specialized experience, or relevant information that would help us understand your capabilities as a drone pilot.\"\r\n                variant=\"outlined\"\r\n              />\r\n            </Box>\r\n          </Box>\r\n        );\r\n\r\n      case 4:\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Review & Submit\r\n            </Typography>\r\n\r\n            <Alert severity=\"info\" sx={{ mb: 3 }}>\r\n              Please review your information below. You can go back to make changes if needed.\r\n            </Alert>\r\n\r\n            <Card sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" color=\"primary\">\r\n                  Personal Information\r\n                </Typography>\r\n                <Typography>\r\n                  Name: {formData.firstName} {formData.lastName}\r\n                </Typography>\r\n                <Typography>Email: {formData.email}</Typography>\r\n                <Typography>Phone: {formData.phone}</Typography>\r\n                <Typography>\r\n                  Location: {formData.city}, {formData.state} {formData.zipCode}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" color=\"primary\">\r\n                  Licensing\r\n                </Typography>\r\n                <Typography>Part 107 License: {formData.part107License}</Typography>\r\n                {formData.licenseNumber && (\r\n                  <Typography>License #: {formData.licenseNumber}</Typography>\r\n                )}\r\n                <Typography>\r\n                  Additional Certifications: {formData.additionalCertifications.length} selected\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" color=\"primary\">\r\n                  Equipment\r\n                </Typography>\r\n                <Typography>Drone Models: {formData.droneModels.length} selected</Typography>\r\n                <Typography>\r\n                  Camera Equipment: {formData.cameraEquipment.length} selected\r\n                </Typography>\r\n                <Typography>\r\n                  Additional Equipment: {formData.additionalInventory.length} selected\r\n                </Typography>\r\n                <Typography>\r\n                  Image Processing: {formData.imageProcessingApproach || 'Not specified'}\r\n                </Typography>\r\n                <Typography>\r\n                  Software Licenses: {formData.softwareLicenses.length} selected\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card sx={{ mb: 2 }}>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" color=\"primary\">\r\n                  Work Experience & Insurance\r\n                </Typography>\r\n                <Typography>\r\n                  Work Experience: {formData.workExperience || 'Not specified'}\r\n                </Typography>\r\n                <Typography>Insurance Coverage: {formData.insuranceCoverage.join(', ')}</Typography>\r\n                <Typography>\r\n                  Uploaded Documents: {formData.uploadedDocuments.length} files\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card sx={{ mb: 3 }}>\r\n              <CardContent>\r\n                <Typography variant=\"h6\" color=\"primary\">\r\n                  Services & Availability\r\n                </Typography>\r\n                <Typography>Availability: {formData.availabilityType}</Typography>\r\n                <Typography>Service Radius: {formData.serviceRadius}</Typography>\r\n                <Typography>\r\n                  Services Offered: {formData.servicesOffered.length} selected\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={formData.backgroundCheck}\r\n                    onChange={e => handleInputChange('backgroundCheck', e.target.checked)}\r\n                    required\r\n                  />\r\n                }\r\n                label=\"I consent to a background check if required for certain projects\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={formData.termsAccepted}\r\n                    onChange={e => handleInputChange('termsAccepted', e.target.checked)}\r\n                    required\r\n                  />\r\n                }\r\n                label=\"I accept the Terms of Service and Privacy Policy\"\r\n              />\r\n            </FormGroup>\r\n          </Box>\r\n        );\r\n\r\n      default:\r\n        return 'Unknown step';\r\n    }\r\n  };\r\n\r\n  const isStepValid = step => {\r\n    switch (step) {\r\n      case 0:\r\n        return formData.firstName && formData.lastName && formData.email && formData.phone;\r\n      case 1:\r\n        if (formData.part107License === 'yes') {\r\n          // Check if license number and issue date are provided\r\n          const basicRequirements = formData.licenseNumber && formData.licenseIssueDate;\r\n\r\n          if (!basicRequirements) return false;\r\n\r\n          // If license is more than 2 years old, check recurrent requirements\r\n          const issueDate = new Date(formData.licenseIssueDate);\r\n          const twoYearsAgo = new Date();\r\n          twoYearsAgo.setFullYear(twoYearsAgo.getFullYear() - 2);\r\n\r\n          if (issueDate <= twoYearsAgo) {\r\n            // Need either recurrent cert number OR promise to complete\r\n            return formData.recurrentCertNumber || formData.willGetRecurrentBeforeFlying;\r\n          }\r\n\r\n          return true;\r\n        }\r\n        return formData.part107License;\r\n      case 2:\r\n        return formData.droneModels.length > 0; // Equipment - at least one drone required\r\n      case 3:\r\n        return (\r\n          formData.insuranceCoverage.length > 0 &&\r\n          formData.availabilityType &&\r\n          formData.serviceRadius &&\r\n          formData.servicesOffered?.length > 0\r\n        ); // Work experience, insurance, and availability required\r\n      case 4:\r\n        return formData.backgroundCheck && formData.termsAccepted;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" sx={{ py: 4 }}>\r\n      {/* Header */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>\r\n        <Button startIcon={<ArrowBack />} onClick={() => navigate('/')} sx={{ mr: 2 }}>\r\n          Back to Home\r\n        </Button>\r\n        <Typography variant=\"h4\" component=\"h1\" sx={{ flexGrow: 1 }}>\r\n          Pilot Registration\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Paper elevation={3} sx={{ p: 4 }}>\r\n        {/* Progress Stepper */}\r\n        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\r\n          {steps.map(label => (\r\n            <Step key={label}>\r\n              <StepLabel>{label}</StepLabel>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n\r\n        {/* Progress Bar */}\r\n        <LinearProgress\r\n          variant=\"determinate\"\r\n          value={(activeStep / (steps.length - 1)) * 100}\r\n          sx={{ mb: 4 }}\r\n        />\r\n\r\n        {/* Step Content */}\r\n        <Box sx={{ minHeight: 400, mb: 4 }}>{renderStepContent(activeStep)}</Box>\r\n\r\n        {/* Navigation Buttons */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          <Button disabled={activeStep === 0} onClick={handleBack} startIcon={<ArrowBack />}>\r\n            Back\r\n          </Button>\r\n\r\n          {activeStep === steps.length - 1 ? (\r\n            <Button\r\n              onClick={handleSubmit}\r\n              variant=\"contained\"\r\n              startIcon={<CheckCircle />}\r\n              disabled={!isStepValid(activeStep)}\r\n              size=\"large\"\r\n            >\r\n              Submit Registration\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              onClick={handleNext}\r\n              variant=\"contained\"\r\n              endIcon={<ArrowForward />}\r\n              disabled={!isStepValid(activeStep)}\r\n            >\r\n              Next\r\n            </Button>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Feedback Section */}\r\n        <Box sx={{ mt: 3, pt: 3, borderTop: 1, borderColor: 'divider', textAlign: 'center' }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Having issues or suggestions for improvement?\r\n          </Typography>\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            onClick={() => setEquipmentDialogs(prev => ({ ...prev, feedback: true }))}\r\n            sx={{ color: 'text.secondary', borderColor: 'text.secondary' }}\r\n          >\r\n            Report Bug or Provide Feedback\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Equipment Dialogs */}\r\n      {/* Drone Models Dialog */}\r\n      <Dialog\r\n        open={equipmentDialogs.droneModels}\r\n        onClose={() => closeEquipmentDialog('droneModels')}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Drone Model</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Select from our list or add your own:\r\n          </Typography>\r\n\r\n          <Box sx={{ mb: 3 }}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Quantity\"\r\n              value={selectedQuantity}\r\n              onChange={e => setSelectedQuantity(Math.max(1, parseInt(e.target.value) || 1))}\r\n              inputProps={{ min: 1, max: 99 }}\r\n              sx={{ width: 120 }}\r\n            />\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mb: 2 }}>\r\n            {droneOptions.map(drone => {\r\n              const isAdded = formData.droneModels.some(item => item.startsWith(drone));\r\n              return (\r\n                <Button\r\n                  key={drone}\r\n                  variant=\"outlined\"\r\n                  onClick={() => handleAddFromDialog('droneModels', drone)}\r\n                  sx={{ justifyContent: 'flex-start' }}\r\n                  disabled={isAdded}\r\n                >\r\n                  {drone} {isAdded && '(Added)'}\r\n                </Button>\r\n              );\r\n            })}\r\n          </Box>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Equipment not listed? Enter here:\"\r\n            value={customEquipment}\r\n            onChange={e => setCustomEquipment(e.target.value)}\r\n            placeholder=\"e.g., Custom Build, Specific Model...\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => closeEquipmentDialog('droneModels')}>Cancel</Button>\r\n          <Button\r\n            onClick={() => handleAddFromDialog('droneModels', 'custom')}\r\n            disabled={!customEquipment.trim()}\r\n            variant=\"contained\"\r\n          >\r\n            Add Custom\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Camera Equipment Dialog */}\r\n      <Dialog\r\n        open={equipmentDialogs.cameraEquipment}\r\n        onClose={() => closeEquipmentDialog('cameraEquipment')}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Camera/Sensor Equipment</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Select from our list or add your own:\r\n          </Typography>\r\n\r\n          <Box sx={{ mb: 3 }}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Quantity\"\r\n              value={selectedQuantity}\r\n              onChange={e => setSelectedQuantity(Math.max(1, parseInt(e.target.value) || 1))}\r\n              inputProps={{ min: 1, max: 99 }}\r\n              sx={{ width: 120 }}\r\n            />\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mb: 2 }}>\r\n            {cameraOptions.map(camera => {\r\n              const isAdded = formData.cameraEquipment.some(item => item.startsWith(camera.name));\r\n              return (\r\n                <Button\r\n                  key={camera.name}\r\n                  variant=\"outlined\"\r\n                  onClick={() => handleAddFromDialog('cameraEquipment', camera.name)}\r\n                  sx={{ justifyContent: 'flex-start', textAlign: 'left', p: 2 }}\r\n                  disabled={isAdded}\r\n                >\r\n                  <Box>\r\n                    <Typography variant=\"subtitle2\">\r\n                      {camera.name} {isAdded && '(Added)'}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {camera.description}\r\n                    </Typography>\r\n                  </Box>\r\n                </Button>\r\n              );\r\n            })}\r\n          </Box>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Equipment not listed? Enter here:\"\r\n            value={customEquipment}\r\n            onChange={e => setCustomEquipment(e.target.value)}\r\n            placeholder=\"e.g., Custom sensor, Specific camera model...\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => closeEquipmentDialog('cameraEquipment')}>Cancel</Button>\r\n          <Button\r\n            onClick={() => handleAddFromDialog('cameraEquipment', 'custom')}\r\n            disabled={!customEquipment.trim()}\r\n            variant=\"contained\"\r\n          >\r\n            Add Custom\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Additional Inventory Dialog */}\r\n      <Dialog\r\n        open={equipmentDialogs.additionalInventory}\r\n        onClose={() => closeEquipmentDialog('additionalInventory')}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Additional Equipment</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n            Select mapping gear, accessories, remote drone operations equipment, and other\r\n            equipment:\r\n          </Typography>\r\n\r\n          <Box sx={{ mb: 3 }}>\r\n            <TextField\r\n              type=\"number\"\r\n              label=\"Quantity\"\r\n              value={selectedQuantity}\r\n              onChange={e => setSelectedQuantity(Math.max(1, parseInt(e.target.value) || 1))}\r\n              inputProps={{ min: 1, max: 99 }}\r\n              sx={{ width: 120 }}\r\n            />\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, mb: 2 }}>\r\n            {additionalInventoryOptions.map(item => {\r\n              const isAdded = formData.additionalInventory.some(equipmentItem =>\r\n                equipmentItem.startsWith(item)\r\n              );\r\n              return (\r\n                <Button\r\n                  key={item}\r\n                  variant=\"outlined\"\r\n                  onClick={() => handleAddFromDialog('additionalInventory', item)}\r\n                  sx={{ justifyContent: 'flex-start' }}\r\n                  disabled={isAdded}\r\n                >\r\n                  {item} {isAdded && '(Added)'}\r\n                </Button>\r\n              );\r\n            })}\r\n          </Box>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Equipment not listed? Enter here:\"\r\n            value={customEquipment}\r\n            onChange={e => setCustomEquipment(e.target.value)}\r\n            placeholder=\"e.g., Specific software, Custom gear...\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => closeEquipmentDialog('additionalInventory')}>Cancel</Button>\r\n          <Button\r\n            onClick={() => handleAddFromDialog('additionalInventory', 'custom')}\r\n            disabled={!customEquipment.trim()}\r\n            variant=\"contained\"\r\n          >\r\n            Add Custom\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Certifications Dialog */}\r\n      <Dialog\r\n        open={equipmentDialogs.additionalCertifications}\r\n        onClose={() => closeEquipmentDialog('additionalCertifications')}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Relevant Certification</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n            Please enter any certifications showing additional training or competency relevant to\r\n            drone operations. Examples include thermal imaging, construction inspection,\r\n            mapping/surveying, first aid, or industry-specific training.\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Certification Name\"\r\n            value={customEquipment}\r\n            onChange={e => setCustomEquipment(e.target.value)}\r\n            placeholder=\"e.g., Thermal Imaging Certification, First Aid/CPR, Construction Inspection...\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => closeEquipmentDialog('additionalCertifications')}>Cancel</Button>\r\n          <Button\r\n            onClick={() => handleAddFromDialog('additionalCertifications', 'custom')}\r\n            disabled={!customEquipment.trim()}\r\n            variant=\"contained\"\r\n          >\r\n            Add Certification\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Custom Software Dialog */}\r\n      <Dialog\r\n        open={equipmentDialogs.customSoftware}\r\n        onClose={() => setEquipmentDialogs(prev => ({ ...prev, customSoftware: false }))}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Custom Software Details</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n            Please describe the other/custom software you use for drone operations and image\r\n            processing.\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Software Description\"\r\n            value={customSoftwareDescription}\r\n            onChange={e => setCustomSoftwareDescription(e.target.value)}\r\n            multiline\r\n            rows={4}\r\n            placeholder=\"e.g., Custom Python scripts for photogrammetry, proprietary company software, open-source tools...\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEquipmentDialogs(prev => ({ ...prev, customSoftware: false }))}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              if (customSoftwareDescription.trim()) {\r\n                setFormData(prev => ({\r\n                  ...prev,\r\n                  customSoftwareDescription: customSoftwareDescription.trim(),\r\n                }));\r\n              }\r\n              setEquipmentDialogs(prev => ({ ...prev, customSoftware: false }));\r\n              setCustomSoftwareDescription('');\r\n            }}\r\n            variant=\"contained\"\r\n          >\r\n            Save Description\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Custom Service Dialog */}\r\n      <Dialog\r\n        open={equipmentDialogs.customService}\r\n        onClose={() => setEquipmentDialogs(prev => ({ ...prev, customService: false }))}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Add Custom Service</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n            Please describe the service you can provide that is not listed in our options.\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Service Name\"\r\n            value={customEquipment}\r\n            onChange={e => setCustomEquipment(e.target.value)}\r\n            placeholder=\"e.g., Pipeline Inspection, Mining Surveys, Wildlife Monitoring...\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEquipmentDialogs(prev => ({ ...prev, customService: false }))}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              if (\r\n                customEquipment.trim() &&\r\n                !formData.servicesOffered?.includes(customEquipment.trim())\r\n              ) {\r\n                setFormData(prev => ({\r\n                  ...prev,\r\n                  servicesOffered: [...(prev.servicesOffered || []), customEquipment.trim()],\r\n                }));\r\n              }\r\n              setEquipmentDialogs(prev => ({ ...prev, customService: false }));\r\n              setCustomEquipment('');\r\n            }}\r\n            disabled={!customEquipment.trim()}\r\n            variant=\"contained\"\r\n          >\r\n            Add Service\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Feedback Dialog */}\r\n      <Dialog\r\n        open={equipmentDialogs.feedback}\r\n        onClose={() => setEquipmentDialogs(prev => ({ ...prev, feedback: false }))}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Report Bug or Provide Feedback</DialogTitle>\r\n        <DialogContent>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n            Help us improve! Please describe any issues you encountered or suggestions you have for\r\n            the registration process.\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Your Feedback\"\r\n            value={formData.feedbackMessage || ''}\r\n            onChange={e => setFormData(prev => ({ ...prev, feedbackMessage: e.target.value }))}\r\n            multiline\r\n            rows={4}\r\n            placeholder=\"e.g., The form was confusing on step 2, I could not upload my file, I suggest adding...\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setEquipmentDialogs(prev => ({ ...prev, feedback: false }))}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              // Here you would typically send the feedback to your backend\r\n              setEquipmentDialogs(prev => ({ ...prev, feedback: false }));\r\n              setFormData(prev => ({ ...prev, feedbackMessage: '' }));\r\n              // You could show a success message here\r\n            }}\r\n            disabled={!formData.feedbackMessage?.trim()}\r\n            variant=\"contained\"\r\n          >\r\n            Submit Feedback\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default PilotRegistration;\r\n","size_bytes":74726},"pages/contact.tsx":{"content":"// ComplianceDrone Contact/Quote Request Page\n// Professional contact form for service inquiries and quotes\n\nimport type { NextPage } from \"next\";\nimport Head from \"next/head\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\nimport { validateEmail, validatePhone } from \"../lib/authUtils\";\n\ninterface ContactForm {\n  // Company Information\n  companyName: string;\n  contactName: string;\n  email: string;\n  phoneNumber: string;\n  \n  // Service Details\n  serviceType: 'thermal_inspection' | 'solar_panel_inspection' | 'electrical_inspection' | 'construction_monitoring' | 'other';\n  projectLocation: string;\n  projectSize: string;\n  urgency: 'asap' | 'within_week' | 'within_month' | 'flexible';\n  \n  // Budget and Requirements\n  budgetRange: 'under_5k' | '5k_15k' | '15k_50k' | '50k_plus' | 'discuss';\n  projectDescription: string;\n  specificRequirements: string;\n}\n\nconst initialForm: ContactForm = {\n  companyName: '',\n  contactName: '',\n  email: '',\n  phoneNumber: '',\n  serviceType: 'thermal_inspection',\n  projectLocation: '',\n  projectSize: '',\n  urgency: 'flexible',\n  budgetRange: 'discuss',\n  projectDescription: '',\n  specificRequirements: ''\n};\n\nconst SERVICE_TYPES = [\n  { value: 'thermal_inspection', label: 'Thermal Inspection' },\n  { value: 'solar_panel_inspection', label: 'Solar Panel Inspection' },\n  { value: 'electrical_inspection', label: 'Electrical Infrastructure Inspection' },\n  { value: 'construction_monitoring', label: 'Construction Site Monitoring' },\n  { value: 'other', label: 'Other Services' }\n];\n\nconst URGENCY_OPTIONS = [\n  { value: 'asap', label: 'ASAP (Within 48 hours)' },\n  { value: 'within_week', label: 'Within a week' },\n  { value: 'within_month', label: 'Within a month' },\n  { value: 'flexible', label: 'Flexible timeline' }\n];\n\nconst BUDGET_RANGES = [\n  { value: 'under_5k', label: 'Under $5,000' },\n  { value: '5k_15k', label: '$5,000 - $15,000' },\n  { value: '15k_50k', label: '$15,000 - $50,000' },\n  { value: '50k_plus', label: '$50,000+' },\n  { value: 'discuss', label: 'Prefer to discuss' }\n];\n\nconst Contact: NextPage = () => {\n  const [formData, setFormData] = useState<ContactForm>(initialForm);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n\n  const validateForm = (): Record<string, string> => {\n    const newErrors: Record<string, string> = {};\n\n    // Basic validation\n    if (!formData.contactName.trim()) newErrors.contactName = \"Contact name is required\";\n    if (!formData.companyName.trim()) newErrors.companyName = \"Company name is required\";\n    \n    const emailError = validateEmail(formData.email);\n    if (emailError) newErrors.email = emailError;\n    \n    const phoneError = validatePhone(formData.phoneNumber);\n    if (phoneError) newErrors.phoneNumber = phoneError;\n\n    if (!formData.projectLocation.trim()) newErrors.projectLocation = \"Project location is required\";\n    if (!formData.projectDescription.trim()) newErrors.projectDescription = \"Project description is required\";\n\n    return newErrors;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setErrors({});\n\n    const formErrors = validateForm();\n    if (Object.keys(formErrors).length > 0) {\n      setErrors(formErrors);\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      // For now, we'll just simulate a successful submission\n      // In production, this would send to a backend API\n      setTimeout(() => {\n        setSubmitSuccess(true);\n      }, 1500);\n    } catch (error) {\n      setErrors({ submit: 'Network error. Please try again.' });\n      setIsSubmitting(false);\n    }\n  };\n\n  if (submitSuccess) {\n    return (\n      <>\n        <Head>\n          <title>Quote Request Submitted - ComplianceDrone</title>\n        </Head>\n\n        {/* Header */}\n        <header className=\"gradient-bg text-white\">\n          <div className=\"cd-container\">\n            <nav className=\"flex items-center justify-between py-6\">\n              <div className=\"flex items-center space-x-3\">\n                <Image \n                  src=\"/compliance-drone-shield-logo.png\" \n                  alt=\"ComplianceDrone Logo\" \n                  width={50} \n                  height={50}\n                  priority\n                  className=\"rounded-lg\"\n                />\n                <h1 className=\"text-2xl font-bold\">ComplianceDrone</h1>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Link href=\"/\" className=\"hover:text-gray-200 transition-colors\">\n                  Home\n                </Link>\n              </div>\n            </nav>\n          </div>\n        </header>\n\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n          <div className=\"text-center max-w-md mx-auto p-6\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Quote Request Submitted!</h2>\n            <p className=\"text-gray-600 mb-4\">\n              Thank you for your interest in ComplianceDrone services. Our team will review your requirements and contact you within 24 hours with a detailed quote.\n            </p>\n            <div className=\"space-y-3\">\n              <Link href=\"/\" className=\"btn-primary block\">\n                Return to Home\n              </Link>\n              <Link href=\"/contact\" className=\"btn-secondary block\">\n                Submit Another Request\n              </Link>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Request a Quote - ComplianceDrone</title>\n        <meta name=\"description\" content=\"Get a professional quote for thermal inspection and aerial construction management services from ComplianceDrone\" />\n        <meta name=\"keywords\" content=\"thermal inspection quote, drone services pricing, aerial construction management\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      {/* Header */}\n      <header className=\"gradient-bg text-white\">\n        <div className=\"cd-container\">\n          <nav className=\"flex items-center justify-between py-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Image \n                src=\"/compliance-drone-shield-logo.png\" \n                alt=\"ComplianceDrone Logo\" \n                width={50} \n                height={50}\n                priority\n                className=\"rounded-lg\"\n              />\n              <h1 className=\"text-2xl font-bold\">ComplianceDrone</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\" className=\"hover:text-gray-200 transition-colors\">\n                Home\n              </Link>\n            </div>\n          </nav>\n        </div>\n      </header>\n\n      <main className=\"min-h-screen bg-gray-50 py-12\">\n        <div className=\"cd-container max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-4xl font-bold text-gradient mb-4\">\n              Request a Professional Quote\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Get a customized quote for your thermal inspection and aerial construction management needs\n            </p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"card\">\n            {errors.submit && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n                <p className=\"text-red-600\">{errors.submit}</p>\n              </div>\n            )}\n\n            {/* Contact Information */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Contact Information\n              </h3>\n              <div className=\"cd-grid cd-grid-2 gap-6\">\n                <div>\n                  <label className=\"form-label\">\n                    Contact Name *\n                  </label>\n                  <input\n                    type=\"text\"\n                    className={`form-input ${errors.contactName ? 'border-red-300' : ''}`}\n                    value={formData.contactName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, contactName: e.target.value }))}\n                    placeholder=\"Your full name\"\n                    required\n                  />\n                  {errors.contactName && <p className=\"form-error\">{errors.contactName}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Company Name *\n                  </label>\n                  <input\n                    type=\"text\"\n                    className={`form-input ${errors.companyName ? 'border-red-300' : ''}`}\n                    value={formData.companyName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, companyName: e.target.value }))}\n                    placeholder=\"Your company name\"\n                    required\n                  />\n                  {errors.companyName && <p className=\"form-error\">{errors.companyName}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Email Address *\n                  </label>\n                  <input\n                    type=\"email\"\n                    className={`form-input ${errors.email ? 'border-red-300' : ''}`}\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"your.email@company.com\"\n                    required\n                  />\n                  {errors.email && <p className=\"form-error\">{errors.email}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Phone Number *\n                  </label>\n                  <input\n                    type=\"tel\"\n                    className={`form-input ${errors.phoneNumber ? 'border-red-300' : ''}`}\n                    value={formData.phoneNumber}\n                    onChange={(e) => setFormData(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                    placeholder=\"(555) 123-4567\"\n                    required\n                  />\n                  {errors.phoneNumber && <p className=\"form-error\">{errors.phoneNumber}</p>}\n                </div>\n              </div>\n            </section>\n\n            {/* Service Requirements */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Service Requirements\n              </h3>\n              \n              <div className=\"cd-grid cd-grid-2 gap-6 mb-6\">\n                <div>\n                  <label className=\"form-label\">\n                    Service Type *\n                  </label>\n                  <select\n                    className=\"form-input\"\n                    value={formData.serviceType}\n                    onChange={(e) => setFormData(prev => ({ ...prev, serviceType: e.target.value as any }))}\n                    required\n                  >\n                    {SERVICE_TYPES.map(type => (\n                      <option key={type.value} value={type.value}>{type.label}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Timeline *\n                  </label>\n                  <select\n                    className=\"form-input\"\n                    value={formData.urgency}\n                    onChange={(e) => setFormData(prev => ({ ...prev, urgency: e.target.value as any }))}\n                    required\n                  >\n                    {URGENCY_OPTIONS.map(option => (\n                      <option key={option.value} value={option.value}>{option.label}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Project Location *\n                  </label>\n                  <input\n                    type=\"text\"\n                    className={`form-input ${errors.projectLocation ? 'border-red-300' : ''}`}\n                    value={formData.projectLocation}\n                    onChange={(e) => setFormData(prev => ({ ...prev, projectLocation: e.target.value }))}\n                    placeholder=\"City, State\"\n                    required\n                  />\n                  {errors.projectLocation && <p className=\"form-error\">{errors.projectLocation}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Budget Range\n                  </label>\n                  <select\n                    className=\"form-input\"\n                    value={formData.budgetRange}\n                    onChange={(e) => setFormData(prev => ({ ...prev, budgetRange: e.target.value as any }))}\n                  >\n                    {BUDGET_RANGES.map(range => (\n                      <option key={range.value} value={range.value}>{range.label}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"cd-grid-span-2\">\n                  <label className=\"form-label\">\n                    Project Size/Scope\n                  </label>\n                  <input\n                    type=\"text\"\n                    className=\"form-input\"\n                    value={formData.projectSize}\n                    onChange={(e) => setFormData(prev => ({ ...prev, projectSize: e.target.value }))}\n                    placeholder=\"e.g., 500 MW solar farm, 10-story building, 50-acre site\"\n                  />\n                </div>\n              </div>\n            </section>\n\n            {/* Project Details */}\n            <section className=\"mb-8\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4 border-b pb-2\">\n                Project Details\n              </h3>\n              \n              <div className=\"space-y-6\">\n                <div>\n                  <label className=\"form-label\">\n                    Project Description *\n                  </label>\n                  <textarea\n                    className={`form-textarea ${errors.projectDescription ? 'border-red-300' : ''}`}\n                    rows={4}\n                    value={formData.projectDescription}\n                    onChange={(e) => setFormData(prev => ({ ...prev, projectDescription: e.target.value }))}\n                    placeholder=\"Please describe your project, the issues you're facing, and what you hope to achieve with our services...\"\n                    required\n                  />\n                  {errors.projectDescription && <p className=\"form-error\">{errors.projectDescription}</p>}\n                </div>\n\n                <div>\n                  <label className=\"form-label\">\n                    Specific Requirements or Concerns\n                  </label>\n                  <textarea\n                    className=\"form-textarea\"\n                    rows={3}\n                    value={formData.specificRequirements}\n                    onChange={(e) => setFormData(prev => ({ ...prev, specificRequirements: e.target.value }))}\n                    placeholder=\"Any specific technical requirements, safety concerns, or compliance needs...\"\n                  />\n                </div>\n              </div>\n            </section>\n\n            {/* Submit Button */}\n            <div className=\"text-center pt-6\">\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className={`btn-primary-large ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}\n              >\n                {isSubmitting ? 'Submitting Quote Request...' : 'Request Quote'}\n              </button>\n              <p className=\"text-sm text-gray-500 mt-4\">\n                Our team will review your requirements and contact you within 24 hours\n              </p>\n            </div>\n          </form>\n        </div>\n      </main>\n    </>\n  );\n};\n\nexport default Contact;","size_bytes":16652},"backup_compliancedrone/replit.md":{"content":"# ComplianceDrone.com - Thermal Inspection Platform\n\n## Overview\nComplianceDrone.com is a professional thermal inspection platform that uses AI-powered drone technology to detect thermal anomalies in solar installations and electrical infrastructure. The platform processes 100+ thermal images and generates comprehensive PDF reports in under 5 minutes.\n\n## Project Architecture\n- **Frontend**: Next.js 15 with TypeScript and Tailwind CSS\n- **Language**: Node.js 20\n- **Styling**: Custom CSS with gradient branding and professional design\n- **Images**: Real thermal inspection photos from drone operations\n\n## Key Features\n- AI-powered thermal anomaly detection (trained on 4,000+ thermal images)\n- Automated processing of up to 500 thermal images\n- GPS coordinate mapping for maintenance scheduling\n- Professional PDF report generation\n- Certified pilot network integration\n\n## Brand Colors\n- Primary Orange: #D97706 (sunset orange)\n- Secondary Orange: #FB923C (sunset peach)  \n- Primary Blue: #475569 (blue-gray dark)\n- Secondary Blue: #64748B (blue-gray light)\n- Accent Grey: #6B7280 (slate blue)\n\n## Recent Changes\n- **September 16, 2025**: Initial project setup with professional thermal inspection branding\n- ComplianceDrone homepage with real thermal inspection images\n- Professional gradient design system implemented\n- Hero section showcasing large-scale solar installation capabilities\n\n## User Preferences\n- Professional, corporate design aesthetic\n- Real inspection images over stock photos\n- Fast loading performance for image-heavy content\n- Mobile-responsive design for field use\n\n## Services Offered\n1. **Electrical Infrastructure Inspection**: Detect overheating switches, transformers, and connections\n2. **Solar Panel Array Analysis**: Identify hot spots, cell failures, and module defects\n3. **Anomaly Detection**: Precise thermal mapping with GPS coordinates\n\n## Technology Stack\n- Next.js for server-side rendering and performance\n- TypeScript for type safety\n- Tailwind CSS for responsive design\n- Professional thermal inspection imagery\n- Automated workflow processing capabilities","size_bytes":2105},"backup_compliancedrone/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        'compliance-orange': '#D97706',\n        'compliance-peach': '#FB923C',\n        'compliance-blue-dark': '#475569',\n        'compliance-blue': '#64748B',\n        'compliance-slate': '#6B7280',\n        'compliance-warm': '#78716C',\n      },\n      fontFamily: {\n        sans: ['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif'],\n      },\n      backgroundImage: {\n        'gradient-compliance': 'linear-gradient(135deg, #475569 0%, #6B7280 35%, #FB923C 100%)',\n        'gradient-orange': 'linear-gradient(135deg, #D97706, #FB923C)',\n        'gradient-blue': 'linear-gradient(135deg, #475569, #64748B)',\n      },\n      boxShadow: {\n        'compliance': '0 4px 14px 0 rgba(217, 119, 6, 0.3)',\n        'compliance-hover': '0 6px 20px 0 rgba(217, 119, 6, 0.4)',\n      }\n    },\n  },\n  plugins: [],\n}","size_bytes":1067},"integrations.config.tsx":{"content":"const integrations = {\n  isSanityEnabled: false,\n  isStripeEnabled: true,\n  isOpenAIEnabled: true,\n  isMailchimpEnabled: true,\n  isAuthEnabled: true,\n};\n\nconst messages = {\n  sanity: (\n    <div style={{ whiteSpace: \"pre-wrap\" }}>\n      Sanity is not enabled. Follow the{\" \"}\n      <a\n        href=\"https://nextjstemplates.com/docs/enableintegration\"\n        className=\"text-primary underline\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        documentation\n      </a>{\" \"}\n      to enable it.\n    </div>\n  ),\n  stripe: (\n    <div style={{ whiteSpace: \"pre-wrap\" }}>\n      Stripe is not enabled. Follow the{\" \"}\n      <a\n        href=\"https://nextjstemplates.com/docs/enableintegration\"\n        className=\"text-primary underline\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        documentation\n      </a>{\" \"}\n      to enable it.\n    </div>\n  ),\n  opanAi: (\n    <div style={{ whiteSpace: \"pre-wrap\" }}>\n      OpenAI is not enabled. Follow the{\" \"}\n      <a\n        href=\"https://nextjstemplates.com/docs/enableintegration\"\n        className=\"text-primary underline\"\n      >\n        documentation\n      </a>{\" \"}\n      to enable it.\n    </div>\n  ),\n  mailchimp: (\n    <div style={{ whiteSpace: \"pre-wrap\" }}>\n      Mailchimp is not enabled. Follow the {\"\"}\n      <a\n        href=\"https://nextjstemplates.com/docs/enableintegration\"\n        className=\"text-primary underline\"\n      >\n        documentation\n      </a>{\" \"}\n      to enable it.\n    </div>\n  ),\n  auth: (\n    <div style={{ whiteSpace: \"pre-wrap\" }}>\n      Auth is not enabled. Follow the{\" \"}\n      <a\n        href=\"https://nextjstemplates.com/docs/enableintegration\"\n        className=\"text-primary underline\"\n      >\n        documentation\n      </a>{\" \"}\n      to enable it.\n    </div>\n  ),\n\n  // Add more messages here\n};\n\nexport { integrations, messages };\n","size_bytes":1869},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst { env } = require('process');\n\nconst nextConfig = {\n  allowedDevOrigins: process.env.REPLIT_DOMAINS ? [process.env.REPLIT_DOMAINS.split(',')[0]] : [],\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'cdn.sanity.io',\n        port: '',\n      },\n    ],\n  },\n};\n\nmodule.exports = nextConfig;\n","size_bytes":374},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    '@tailwindcss/postcss': {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":93},"sanity.config.ts":{"content":"import schemas from \"@/sanity/schemas\";\nimport { defineConfig } from \"sanity\";\nimport { structureTool } from \"sanity/structure\";\n\nconst config = defineConfig({\n  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID!,\n  dataset: \"production\",\n  title: process.env.NEXT_PUBLIC_SANITY_PROJECT_TITLE!,\n  apiVersion: \"2023-03-09\",\n  basePath: \"/admin\",\n  plugins: [structureTool()],\n  schema: { types: schemas },\n});\n\nexport default config;\n","size_bytes":436},"stripe/pricingData.ts":{"content":"export const pricingData = [\n  {\n    id: \"price_1NQk5TLtGdPVhGLecVfQ7mn0\",\n    unit_amount: 100 * 100,\n    nickname: \"Small\",\n  },\n  {\n    id: \"price_1NQk55LtGdPVhGLefU8AHqHr\",\n    unit_amount: 200 * 100,\n    nickname: \"Medium\",\n  },\n  {\n    id: \"price_1NQk4eLtGdPVhGLeZsZDsCNz\",\n    unit_amount: 300 * 100,\n    nickname: \"Large\",\n  },\n];\n","size_bytes":339},"src/app/sitemap.js":{"content":"export default async function sitemap() {\n  const routes = [\"\", \"/about\", \"/pricing\", \"/blog\"].map((route) => ({\n    url: `${process.env.SITE_URL}${route}`,\n    lastModified: new Date().toISOString(),\n  }));\n\n  return [...routes];\n}\n","size_bytes":233},"src/assets/icons.tsx":{"content":"type IconProps = React.SVGProps<SVGSVGElement>;\n\nexport function LinkedinIcon(props: IconProps) {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      fill='currentColor'\n      xmlns='http://www.w3.org/2000/svg'\n      {...props}\n    >\n      <g clipPath='url(#clip0_141_17422)'>\n        <path\n          d='M21.9381 0.375H2.10059C1.16309 0.375 0.413086 1.125 0.413086 2.0625V21.9375C0.413086 22.8375 1.16309 23.625 2.10059 23.625H21.8631C22.8006 23.625 23.5506 22.875 23.5506 21.9375V2.025C23.6256 1.125 22.8756 0.375 21.9381 0.375ZM7.2756 20.1375H3.8631V9.075H7.2756V20.1375ZM5.5506 7.5375C4.4256 7.5375 3.56309 6.6375 3.56309 5.55C3.56309 4.4625 4.4631 3.5625 5.5506 3.5625C6.6381 3.5625 7.5381 4.4625 7.5381 5.55C7.5381 6.6375 6.7131 7.5375 5.5506 7.5375ZM20.2131 20.1375H16.8006V14.775C16.8006 13.5 16.7631 11.8125 15.0006 11.8125C13.2006 11.8125 12.9381 13.2375 12.9381 14.6625V20.1375H9.5256V9.075H12.8631V10.6125H12.9006C13.3881 9.7125 14.4756 8.8125 16.1631 8.8125C19.6506 8.8125 20.2881 11.0625 20.2881 14.1375V20.1375H20.2131Z'\n          fill=''\n        />\n      </g>\n      <defs>\n        <clipPath id='clip0_141_17422'>\n          <rect width='24' height='24' fill='white' />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n}\n\nexport function TwitterIcon(props: IconProps) {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      fill='currentColor'\n      xmlns='http://www.w3.org/2000/svg'\n      {...props}\n    >\n      <path\n        d='M7.6125 21.5249C16.4625 21.5249 21.2625 14.2123 21.2625 7.87485C21.2625 7.72485 21.2625 7.46235 21.225 7.23735C22.1625 6.56235 22.9875 5.69985 23.625 4.76235C22.725 5.17485 21.825 5.39985 20.8875 5.51235C21.9 4.91235 22.65 3.97485 22.9875 2.84985C22.05 3.37485 21.075 3.78735 19.9125 4.01235C19.0125 3.07485 17.8125 2.47485 16.425 2.47485C13.7625 2.47485 11.5875 4.64985 11.5875 7.31235C11.5875 7.68735 11.625 8.06235 11.7 8.43735C7.8375 8.17485 4.3125 6.26235 1.9125 3.37485C1.5 4.12485 1.275 4.91235 1.275 5.77485C1.275 7.46235 2.1375 8.88735 3.45 9.74985C2.6625 9.71235 1.9125 9.48735 1.275 9.14985C1.275 9.18735 1.275 9.18735 1.275 9.18735C1.275 11.4748 2.925 13.4624 5.1 13.9124C4.6875 14.0249 4.2375 14.0623 3.9 14.0623C3.6 14.0623 3.2625 14.0248 3 13.9499C3.6375 15.8624 5.4 17.2499 7.5 17.2874C5.85 18.5624 3.7875 19.3498 1.575 19.3498C1.125 19.4249 0.75 19.3498 0.375 19.3123C2.4 20.7374 4.9125 21.5249 7.6125 21.5249Z'\n        fill='#'\n      />\n    </svg>\n  );\n}\n\nexport function FacebookIcon(props: IconProps) {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      fill='currentColor'\n      xmlns='http://www.w3.org/2000/svg'\n      {...props}\n    >\n      <path\n        d='M13 21.9506C18.0533 21.4489 22 17.1853 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 16.8379 5.43552 20.8734 10 21.8V16H7V13H10V9.79586C10 7.47449 11.9695 5.64064 14.285 5.80603L17 5.99996V8.99996H15C13.8954 8.99996 13 9.89539 13 11V13H17L16 16H13V21.9506Z'\n        fill=''\n      />\n    </svg>\n  );\n}\n","size_bytes":3044},"src/data/pilotEquipmentData.ts":{"content":"// Equipment data for pilot registration dropdowns\n// Based on industry-standard thermal inspection equipment\n\nexport const droneModels = [\n  // DJI Enterprise\n  \"DJI Matrice 30T\",\n  \"DJI Matrice 300 RTK\",\n  \"DJI Mavic 3T\",\n  \"DJI Mavic 2 Enterprise Advanced\",\n  \"DJI Phantom 4 RTK\",\n  \"DJI Air 2S\",\n  \n  // Autel\n  \"Autel EVO II Dual 640T\",\n  \"Autel EVO II Pro RTK\",\n  \"Autel Alpha\",\n  \n  // Skydio\n  \"Skydio X2D\",\n  \"Skydio 2+\",\n  \n  // Parrot\n  \"Parrot ANAFI Thermal\",\n  \"Parrot ANAFI USA\",\n  \n  // Other/Custom\n  \"Other Professional Drone\",\n  \"Custom Build\"\n];\n\nexport const thermalCameraModels = [\n  // FLIR/Teledyne\n  \"FLIR Vue Pro R\",\n  \"FLIR Vue TZ20-R\",\n  \"FLIR Boson 640\",\n  \"FLIR Boson 320\",\n  \"Teledyne FLIR Hadron 640R\",\n  \n  // DJI Integrated\n  \"DJI Zenmuse H20T\",\n  \"DJI Zenmuse XT2\",\n  \"DJI Zenmuse H20N\",\n  \n  // Workswell\n  \"Workswell WIRIS Pro\",\n  \"Workswell WIRIS Security\",\n  \n  // Optris\n  \"Optris PI Connect\",\n  \"Optris PI 640\",\n  \n  // Other\n  \"Other Professional Thermal Camera\",\n  \"Multiple Camera Systems\"\n];\n\nexport const certificationTypes = [\n  {\n    id: \"part107\",\n    name: \"Part 107 Remote Pilot Certificate\",\n    required: true,\n    description: \"FAA Remote Pilot Certificate under Part 107\"\n  },\n  {\n    id: \"medical\",\n    name: \"Medical Certificate\",\n    required: false,\n    description: \"FAA Medical Certificate (if applicable)\"\n  },\n  {\n    id: \"liability_insurance\",\n    name: \"Liability Insurance\",\n    required: true,\n    description: \"Commercial liability insurance for drone operations\"\n  },\n  {\n    id: \"hull_insurance\",\n    name: \"Hull Insurance\",\n    required: false,\n    description: \"Equipment/hull insurance for drone hardware\"\n  }\n];\n\nexport const businessTypes = [\n  \"Individual/Sole Proprietor\",\n  \"LLC (Limited Liability Company)\", \n  \"Corporation\",\n  \"Partnership\",\n  \"Non-Profit Organization\"\n];\n\nexport const statesAndTerritories = [\n  \"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\",\n  \"Connecticut\", \"Delaware\", \"Florida\", \"Georgia\", \"Hawaii\", \"Idaho\",\n  \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\",\n  \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\",\n  \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\",\n  \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\",\n  \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\",\n  \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\",\n  \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\",\n  \"West Virginia\", \"Wisconsin\", \"Wyoming\", \"Washington DC\",\n  \"Puerto Rico\", \"US Virgin Islands\", \"American Samoa\", \"Guam\",\n  \"Northern Mariana Islands\"\n];\n\nexport const insuranceProviders = [\n  \"SkyWatch.AI\",\n  \"DroneInsurance.com\", \n  \"Avion Insurance\",\n  \"Unmanned Vehicle Insurance\",\n  \"Verifly\",\n  \"Global Aerospace\",\n  \"AIG\",\n  \"Chubb\",\n  \"Hartford\",\n  \"Travelers\",\n  \"Other/Custom Provider\"\n];\n\nexport const experienceLevels = [\n  { value: \"0\", label: \"New to thermal imaging\" },\n  { value: \"1\", label: \"1+ years experience\" },\n  { value: \"2\", label: \"2+ years experience\" }, \n  { value: \"3\", label: \"3+ years experience\" },\n  { value: \"5\", label: \"5+ years experience\" },\n  { value: \"10\", label: \"10+ years experience\" }\n];\n\nexport const flightHoursRanges = [\n  { value: \"0-50\", label: \"0-50 hours\" },\n  { value: \"50-100\", label: \"50-100 hours\" },\n  { value: \"100-250\", label: \"100-250 hours\" },\n  { value: \"250-500\", label: \"250-500 hours\" },\n  { value: \"500-1000\", label: \"500-1000 hours\" },\n  { value: \"1000+\", label: \"1000+ hours\" }\n];\n\nexport const maxTravelDistances = [\n  { value: \"25\", label: \"25 miles\" },\n  { value: \"50\", label: \"50 miles\" },\n  { value: \"100\", label: \"100 miles\" },\n  { value: \"200\", label: \"200 miles\" },\n  { value: \"500\", label: \"500 miles\" },\n  { value: \"nationwide\", label: \"Nationwide travel\" }\n];","size_bytes":3827},"src/libs/auth.ts":{"content":"import { prisma } from \"@/libs/prismaDB\";\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport bcrypt from \"bcrypt\";\nimport { type NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GitHubProvider from \"next-auth/providers/github\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport EmailProvider from \"next-auth/providers/email\";\n\nexport const authOptions: NextAuthOptions = {\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n  adapter: PrismaAdapter(prisma),\n  secret: process.env.SECRET,\n  session: {\n    strategy: \"jwt\",\n  },\n\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\", placeholder: \"Jhondoe\" },\n        password: { label: \"Password\", type: \"password\" },\n        username: { label: \"Username\", type: \"text\", placeholder: \"Jhon Doe\" },\n      },\n\n      async authorize(credentials) {\n        // check to see if eamil and password is there\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Please enter an email or password\");\n        }\n\n        // check to see if user already exist\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email,\n          },\n        });\n\n        // if user was not found\n        if (!user || !user?.password) {\n          throw new Error(\"No user found\");\n        }\n\n        // check to see if passwords match\n        const passwordMatch = await bcrypt.compare(\n          credentials.password,\n          user.password,\n        );\n\n        if (!passwordMatch) {\n          throw new Error(\"Incorrect password\");\n        }\n\n        return user;\n      },\n    }),\n\n    EmailProvider({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST!,\n        port: Number(process.env.EMAIL_SERVER_PORT),\n        auth: {\n          user: process.env.EMAIL_SERVER_USER!,\n          pass: process.env.EMAIL_SERVER_PASSWORD!,\n        },\n      },\n      from: process.env.EMAIL_FROM!,\n    }),\n\n    GitHubProvider({\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n    }),\n\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n\n  // debug: process.env.NODE_ENV === \"developement\",\n};\n","size_bytes":2394},"src/libs/email.ts":{"content":"import nodemailer from \"nodemailer\";\n\ntype EmailPayload = {\n  to: string;\n  subject: string;\n  html: string;\n};\n\n// Replace with your SMTP credentials\nconst smtpOptions = {\n  host: process.env.EMAIL_SERVER_HOST,\n  port: parseInt(process.env.EMAIL_SERVER_PORT || \"2525\"),\n  secure: false,\n  auth: {\n    user: process.env.EMAIL_SERVER_USER,\n    pass: process.env.EMAIL_SERVER_PASSWORD,\n  },\n};\n\nexport const sendEmail = async (data: EmailPayload) => {\n  const transporter = nodemailer.createTransport({\n    ...smtpOptions,\n  });\n\n  return await transporter.sendMail({\n    from: process.env.EMAIL_FROM,\n    ...data,\n  });\n};\n","size_bytes":622},"src/libs/markdown.ts":{"content":"import fs from \"fs\";\nimport matter from \"gray-matter\";\nimport { join } from \"path\";\n\nconst postsDirectory = join(process.cwd(), \"src/markdown/docs\");\n\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\nexport function getPostBySlug(slug: string, fields: string[] = []) {\n  const realSlug = slug.replace(/\\.mdx$/, \"\");\n  const fullPath = join(postsDirectory, `${realSlug}.mdx`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const { data, content } = matter(fileContents);\n\n  type Items = {\n    [key: string]: string;\n  };\n\n  const items: Items = {};\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === \"slug\") {\n      items[field] = realSlug;\n    }\n    if (field === \"content\") {\n      items[field] = content;\n    }\n\n    if (typeof data[field] !== \"undefined\") {\n      items[field] = data[field];\n    }\n  });\n\n  return items;\n}\n\nexport function getAllPosts(fields: string[] = []) {\n  const slugs = getPostSlugs();\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    // sort posts by date in descending order\n    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1));\n\n  return posts;\n}\n","size_bytes":1203},"src/libs/markdownToHtml.ts":{"content":"import fs from \"fs\";\nimport matter from \"gray-matter\";\nimport { join } from \"path\";\nimport { remark } from \"remark\";\nimport html from \"remark-html\";\n\nexport default async function markdownToHtml(markdown: string) {\n  const result = await remark().use(html).process(markdown);\n  return result.toString();\n}\n\nexport function getPostBySlug(slug: string, fields = [], dirName: string) {\n  const postsDirectory = join(process.cwd(), `./markdown/${dirName}`);\n  const realSlug = slug.replace(/\\.mdx$/, \"\");\n  const fullPath = join(postsDirectory, `${realSlug}.mdx`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const { data, content } = matter(fileContents);\n\n  const items: any = {};\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach((field) => {\n    if (field === \"slug\") {\n      items[field] = realSlug;\n    }\n    if (field === \"content\") {\n      items[field] = content;\n    }\n\n    if (typeof data[field] !== \"undefined\") {\n      items[field] = data[field];\n    }\n  });\n\n  return items;\n}\n","size_bytes":1022},"src/libs/prismaDB.ts":{"content":"import { PrismaClient } from \"@prisma/client\";\n\n// PrismaClient is attached to the `global` object in development to prevent\n// exhausting your database connection limit.\n//\n// Learn more:\n// https://pris.ly/d/help/next-js-best-practices\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n","size_bytes":485},"src/libs/validateEmail.ts":{"content":"export const validateEmail = (email: string) => {\n  return String(email)\n    .toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n    );\n};\n","size_bytes":274},"src/sanity/sanity-query.ts":{"content":"import { groq } from \"next-sanity\";\n\nconst postData = `{\n  title,\n  metadata,\n  slug,\n  tags,\n  author->{\n    _id,\n    name,\n    slug,\n    image,\n    bio\n  },\n  mainImage,\n  publishedAt,\n  body\n}`;\n\nexport const postQuery = groq`*[_type == \"post\"] ${postData}`;\n\nexport const postQueryBySlug = groq`*[_type == \"post\" && slug.current == $slug][0] ${postData}`;\n\nexport const postQueryByTag = groq`*[_type == \"post\" && $slug in tags] ${postData}`;\n\nexport const postQueryByAuthor = groq`*[_type == \"post\" && author->slug.current == $slug] ${postData}`;\n\nexport const postQueryByCategory = groq`*[_type == \"post\" && category == $category] ${postData}`;\n","size_bytes":650},"src/sanity/sanity-utils.ts":{"content":"import ImageUrlBuilder from \"@sanity/image-url\";\nimport { QueryParams, createClient, groq } from \"next-sanity\";\nimport clientConfig from \"./config/client-config\";\nimport { Blog } from \"@/types/blog\";\nimport {\n  postQuery,\n  postQueryBySlug,\n  postQueryByTag,\n  postQueryByAuthor,\n} from \"@/sanity/sanity-query\";\nimport { integrations, messages } from \"../../integrations.config\";\n\nexport async function sanityFetch<QueryResponse>({\n  query,\n  qParams,\n  tags,\n}: {\n  query: string;\n  qParams: QueryParams;\n  tags: string[];\n}): Promise<QueryResponse> {\n  if (integrations?.isSanityEnabled) {\n    const client = createClient(clientConfig);\n    return client.fetch<QueryResponse>(query, qParams, {\n      cache: \"force-cache\",\n      next: { tags },\n    });\n  } else {\n    return {} as QueryResponse;\n  }\n}\n\nexport async function getPosts() {\n  const data: Blog[] = await sanityFetch({\n    query: postQuery,\n    qParams: {},\n    tags: [\"post\", \"author\"],\n  });\n  return data;\n}\n\nexport async function getPost(slug: string) {\n  const data: Blog = await sanityFetch({\n    query: postQueryBySlug,\n    qParams: { slug },\n    tags: [\"post\", \"author\"],\n  });\n  return data;\n}\n\nexport async function getPostsByTag(tag: string) {\n  const data: Blog[] = await sanityFetch({\n    query: postQueryByTag,\n    qParams: { slug: tag },\n    tags: [\"post\", \"author\"],\n  });\n  return data;\n}\n\nexport async function getPostsByAuthor(author: string) {\n  const data: Blog[] = await sanityFetch({\n    query: postQueryByAuthor,\n    qParams: { slug: author },\n    tags: [\"post\", \"author\"],\n  });\n  return data;\n}\n\nexport function imageBuilder(source: any) {\n  return ImageUrlBuilder(clientConfig).image(source);\n}\n","size_bytes":1685},"src/styles/animate.css":{"content":"@charset \"UTF-8\";\n\n/*!\n * animate.css -https://daneden.github.io/animate.css/\n * Version - 3.7.2\n * Licensed under the MIT license - http://opensource.org/licenses/MIT\n *\n * Copyright (c) 2019 Daniel Eden\n */\n\n@-webkit-keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n\n.fadeIn {\n  -webkit-animation-name: fadeIn;\n  animation-name: fadeIn;\n}\n\n@-webkit-keyframes fadeInDown {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -20px, 0);\n    transform: translate3d(0, -20px, 0);\n  }\n\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes fadeInDown {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -20px, 0);\n    transform: translate3d(0, -20px, 0);\n  }\n\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.fadeInDown {\n  -webkit-animation-name: fadeInDown;\n  animation-name: fadeInDown;\n}\n\n@-webkit-keyframes fadeInLeft {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(-20px, 0, 0);\n    transform: translate3d(-20px, 0, 0);\n  }\n\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes fadeInLeft {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(-20px, 0, 0);\n    transform: translate3d(-20px, 0, 0);\n  }\n\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.fadeInLeft {\n  -webkit-animation-name: fadeInLeft;\n  animation-name: fadeInLeft;\n}\n\n@-webkit-keyframes fadeInRight {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(20px, 0, 0);\n    transform: translate3d(20px, 0, 0);\n  }\n\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes fadeInRight {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(20px, 0, 0);\n    transform: translate3d(20px, 0, 0);\n  }\n\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.fadeInRight {\n  -webkit-animation-name: fadeInRight;\n  animation-name: fadeInRight;\n}\n\n@-webkit-keyframes fadeInUp {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 20px, 0);\n    transform: translate3d(0, 20px, 0);\n  }\n\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, 20px, 0);\n    transform: translate3d(0, 20px, 0);\n  }\n\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.fadeInUp {\n  -webkit-animation-name: fadeInUp;\n  animation-name: fadeInUp;\n}\n\n.animated {\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n}\n\n.animated.infinite {\n  -webkit-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n}\n\n.animated.delay-1s {\n  -webkit-animation-delay: 1s;\n  animation-delay: 1s;\n}\n\n.animated.delay-2s {\n  -webkit-animation-delay: 2s;\n  animation-delay: 2s;\n}\n\n.animated.delay-3s {\n  -webkit-animation-delay: 3s;\n  animation-delay: 3s;\n}\n\n.animated.delay-4s {\n  -webkit-animation-delay: 4s;\n  animation-delay: 4s;\n}\n\n.animated.delay-5s {\n  -webkit-animation-delay: 5s;\n  animation-delay: 5s;\n}\n\n.animated.fast {\n  -webkit-animation-duration: 800ms;\n  animation-duration: 800ms;\n}\n\n.animated.faster {\n  -webkit-animation-duration: 500ms;\n  animation-duration: 500ms;\n}\n\n.animated.slow {\n  -webkit-animation-duration: 2s;\n  animation-duration: 2s;\n}\n\n.animated.slower {\n  -webkit-animation-duration: 3s;\n  animation-duration: 3s;\n}\n\n@media (print), (prefers-reduced-motion: reduce) {\n  .animated {\n    -webkit-animation-duration: 1ms !important;\n    animation-duration: 1ms !important;\n    -webkit-transition-duration: 1ms !important;\n    transition-duration: 1ms !important;\n    -webkit-animation-iteration-count: 1 !important;\n    animation-iteration-count: 1 !important;\n  }\n}\n","size_bytes":4182},"src/styles/prism-vsc-dark-plus.css":{"content":"pre[class*=\"language-\"],\ncode[class*=\"language-\"] {\n  color: #d4d4d4;\n  font-size: 13px;\n  text-shadow: none;\n  font-family: Menlo, Monaco, Consolas, \"Andale Mono\", \"Ubuntu Mono\",\n    \"Courier New\", monospace;\n  direction: ltr;\n  text-align: left;\n  white-space: pre;\n  word-spacing: normal;\n  word-break: normal;\n  line-height: 1.5;\n  -moz-tab-size: 4;\n  -o-tab-size: 4;\n  tab-size: 4;\n  -webkit-hyphens: none;\n  -moz-hyphens: none;\n  -ms-hyphens: none;\n  hyphens: none;\n}\n\npre[class*=\"language-\"]::selection,\ncode[class*=\"language-\"]::selection,\npre[class*=\"language-\"] *::selection,\ncode[class*=\"language-\"] *::selection {\n  text-shadow: none;\n  background: #75a7ca;\n}\n\n@media print {\n  pre[class*=\"language-\"],\n  code[class*=\"language-\"] {\n    text-shadow: none;\n  }\n}\n\npre[class*=\"language-\"] {\n  padding: 1em;\n  margin: 0.5em 0;\n  overflow: auto;\n  background: #1e1e1e;\n}\n\n:not(pre) > code[class*=\"language-\"] {\n  padding: 0.1em 0.3em;\n  border-radius: 0.3em;\n  color: #db4c69;\n  background: #f9f2f4;\n}\n/*********************************************************\n* Tokens\n*/\n.namespace {\n  opacity: 0.7;\n}\n\n.token.doctype .token.doctype-tag {\n  color: #569cd6;\n}\n\n.token.doctype .token.name {\n  color: #9cdcfe;\n}\n\n.token.comment,\n.token.prolog {\n  color: #6a9955;\n}\n\n.token.punctuation,\n.language-html .language-css .token.punctuation,\n.language-html .language-javascript .token.punctuation {\n  color: #d4d4d4;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.inserted,\n.token.unit {\n  color: #b5cea8;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.deleted {\n  color: #ce9178;\n}\n\n.language-css .token.string.url {\n  text-decoration: underline;\n}\n\n.token.operator,\n.token.entity {\n  color: #d4d4d4;\n}\n\n.token.operator.arrow {\n  color: #569cd6;\n}\n\n.token.atrule {\n  color: #ce9178;\n}\n\n.token.atrule .token.rule {\n  color: #c586c0;\n}\n\n.token.atrule .token.url {\n  color: #9cdcfe;\n}\n\n.token.atrule .token.url .token.function {\n  color: #dcdcaa;\n}\n\n.token.atrule .token.url .token.punctuation {\n  color: #d4d4d4;\n}\n\n.token.keyword {\n  color: #569cd6;\n}\n\n.token.keyword.module,\n.token.keyword.control-flow {\n  color: #c586c0;\n}\n\n.token.function,\n.token.function .token.maybe-class-name {\n  color: #dcdcaa;\n}\n\n.token.regex {\n  color: #d16969;\n}\n\n.token.important {\n  color: #569cd6;\n}\n\n.token.italic {\n  font-style: italic;\n}\n\n.token.constant {\n  color: #9cdcfe;\n}\n\n.token.class-name,\n.token.maybe-class-name {\n  color: #4ec9b0;\n}\n\n.token.console {\n  color: #9cdcfe;\n}\n\n.token.parameter {\n  color: #9cdcfe;\n}\n\n.token.interpolation {\n  color: #9cdcfe;\n}\n\n.token.punctuation.interpolation-punctuation {\n  color: #569cd6;\n}\n\n.token.boolean {\n  color: #569cd6;\n}\n\n.token.property,\n.token.variable,\n.token.imports .token.maybe-class-name,\n.token.exports .token.maybe-class-name {\n  color: #9cdcfe;\n}\n\n.token.selector {\n  color: #d7ba7d;\n}\n\n.token.escape {\n  color: #d7ba7d;\n}\n\n.token.tag {\n  color: #569cd6;\n}\n\n.token.tag .token.punctuation {\n  color: #808080;\n}\n\n.token.cdata {\n  color: #808080;\n}\n\n.token.attr-name {\n  color: #9cdcfe;\n}\n\n.token.attr-value,\n.token.attr-value .token.punctuation {\n  color: #ce9178;\n}\n\n.token.attr-value .token.punctuation.attr-equals {\n  color: #d4d4d4;\n}\n\n.token.entity {\n  color: #569cd6;\n}\n\n.token.namespace {\n  color: #4ec9b0;\n}\n/*********************************************************\n* Language Specific\n*/\n\npre[class*=\"language-javascript\"],\ncode[class*=\"language-javascript\"],\npre[class*=\"language-jsx\"],\ncode[class*=\"language-jsx\"],\npre[class*=\"language-typescript\"],\ncode[class*=\"language-typescript\"],\npre[class*=\"language-tsx\"],\ncode[class*=\"language-tsx\"] {\n  color: #9cdcfe;\n}\n\npre[class*=\"language-css\"],\ncode[class*=\"language-css\"] {\n  color: #ce9178;\n}\n\npre[class*=\"language-html\"],\ncode[class*=\"language-html\"] {\n  color: #d4d4d4;\n}\n\n.language-regex .token.anchor {\n  color: #dcdcaa;\n}\n\n.language-html .token.punctuation {\n  color: #808080;\n}\n/*********************************************************\n* Line highlighting\n*/\npre[data-line] {\n  position: relative;\n}\n\npre[class*=\"language-\"] > code[class*=\"language-\"] {\n  position: relative;\n  z-index: 1;\n}\n\n.line-highlight {\n  position: absolute;\n  left: 0;\n  right: 0;\n  padding: inherit 0;\n  margin-top: 1em;\n  background: #f7ebc6;\n  box-shadow: inset 5px 0 0 #f7d87c;\n  z-index: 0;\n  pointer-events: none;\n  line-height: inherit;\n  white-space: pre;\n}\n","size_bytes":4449},"src/styles/star.css":{"content":".stars {\n  width: 1px;\n  height: 1px;\n  background: transparent;\n  animation: animStar 50s linear infinite;\n  box-shadow: 779px 1331px #fff, 324px 42px #fff, 303px 586px #fff,\n    1312px 276px #fff, 451px 625px #fff, 521px 1931px #fff, 1087px 1871px #fff,\n    36px 1546px #fff, 132px 934px #fff, 1698px 901px #fff, 1418px 664px #fff,\n    1448px 1157px #fff, 1084px 232px #fff, 347px 1776px #fff, 1722px 243px #fff,\n    1629px 835px #fff, 479px 969px #fff, 1231px 960px #fff, 586px 384px #fff,\n    164px 527px #fff, 8px 646px #fff, 1150px 1126px #fff, 665px 1357px #fff,\n    1556px 1982px #fff, 1260px 1961px #fff, 1675px 1741px #fff,\n    1843px 1514px #fff, 718px 1628px #fff, 242px 1343px #fff, 1497px 1880px #fff,\n    1364px 230px #fff, 1739px 1302px #fff, 636px 959px #fff, 304px 686px #fff,\n    614px 751px #fff, 1935px 816px #fff, 1428px 60px #fff, 355px 335px #fff,\n    1594px 158px #fff, 90px 60px #fff, 1553px 162px #fff, 1239px 1825px #fff,\n    1945px 587px #fff, 749px 1785px #fff, 1987px 1172px #fff, 1301px 1237px #fff,\n    1039px 342px #fff, 1585px 1481px #fff, 995px 1048px #fff, 524px 932px #fff,\n    214px 413px #fff, 1701px 1300px #fff, 1037px 1613px #fff, 1871px 996px #fff,\n    1360px 1635px #fff, 1110px 1313px #fff, 412px 1783px #fff, 1949px 177px #fff,\n    903px 1854px #fff, 700px 1936px #fff, 378px 125px #fff, 308px 834px #fff,\n    1118px 962px #fff, 1350px 1929px #fff, 781px 1811px #fff, 561px 137px #fff,\n    757px 1148px #fff, 1670px 1979px #fff, 343px 739px #fff, 945px 795px #fff,\n    576px 1903px #fff, 1078px 1436px #fff, 1583px 450px #fff, 1366px 474px #fff,\n    297px 1873px #fff, 192px 162px #fff, 1624px 1633px #fff, 59px 453px #fff,\n    82px 1872px #fff, 1933px 498px #fff, 1966px 1974px #fff, 1975px 1688px #fff,\n    779px 314px #fff, 1858px 1543px #fff, 73px 1507px #fff, 1693px 975px #fff,\n    1683px 108px #fff, 1768px 1654px #fff, 654px 14px #fff, 494px 171px #fff,\n    1689px 1895px #fff, 1660px 263px #fff, 1031px 903px #fff, 1203px 1393px #fff,\n    1333px 1421px #fff, 1113px 41px #fff, 1206px 1645px #fff, 1325px 1635px #fff,\n    142px 388px #fff, 572px 215px #fff, 1535px 296px #fff, 1419px 407px #fff,\n    1379px 1003px #fff, 329px 469px #fff, 1791px 1652px #fff, 935px 1802px #fff,\n    1330px 1820px #fff, 421px 1933px #fff, 828px 365px #fff, 275px 316px #fff,\n    707px 960px #fff, 1605px 1554px #fff, 625px 58px #fff, 717px 1697px #fff,\n    1669px 246px #fff, 1925px 322px #fff, 1154px 1803px #fff, 1929px 295px #fff,\n    1248px 240px #fff, 1045px 1755px #fff, 166px 942px #fff, 1888px 1773px #fff,\n    678px 1963px #fff, 1370px 569px #fff, 1974px 1400px #fff, 1786px 460px #fff,\n    51px 307px #fff, 784px 1400px #fff, 730px 1258px #fff, 1712px 393px #fff,\n    416px 170px #fff, 1797px 1932px #fff, 572px 219px #fff, 1557px 1856px #fff,\n    218px 8px #fff, 348px 1334px #fff, 469px 413px #fff, 385px 1738px #fff,\n    1357px 1818px #fff, 240px 942px #fff, 248px 1847px #fff, 1535px 806px #fff,\n    236px 1514px #fff, 1429px 1556px #fff, 73px 1633px #fff, 1398px 1121px #fff,\n    671px 1301px #fff, 1404px 1663px #fff, 740px 1018px #fff, 1600px 377px #fff,\n    785px 514px #fff, 112px 1084px #fff, 1915px 1887px #fff, 1463px 1848px #fff,\n    687px 1115px #fff, 1268px 1768px #fff, 1729px 1425px #fff,\n    1284px 1022px #fff, 801px 974px #fff, 1975px 1317px #fff, 1354px 834px #fff,\n    1446px 1484px #fff, 1283px 1786px #fff, 11px 523px #fff, 1842px 236px #fff,\n    1355px 654px #fff, 429px 7px #fff, 1033px 1128px #fff, 157px 297px #fff,\n    545px 635px #fff, 52px 1080px #fff, 827px 1520px #fff, 1121px 490px #fff,\n    9px 309px #fff, 1744px 1586px #fff, 1014px 417px #fff, 1534px 524px #fff,\n    958px 552px #fff, 1403px 1496px #fff, 387px 703px #fff, 1522px 548px #fff,\n    1355px 282px #fff, 1532px 601px #fff, 1838px 790px #fff, 290px 259px #fff,\n    295px 598px #fff, 1601px 539px #fff, 1561px 1272px #fff, 34px 1922px #fff,\n    1024px 543px #fff, 467px 369px #fff, 722px 333px #fff, 1976px 1255px #fff,\n    766px 983px #fff, 1582px 1285px #fff, 12px 512px #fff, 617px 1410px #fff,\n    682px 577px #fff, 1334px 1438px #fff, 439px 327px #fff, 1617px 1661px #fff,\n    673px 129px #fff, 794px 941px #fff, 1386px 1902px #fff, 37px 1353px #fff,\n    1467px 1353px #fff, 416px 18px #fff, 187px 344px #fff, 200px 1898px #fff,\n    1491px 1619px #fff, 811px 347px #fff, 924px 1827px #fff, 945px 217px #fff,\n    1735px 1228px #fff, 379px 1890px #fff, 79px 761px #fff, 825px 1837px #fff,\n    1980px 1558px #fff, 1308px 1573px #fff, 1488px 1726px #fff,\n    382px 1208px #fff, 522px 595px #fff, 1277px 1898px #fff, 354px 552px #fff,\n    161px 1784px #fff, 614px 251px #fff, 526px 1576px #fff, 17px 212px #fff,\n    179px 996px #fff, 467px 1208px #fff, 1944px 1838px #fff, 1140px 1093px #fff,\n    858px 1007px #fff, 200px 1064px #fff, 423px 1964px #fff, 1945px 439px #fff,\n    1377px 689px #fff, 1120px 1437px #fff, 1876px 668px #fff, 907px 1324px #fff,\n    343px 1976px #fff, 1816px 1501px #fff, 1849px 177px #fff, 647px 91px #fff,\n    1984px 1012px #fff, 1336px 1300px #fff, 128px 648px #fff, 305px 1060px #fff,\n    1324px 826px #fff, 1263px 1314px #fff, 1801px 629px #fff, 1614px 1555px #fff,\n    1634px 90px #fff, 1603px 452px #fff, 891px 1984px #fff, 1556px 1906px #fff,\n    121px 68px #fff, 1676px 1714px #fff, 516px 936px #fff, 1947px 1492px #fff,\n    1455px 1519px #fff, 45px 602px #fff, 205px 1039px #fff, 793px 172px #fff,\n    1562px 1739px #fff, 1056px 110px #fff, 1512px 379px #fff, 1795px 1621px #fff,\n    1848px 607px #fff, 262px 1719px #fff, 477px 991px #fff, 483px 883px #fff,\n    1239px 1197px #fff, 1496px 647px #fff, 1649px 25px #fff, 1491px 1946px #fff,\n    119px 996px #fff, 179px 1472px #fff, 1341px 808px #fff, 1565px 1700px #fff,\n    407px 1544px #fff, 1754px 357px #fff, 1288px 981px #fff, 902px 1997px #fff,\n    1755px 1668px #fff, 186px 877px #fff, 1202px 1882px #fff, 461px 1213px #fff,\n    1400px 748px #fff, 1969px 1899px #fff, 809px 522px #fff, 514px 1219px #fff,\n    374px 275px #fff, 938px 1973px #fff, 357px 552px #fff, 144px 1722px #fff,\n    1572px 912px #fff, 402px 1858px #fff, 1544px 1195px #fff, 667px 1257px #fff,\n    727px 1496px #fff, 993px 232px #fff, 1772px 313px #fff, 1040px 1590px #fff,\n    1204px 1973px #fff, 1268px 79px #fff, 1555px 1048px #fff, 986px 1707px #fff,\n    978px 1710px #fff, 713px 360px #fff, 407px 863px #fff, 461px 736px #fff,\n    284px 1608px #fff, 103px 430px #fff, 1283px 1319px #fff, 977px 1186px #fff,\n    1966px 1516px #fff, 1287px 1129px #fff, 70px 1098px #fff, 1189px 889px #fff,\n    1126px 1734px #fff, 309px 1292px #fff, 879px 764px #fff, 65px 473px #fff,\n    1003px 1959px #fff, 658px 791px #fff, 402px 1576px #fff, 35px 622px #fff,\n    529px 1589px #fff, 164px 666px #fff, 1876px 1290px #fff, 1541px 526px #fff,\n    270px 1297px #fff, 440px 865px #fff, 1500px 802px #fff, 182px 1754px #fff,\n    1264px 892px #fff, 272px 1249px #fff, 1289px 1535px #fff, 190px 1646px #fff,\n    955px 242px #fff, 1456px 1597px #fff, 1727px 1983px #fff, 635px 801px #fff,\n    226px 455px #fff, 1396px 1710px #fff, 849px 1863px #fff, 237px 1264px #fff,\n    839px 140px #fff, 1122px 735px #fff, 1280px 15px #fff, 1318px 242px #fff,\n    1819px 1148px #fff, 333px 1392px #fff, 1949px 553px #fff, 1878px 1332px #fff,\n    467px 548px #fff, 1812px 1082px #fff, 1067px 193px #fff, 243px 156px #fff,\n    483px 1616px #fff, 1714px 933px #fff, 759px 1800px #fff, 1822px 995px #fff,\n    1877px 572px #fff, 581px 1084px #fff, 107px 732px #fff, 642px 1837px #fff,\n    166px 1493px #fff, 1555px 198px #fff, 819px 307px #fff, 947px 345px #fff,\n    827px 224px #fff, 927px 1394px #fff, 540px 467px #fff, 1093px 405px #fff,\n    1140px 927px #fff, 130px 529px #fff, 33px 1980px #fff, 1147px 1663px #fff,\n    1616px 1436px #fff, 528px 710px #fff, 798px 1100px #fff, 505px 1480px #fff,\n    899px 641px #fff, 1909px 1949px #fff, 1311px 964px #fff, 979px 1301px #fff,\n    1393px 969px #fff, 1793px 1886px #fff, 292px 357px #fff, 1196px 1718px #fff,\n    1290px 1994px #fff, 537px 1973px #fff, 1181px 1674px #fff,\n    1740px 1566px #fff, 1307px 265px #fff, 922px 522px #fff, 1892px 472px #fff,\n    384px 1746px #fff, 392px 1098px #fff, 647px 548px #fff, 390px 1498px #fff,\n    1246px 138px #fff, 730px 876px #fff, 192px 1472px #fff, 1790px 1789px #fff,\n    928px 311px #fff, 1253px 1647px #fff, 747px 1921px #fff, 1561px 1025px #fff,\n    1533px 1292px #fff, 1985px 195px #fff, 728px 729px #fff, 1712px 1936px #fff,\n    512px 1717px #fff, 1528px 483px #fff, 313px 1642px #fff, 281px 1849px #fff,\n    1212px 799px #fff, 435px 1191px #fff, 1422px 611px #fff, 1718px 1964px #fff,\n    411px 944px #fff, 210px 636px #fff, 1502px 1295px #fff, 1434px 349px #fff,\n    769px 60px #fff, 747px 1053px #fff, 789px 504px #fff, 1436px 1264px #fff,\n    1893px 1225px #fff, 1394px 1788px #fff, 1108px 1317px #fff,\n    1673px 1395px #fff, 854px 1010px #fff, 1705px 80px #fff, 1858px 148px #fff,\n    1729px 344px #fff, 1388px 664px #fff, 895px 406px #fff, 1479px 157px #fff,\n    1441px 1157px #fff, 552px 1900px #fff, 516px 364px #fff, 1647px 189px #fff,\n    1427px 1071px #fff, 785px 729px #fff, 1080px 1710px #fff, 504px 204px #fff,\n    1177px 1622px #fff, 657px 34px #fff, 1296px 1099px #fff, 248px 180px #fff,\n    1212px 1568px #fff, 667px 1562px #fff, 695px 841px #fff, 1608px 1247px #fff,\n    751px 882px #fff, 87px 167px #fff, 607px 1368px #fff, 1363px 1203px #fff,\n    1836px 317px #fff, 1668px 1703px #fff, 830px 1154px #fff, 1721px 1398px #fff,\n    1601px 1280px #fff, 976px 874px #fff, 1743px 254px #fff, 1020px 1815px #fff,\n    1670px 1766px #fff, 1890px 735px #fff, 1379px 136px #fff, 1864px 695px #fff,\n    206px 965px #fff, 1404px 1932px #fff, 1923px 1360px #fff, 247px 682px #fff,\n    519px 1708px #fff, 645px 750px #fff, 1164px 1204px #fff, 834px 323px #fff,\n    172px 1350px #fff, 213px 972px #fff, 1837px 190px #fff, 285px 1806px #fff,\n    1047px 1299px #fff, 1548px 825px #fff, 1730px 324px #fff, 1346px 1909px #fff,\n    772px 270px #fff, 345px 1190px #fff, 478px 1433px #fff, 1479px 25px #fff,\n    1994px 1830px #fff, 1744px 732px #fff, 20px 1635px #fff, 690px 1795px #fff,\n    1594px 569px #fff, 579px 245px #fff, 1398px 733px #fff, 408px 1352px #fff,\n    1774px 120px #fff, 1152px 1370px #fff, 1698px 1810px #fff, 710px 1450px #fff,\n    665px 286px #fff, 493px 1720px #fff, 786px 5px #fff, 637px 1140px #fff,\n    764px 324px #fff, 927px 310px #fff, 938px 1424px #fff, 1884px 744px #fff,\n    913px 462px #fff, 1831px 1936px #fff, 1527px 249px #fff, 36px 1381px #fff,\n    1597px 581px #fff, 1530px 355px #fff, 949px 459px #fff, 799px 828px #fff,\n    242px 1471px #fff, 654px 797px #fff, 796px 594px #fff, 1365px 678px #fff,\n    752px 23px #fff, 1630px 541px #fff, 982px 72px #fff, 1733px 1831px #fff,\n    21px 412px #fff, 775px 998px #fff, 335px 1945px #fff, 264px 583px #fff,\n    158px 1311px #fff, 528px 164px #fff, 1978px 574px #fff, 717px 1203px #fff,\n    734px 1591px #fff, 1555px 820px #fff, 16px 1943px #fff, 1625px 1177px #fff,\n    1236px 690px #fff, 1585px 1590px #fff, 1737px 1728px #fff, 721px 698px #fff,\n    1804px 1186px #fff, 166px 980px #fff, 1850px 230px #fff, 330px 1712px #fff,\n    95px 797px #fff, 1948px 1078px #fff, 469px 939px #fff, 1269px 1899px #fff,\n    955px 1220px #fff, 1137px 1075px #fff, 312px 1293px #fff, 986px 1762px #fff,\n    1103px 1238px #fff, 428px 1993px #fff, 355px 570px #fff, 977px 1836px #fff,\n    1395px 1092px #fff, 276px 913px #fff, 1743px 656px #fff, 773px 502px #fff,\n    1686px 1322px #fff, 1516px 1945px #fff, 1334px 501px #fff, 266px 156px #fff,\n    455px 655px #fff, 798px 72px #fff, 1059px 1259px #fff, 1402px 1687px #fff,\n    236px 1329px #fff, 1455px 786px #fff, 146px 1228px #fff, 1851px 823px #fff,\n    1062px 100px #fff, 1220px 953px #fff, 20px 1826px #fff, 36px 1063px #fff,\n    1525px 338px #fff, 790px 1521px #fff, 741px 1099px #fff, 288px 1489px #fff,\n    700px 1060px #fff, 390px 1071px #fff, 411px 1036px #fff, 1853px 1072px #fff,\n    1446px 1085px #fff, 1164px 874px #fff, 924px 925px #fff, 291px 271px #fff,\n    1257px 1964px #fff, 1580px 1352px #fff, 1507px 1216px #fff, 211px 956px #fff,\n    985px 1195px #fff, 975px 1640px #fff, 518px 101px #fff, 663px 1395px #fff,\n    914px 532px #fff, 145px 1320px #fff, 69px 1397px #fff, 982px 523px #fff,\n    257px 725px #fff, 1599px 831px #fff, 1636px 1513px #fff, 1250px 1158px #fff,\n    1132px 604px #fff, 183px 102px #fff, 1057px 318px #fff, 1247px 1835px #fff,\n    1983px 1110px #fff, 1077px 1455px #fff, 921px 1770px #fff, 806px 1350px #fff,\n    1938px 1992px #fff, 855px 1260px #fff, 902px 1345px #fff, 658px 1908px #fff,\n    1845px 679px #fff, 712px 1482px #fff, 595px 950px #fff, 1784px 1992px #fff,\n    1847px 1785px #fff, 691px 1004px #fff, 175px 1179px #fff, 1666px 1911px #fff,\n    41px 61px #fff, 971px 1080px #fff, 1830px 1450px #fff, 1351px 1518px #fff,\n    1257px 99px #fff, 1395px 1498px #fff, 1117px 252px #fff, 1779px 597px #fff,\n    1346px 729px #fff, 1108px 1144px #fff, 402px 691px #fff, 72px 496px #fff,\n    1673px 1604px #fff, 1497px 974px #fff, 1865px 1664px #fff, 88px 806px #fff,\n    918px 77px #fff, 244px 1118px #fff, 256px 1820px #fff, 1851px 1840px #fff,\n    605px 1851px #fff, 634px 383px #fff, 865px 37px #fff, 943px 1024px #fff,\n    1951px 177px #fff, 1097px 523px #fff, 985px 1700px #fff, 1243px 122px #fff,\n    768px 1070px #fff, 468px 194px #fff, 320px 1867px #fff, 1850px 185px #fff,\n    380px 1616px #fff, 468px 1294px #fff, 1122px 1743px #fff, 884px 299px #fff,\n    1300px 1917px #fff, 1860px 396px #fff, 1270px 990px #fff, 529px 733px #fff,\n    1975px 1347px #fff, 1885px 685px #fff, 226px 506px #fff, 651px 878px #fff,\n    1323px 680px #fff, 1284px 680px #fff, 238px 1967px #fff, 911px 174px #fff,\n    1111px 521px #fff, 1150px 85px #fff, 794px 502px #fff, 484px 1856px #fff,\n    1809px 368px #fff, 112px 953px #fff, 590px 1009px #fff, 1655px 311px #fff,\n    100px 1026px #fff, 1803px 352px #fff, 865px 306px #fff, 1077px 1019px #fff,\n    1335px 872px #fff, 1647px 1298px #fff, 1233px 1387px #fff, 698px 1036px #fff,\n    659px 1860px #fff, 388px 1412px #fff, 1212px 458px #fff, 755px 1468px #fff,\n    696px 1654px #fff, 1144px 60px #fff;\n}\n\n.stars:after {\n  content: \"\";\n  position: absolute;\n  top: 2000px;\n  width: 1px;\n  height: 1px;\n  background: transparent;\n  box-shadow: 779px 1331px #fff, 324px 42px #fff, 303px 586px #fff,\n    1312px 276px #fff, 451px 625px #fff, 521px 1931px #fff, 1087px 1871px #fff,\n    36px 1546px #fff, 132px 934px #fff, 1698px 901px #fff, 1418px 664px #fff,\n    1448px 1157px #fff, 1084px 232px #fff, 347px 1776px #fff, 1722px 243px #fff,\n    1629px 835px #fff, 479px 969px #fff, 1231px 960px #fff, 586px 384px #fff,\n    164px 527px #fff, 8px 646px #fff, 1150px 1126px #fff, 665px 1357px #fff,\n    1556px 1982px #fff, 1260px 1961px #fff, 1675px 1741px #fff,\n    1843px 1514px #fff, 718px 1628px #fff, 242px 1343px #fff, 1497px 1880px #fff,\n    1364px 230px #fff, 1739px 1302px #fff, 636px 959px #fff, 304px 686px #fff,\n    614px 751px #fff, 1935px 816px #fff, 1428px 60px #fff, 355px 335px #fff,\n    1594px 158px #fff, 90px 60px #fff, 1553px 162px #fff, 1239px 1825px #fff,\n    1945px 587px #fff, 749px 1785px #fff, 1987px 1172px #fff, 1301px 1237px #fff,\n    1039px 342px #fff, 1585px 1481px #fff, 995px 1048px #fff, 524px 932px #fff,\n    214px 413px #fff, 1701px 1300px #fff, 1037px 1613px #fff, 1871px 996px #fff,\n    1360px 1635px #fff, 1110px 1313px #fff, 412px 1783px #fff, 1949px 177px #fff,\n    903px 1854px #fff, 700px 1936px #fff, 378px 125px #fff, 308px 834px #fff,\n    1118px 962px #fff, 1350px 1929px #fff, 781px 1811px #fff, 561px 137px #fff,\n    757px 1148px #fff, 1670px 1979px #fff, 343px 739px #fff, 945px 795px #fff,\n    576px 1903px #fff, 1078px 1436px #fff, 1583px 450px #fff, 1366px 474px #fff,\n    297px 1873px #fff, 192px 162px #fff, 1624px 1633px #fff, 59px 453px #fff,\n    82px 1872px #fff, 1933px 498px #fff, 1966px 1974px #fff, 1975px 1688px #fff,\n    779px 314px #fff, 1858px 1543px #fff, 73px 1507px #fff, 1693px 975px #fff,\n    1683px 108px #fff, 1768px 1654px #fff, 654px 14px #fff, 494px 171px #fff,\n    1689px 1895px #fff, 1660px 263px #fff, 1031px 903px #fff, 1203px 1393px #fff,\n    1333px 1421px #fff, 1113px 41px #fff, 1206px 1645px #fff, 1325px 1635px #fff,\n    142px 388px #fff, 572px 215px #fff, 1535px 296px #fff, 1419px 407px #fff,\n    1379px 1003px #fff, 329px 469px #fff, 1791px 1652px #fff, 935px 1802px #fff,\n    1330px 1820px #fff, 421px 1933px #fff, 828px 365px #fff, 275px 316px #fff,\n    707px 960px #fff, 1605px 1554px #fff, 625px 58px #fff, 717px 1697px #fff,\n    1669px 246px #fff, 1925px 322px #fff, 1154px 1803px #fff, 1929px 295px #fff,\n    1248px 240px #fff, 1045px 1755px #fff, 166px 942px #fff, 1888px 1773px #fff,\n    678px 1963px #fff, 1370px 569px #fff, 1974px 1400px #fff, 1786px 460px #fff,\n    51px 307px #fff, 784px 1400px #fff, 730px 1258px #fff, 1712px 393px #fff,\n    416px 170px #fff, 1797px 1932px #fff, 572px 219px #fff, 1557px 1856px #fff,\n    218px 8px #fff, 348px 1334px #fff, 469px 413px #fff, 385px 1738px #fff,\n    1357px 1818px #fff, 240px 942px #fff, 248px 1847px #fff, 1535px 806px #fff,\n    236px 1514px #fff, 1429px 1556px #fff, 73px 1633px #fff, 1398px 1121px #fff,\n    671px 1301px #fff, 1404px 1663px #fff, 740px 1018px #fff, 1600px 377px #fff,\n    785px 514px #fff, 112px 1084px #fff, 1915px 1887px #fff, 1463px 1848px #fff,\n    687px 1115px #fff, 1268px 1768px #fff, 1729px 1425px #fff,\n    1284px 1022px #fff, 801px 974px #fff, 1975px 1317px #fff, 1354px 834px #fff,\n    1446px 1484px #fff, 1283px 1786px #fff, 11px 523px #fff, 1842px 236px #fff,\n    1355px 654px #fff, 429px 7px #fff, 1033px 1128px #fff, 157px 297px #fff,\n    545px 635px #fff, 52px 1080px #fff, 827px 1520px #fff, 1121px 490px #fff,\n    9px 309px #fff, 1744px 1586px #fff, 1014px 417px #fff, 1534px 524px #fff,\n    958px 552px #fff, 1403px 1496px #fff, 387px 703px #fff, 1522px 548px #fff,\n    1355px 282px #fff, 1532px 601px #fff, 1838px 790px #fff, 290px 259px #fff,\n    295px 598px #fff, 1601px 539px #fff, 1561px 1272px #fff, 34px 1922px #fff,\n    1024px 543px #fff, 467px 369px #fff, 722px 333px #fff, 1976px 1255px #fff,\n    766px 983px #fff, 1582px 1285px #fff, 12px 512px #fff, 617px 1410px #fff,\n    682px 577px #fff, 1334px 1438px #fff, 439px 327px #fff, 1617px 1661px #fff,\n    673px 129px #fff, 794px 941px #fff, 1386px 1902px #fff, 37px 1353px #fff,\n    1467px 1353px #fff, 416px 18px #fff, 187px 344px #fff, 200px 1898px #fff,\n    1491px 1619px #fff, 811px 347px #fff, 924px 1827px #fff, 945px 217px #fff,\n    1735px 1228px #fff, 379px 1890px #fff, 79px 761px #fff, 825px 1837px #fff,\n    1980px 1558px #fff, 1308px 1573px #fff, 1488px 1726px #fff,\n    382px 1208px #fff, 522px 595px #fff, 1277px 1898px #fff, 354px 552px #fff,\n    161px 1784px #fff, 614px 251px #fff, 526px 1576px #fff, 17px 212px #fff,\n    179px 996px #fff, 467px 1208px #fff, 1944px 1838px #fff, 1140px 1093px #fff,\n    858px 1007px #fff, 200px 1064px #fff, 423px 1964px #fff, 1945px 439px #fff,\n    1377px 689px #fff, 1120px 1437px #fff, 1876px 668px #fff, 907px 1324px #fff,\n    343px 1976px #fff, 1816px 1501px #fff, 1849px 177px #fff, 647px 91px #fff,\n    1984px 1012px #fff, 1336px 1300px #fff, 128px 648px #fff, 305px 1060px #fff,\n    1324px 826px #fff, 1263px 1314px #fff, 1801px 629px #fff, 1614px 1555px #fff,\n    1634px 90px #fff, 1603px 452px #fff, 891px 1984px #fff, 1556px 1906px #fff,\n    121px 68px #fff, 1676px 1714px #fff, 516px 936px #fff, 1947px 1492px #fff,\n    1455px 1519px #fff, 45px 602px #fff, 205px 1039px #fff, 793px 172px #fff,\n    1562px 1739px #fff, 1056px 110px #fff, 1512px 379px #fff, 1795px 1621px #fff,\n    1848px 607px #fff, 262px 1719px #fff, 477px 991px #fff, 483px 883px #fff,\n    1239px 1197px #fff, 1496px 647px #fff, 1649px 25px #fff, 1491px 1946px #fff,\n    119px 996px #fff, 179px 1472px #fff, 1341px 808px #fff, 1565px 1700px #fff,\n    407px 1544px #fff, 1754px 357px #fff, 1288px 981px #fff, 902px 1997px #fff,\n    1755px 1668px #fff, 186px 877px #fff, 1202px 1882px #fff, 461px 1213px #fff,\n    1400px 748px #fff, 1969px 1899px #fff, 809px 522px #fff, 514px 1219px #fff,\n    374px 275px #fff, 938px 1973px #fff, 357px 552px #fff, 144px 1722px #fff,\n    1572px 912px #fff, 402px 1858px #fff, 1544px 1195px #fff, 667px 1257px #fff,\n    727px 1496px #fff, 993px 232px #fff, 1772px 313px #fff, 1040px 1590px #fff,\n    1204px 1973px #fff, 1268px 79px #fff, 1555px 1048px #fff, 986px 1707px #fff,\n    978px 1710px #fff, 713px 360px #fff, 407px 863px #fff, 461px 736px #fff,\n    284px 1608px #fff, 103px 430px #fff, 1283px 1319px #fff, 977px 1186px #fff,\n    1966px 1516px #fff, 1287px 1129px #fff, 70px 1098px #fff, 1189px 889px #fff,\n    1126px 1734px #fff, 309px 1292px #fff, 879px 764px #fff, 65px 473px #fff,\n    1003px 1959px #fff, 658px 791px #fff, 402px 1576px #fff, 35px 622px #fff,\n    529px 1589px #fff, 164px 666px #fff, 1876px 1290px #fff, 1541px 526px #fff,\n    270px 1297px #fff, 440px 865px #fff, 1500px 802px #fff, 182px 1754px #fff,\n    1264px 892px #fff, 272px 1249px #fff, 1289px 1535px #fff, 190px 1646px #fff,\n    955px 242px #fff, 1456px 1597px #fff, 1727px 1983px #fff, 635px 801px #fff,\n    226px 455px #fff, 1396px 1710px #fff, 849px 1863px #fff, 237px 1264px #fff,\n    839px 140px #fff, 1122px 735px #fff, 1280px 15px #fff, 1318px 242px #fff,\n    1819px 1148px #fff, 333px 1392px #fff, 1949px 553px #fff, 1878px 1332px #fff,\n    467px 548px #fff, 1812px 1082px #fff, 1067px 193px #fff, 243px 156px #fff,\n    483px 1616px #fff, 1714px 933px #fff, 759px 1800px #fff, 1822px 995px #fff,\n    1877px 572px #fff, 581px 1084px #fff, 107px 732px #fff, 642px 1837px #fff,\n    166px 1493px #fff, 1555px 198px #fff, 819px 307px #fff, 947px 345px #fff,\n    827px 224px #fff, 927px 1394px #fff, 540px 467px #fff, 1093px 405px #fff,\n    1140px 927px #fff, 130px 529px #fff, 33px 1980px #fff, 1147px 1663px #fff,\n    1616px 1436px #fff, 528px 710px #fff, 798px 1100px #fff, 505px 1480px #fff,\n    899px 641px #fff, 1909px 1949px #fff, 1311px 964px #fff, 979px 1301px #fff,\n    1393px 969px #fff, 1793px 1886px #fff, 292px 357px #fff, 1196px 1718px #fff,\n    1290px 1994px #fff, 537px 1973px #fff, 1181px 1674px #fff,\n    1740px 1566px #fff, 1307px 265px #fff, 922px 522px #fff, 1892px 472px #fff,\n    384px 1746px #fff, 392px 1098px #fff, 647px 548px #fff, 390px 1498px #fff,\n    1246px 138px #fff, 730px 876px #fff, 192px 1472px #fff, 1790px 1789px #fff,\n    928px 311px #fff, 1253px 1647px #fff, 747px 1921px #fff, 1561px 1025px #fff,\n    1533px 1292px #fff, 1985px 195px #fff, 728px 729px #fff, 1712px 1936px #fff,\n    512px 1717px #fff, 1528px 483px #fff, 313px 1642px #fff, 281px 1849px #fff,\n    1212px 799px #fff, 435px 1191px #fff, 1422px 611px #fff, 1718px 1964px #fff,\n    411px 944px #fff, 210px 636px #fff, 1502px 1295px #fff, 1434px 349px #fff,\n    769px 60px #fff, 747px 1053px #fff, 789px 504px #fff, 1436px 1264px #fff,\n    1893px 1225px #fff, 1394px 1788px #fff, 1108px 1317px #fff,\n    1673px 1395px #fff, 854px 1010px #fff, 1705px 80px #fff, 1858px 148px #fff,\n    1729px 344px #fff, 1388px 664px #fff, 895px 406px #fff, 1479px 157px #fff,\n    1441px 1157px #fff, 552px 1900px #fff, 516px 364px #fff, 1647px 189px #fff,\n    1427px 1071px #fff, 785px 729px #fff, 1080px 1710px #fff, 504px 204px #fff,\n    1177px 1622px #fff, 657px 34px #fff, 1296px 1099px #fff, 248px 180px #fff,\n    1212px 1568px #fff, 667px 1562px #fff, 695px 841px #fff, 1608px 1247px #fff,\n    751px 882px #fff, 87px 167px #fff, 607px 1368px #fff, 1363px 1203px #fff,\n    1836px 317px #fff, 1668px 1703px #fff, 830px 1154px #fff, 1721px 1398px #fff,\n    1601px 1280px #fff, 976px 874px #fff, 1743px 254px #fff, 1020px 1815px #fff,\n    1670px 1766px #fff, 1890px 735px #fff, 1379px 136px #fff, 1864px 695px #fff,\n    206px 965px #fff, 1404px 1932px #fff, 1923px 1360px #fff, 247px 682px #fff,\n    519px 1708px #fff, 645px 750px #fff, 1164px 1204px #fff, 834px 323px #fff,\n    172px 1350px #fff, 213px 972px #fff, 1837px 190px #fff, 285px 1806px #fff,\n    1047px 1299px #fff, 1548px 825px #fff, 1730px 324px #fff, 1346px 1909px #fff,\n    772px 270px #fff, 345px 1190px #fff, 478px 1433px #fff, 1479px 25px #fff,\n    1994px 1830px #fff, 1744px 732px #fff, 20px 1635px #fff, 690px 1795px #fff,\n    1594px 569px #fff, 579px 245px #fff, 1398px 733px #fff, 408px 1352px #fff,\n    1774px 120px #fff, 1152px 1370px #fff, 1698px 1810px #fff, 710px 1450px #fff,\n    665px 286px #fff, 493px 1720px #fff, 786px 5px #fff, 637px 1140px #fff,\n    764px 324px #fff, 927px 310px #fff, 938px 1424px #fff, 1884px 744px #fff,\n    913px 462px #fff, 1831px 1936px #fff, 1527px 249px #fff, 36px 1381px #fff,\n    1597px 581px #fff, 1530px 355px #fff, 949px 459px #fff, 799px 828px #fff,\n    242px 1471px #fff, 654px 797px #fff, 796px 594px #fff, 1365px 678px #fff,\n    752px 23px #fff, 1630px 541px #fff, 982px 72px #fff, 1733px 1831px #fff,\n    21px 412px #fff, 775px 998px #fff, 335px 1945px #fff, 264px 583px #fff,\n    158px 1311px #fff, 528px 164px #fff, 1978px 574px #fff, 717px 1203px #fff,\n    734px 1591px #fff, 1555px 820px #fff, 16px 1943px #fff, 1625px 1177px #fff,\n    1236px 690px #fff, 1585px 1590px #fff, 1737px 1728px #fff, 721px 698px #fff,\n    1804px 1186px #fff, 166px 980px #fff, 1850px 230px #fff, 330px 1712px #fff,\n    95px 797px #fff, 1948px 1078px #fff, 469px 939px #fff, 1269px 1899px #fff,\n    955px 1220px #fff, 1137px 1075px #fff, 312px 1293px #fff, 986px 1762px #fff,\n    1103px 1238px #fff, 428px 1993px #fff, 355px 570px #fff, 977px 1836px #fff,\n    1395px 1092px #fff, 276px 913px #fff, 1743px 656px #fff, 773px 502px #fff,\n    1686px 1322px #fff, 1516px 1945px #fff, 1334px 501px #fff, 266px 156px #fff,\n    455px 655px #fff, 798px 72px #fff, 1059px 1259px #fff, 1402px 1687px #fff,\n    236px 1329px #fff, 1455px 786px #fff, 146px 1228px #fff, 1851px 823px #fff,\n    1062px 100px #fff, 1220px 953px #fff, 20px 1826px #fff, 36px 1063px #fff,\n    1525px 338px #fff, 790px 1521px #fff, 741px 1099px #fff, 288px 1489px #fff,\n    700px 1060px #fff, 390px 1071px #fff, 411px 1036px #fff, 1853px 1072px #fff,\n    1446px 1085px #fff, 1164px 874px #fff, 924px 925px #fff, 291px 271px #fff,\n    1257px 1964px #fff, 1580px 1352px #fff, 1507px 1216px #fff, 211px 956px #fff,\n    985px 1195px #fff, 975px 1640px #fff, 518px 101px #fff, 663px 1395px #fff,\n    914px 532px #fff, 145px 1320px #fff, 69px 1397px #fff, 982px 523px #fff,\n    257px 725px #fff, 1599px 831px #fff, 1636px 1513px #fff, 1250px 1158px #fff,\n    1132px 604px #fff, 183px 102px #fff, 1057px 318px #fff, 1247px 1835px #fff,\n    1983px 1110px #fff, 1077px 1455px #fff, 921px 1770px #fff, 806px 1350px #fff,\n    1938px 1992px #fff, 855px 1260px #fff, 902px 1345px #fff, 658px 1908px #fff,\n    1845px 679px #fff, 712px 1482px #fff, 595px 950px #fff, 1784px 1992px #fff,\n    1847px 1785px #fff, 691px 1004px #fff, 175px 1179px #fff, 1666px 1911px #fff,\n    41px 61px #fff, 971px 1080px #fff, 1830px 1450px #fff, 1351px 1518px #fff,\n    1257px 99px #fff, 1395px 1498px #fff, 1117px 252px #fff, 1779px 597px #fff,\n    1346px 729px #fff, 1108px 1144px #fff, 402px 691px #fff, 72px 496px #fff,\n    1673px 1604px #fff, 1497px 974px #fff, 1865px 1664px #fff, 88px 806px #fff,\n    918px 77px #fff, 244px 1118px #fff, 256px 1820px #fff, 1851px 1840px #fff,\n    605px 1851px #fff, 634px 383px #fff, 865px 37px #fff, 943px 1024px #fff,\n    1951px 177px #fff, 1097px 523px #fff, 985px 1700px #fff, 1243px 122px #fff,\n    768px 1070px #fff, 468px 194px #fff, 320px 1867px #fff, 1850px 185px #fff,\n    380px 1616px #fff, 468px 1294px #fff, 1122px 1743px #fff, 884px 299px #fff,\n    1300px 1917px #fff, 1860px 396px #fff, 1270px 990px #fff, 529px 733px #fff,\n    1975px 1347px #fff, 1885px 685px #fff, 226px 506px #fff, 651px 878px #fff,\n    1323px 680px #fff, 1284px 680px #fff, 238px 1967px #fff, 911px 174px #fff,\n    1111px 521px #fff, 1150px 85px #fff, 794px 502px #fff, 484px 1856px #fff,\n    1809px 368px #fff, 112px 953px #fff, 590px 1009px #fff, 1655px 311px #fff,\n    100px 1026px #fff, 1803px 352px #fff, 865px 306px #fff, 1077px 1019px #fff,\n    1335px 872px #fff, 1647px 1298px #fff, 1233px 1387px #fff, 698px 1036px #fff,\n    659px 1860px #fff, 388px 1412px #fff, 1212px 458px #fff, 755px 1468px #fff,\n    696px 1654px #fff, 1144px 60px #fff;\n}\n\n.stars2 {\n  width: 2px;\n  height: 2px;\n  background: transparent;\n  animation: animStar 100s linear infinite;\n  box-shadow: 1448px 320px #fff, 1775px 1663px #fff, 332px 1364px #fff,\n    878px 340px #fff, 569px 1832px #fff, 1422px 1684px #fff, 1946px 1907px #fff,\n    121px 979px #fff, 1044px 1069px #fff, 463px 381px #fff, 423px 112px #fff,\n    523px 1179px #fff, 779px 654px #fff, 1398px 694px #fff, 1085px 1464px #fff,\n    1599px 1869px #fff, 801px 1882px #fff, 779px 1231px #fff, 552px 932px #fff,\n    1057px 1196px #fff, 282px 1280px #fff, 496px 1986px #fff, 1833px 1120px #fff,\n    1802px 1293px #fff, 6px 1696px #fff, 412px 1902px #fff, 605px 438px #fff,\n    24px 1212px #fff, 234px 1320px #fff, 544px 344px #fff, 1107px 170px #fff,\n    1603px 196px #fff, 905px 648px #fff, 68px 1458px #fff, 649px 1969px #fff,\n    744px 675px #fff, 1127px 478px #fff, 714px 1814px #fff, 1486px 526px #fff,\n    270px 1636px #fff, 1931px 149px #fff, 1807px 378px #fff, 8px 390px #fff,\n    1415px 699px #fff, 1473px 1211px #fff, 1590px 141px #fff, 270px 1705px #fff,\n    69px 1423px #fff, 1108px 1053px #fff, 1946px 128px #fff, 371px 371px #fff,\n    1490px 220px #fff, 357px 1885px #fff, 363px 363px #fff, 1896px 1256px #fff,\n    1979px 1050px #fff, 947px 1342px #fff, 1754px 242px #fff, 514px 974px #fff,\n    65px 1477px #fff, 1840px 547px #fff, 950px 695px #fff, 459px 1150px #fff,\n    1124px 1502px #fff, 481px 940px #fff, 680px 839px #fff, 797px 1169px #fff,\n    1977px 1491px #fff, 734px 1724px #fff, 210px 298px #fff, 816px 628px #fff,\n    686px 770px #fff, 1721px 267px #fff, 1663px 511px #fff, 1481px 1141px #fff,\n    582px 248px #fff, 1308px 953px #fff, 628px 657px #fff, 897px 1535px #fff,\n    270px 931px #fff, 791px 467px #fff, 1336px 1732px #fff, 1013px 1653px #fff,\n    1911px 956px #fff, 587px 816px #fff, 83px 456px #fff, 930px 1478px #fff,\n    1587px 1694px #fff, 614px 1200px #fff, 302px 1782px #fff, 1711px 1432px #fff,\n    443px 904px #fff, 1666px 714px #fff, 1588px 1167px #fff, 273px 1075px #fff,\n    1679px 461px #fff, 721px 664px #fff, 1202px 10px #fff, 166px 1126px #fff,\n    331px 1628px #fff, 430px 1565px #fff, 1585px 509px #fff, 640px 38px #fff,\n    822px 837px #fff, 1760px 1664px #fff, 1122px 1458px #fff, 398px 131px #fff,\n    689px 285px #fff, 460px 652px #fff, 1627px 365px #fff, 348px 1648px #fff,\n    819px 1946px #fff, 981px 1917px #fff, 323px 76px #fff, 979px 684px #fff,\n    887px 536px #fff, 1348px 1596px #fff, 1055px 666px #fff, 1402px 1797px #fff,\n    1300px 1055px #fff, 937px 238px #fff, 1474px 1815px #fff, 1144px 1710px #fff,\n    1629px 1087px #fff, 911px 919px #fff, 771px 819px #fff, 403px 720px #fff,\n    163px 736px #fff, 1062px 238px #fff, 1774px 818px #fff, 1874px 1178px #fff,\n    1177px 699px #fff, 1244px 1244px #fff, 1371px 58px #fff, 564px 1515px #fff,\n    1824px 487px #fff, 929px 702px #fff, 394px 1348px #fff, 1161px 641px #fff,\n    219px 1841px #fff, 358px 941px #fff, 140px 1759px #fff, 1019px 1345px #fff,\n    274px 436px #fff, 1433px 1605px #fff, 1798px 1426px #fff, 294px 1848px #fff,\n    1681px 1877px #fff, 1344px 1824px #fff, 1439px 1632px #fff,\n    161px 1012px #fff, 1308px 588px #fff, 1789px 582px #fff, 721px 1910px #fff,\n    318px 218px #fff, 607px 319px #fff, 495px 535px #fff, 1552px 1575px #fff,\n    1562px 67px #fff, 403px 926px #fff, 1096px 1800px #fff, 1814px 1709px #fff,\n    1882px 1831px #fff, 533px 46px #fff, 823px 969px #fff, 530px 165px #fff,\n    1030px 352px #fff, 1681px 313px #fff, 338px 115px #fff, 1607px 211px #fff,\n    1718px 1184px #fff, 1589px 659px #fff, 278px 355px #fff, 464px 1464px #fff,\n    1165px 277px #fff, 950px 694px #fff, 1746px 293px #fff, 793px 911px #fff,\n    528px 773px #fff, 1883px 1694px #fff, 748px 182px #fff, 1924px 1531px #fff,\n    100px 636px #fff, 1473px 1445px #fff, 1264px 1244px #fff, 850px 1377px #fff,\n    987px 1976px #fff, 933px 1761px #fff, 922px 1270px #fff, 500px 396px #fff,\n    1324px 8px #fff, 1967px 1814px #fff, 1072px 1401px #fff, 961px 37px #fff,\n    156px 81px #fff, 1915px 502px #fff, 1076px 1846px #fff, 152px 1669px #fff,\n    986px 1529px #fff, 1667px 1137px #fff;\n}\n\n.stars2:after {\n  content: \"\";\n  position: absolute;\n  top: 2000px;\n  width: 2px;\n  height: 2px;\n  background: transparent;\n  box-shadow: 1448px 320px #fff, 1775px 1663px #fff, 332px 1364px #fff,\n    878px 340px #fff, 569px 1832px #fff, 1422px 1684px #fff, 1946px 1907px #fff,\n    121px 979px #fff, 1044px 1069px #fff, 463px 381px #fff, 423px 112px #fff,\n    523px 1179px #fff, 779px 654px #fff, 1398px 694px #fff, 1085px 1464px #fff,\n    1599px 1869px #fff, 801px 1882px #fff, 779px 1231px #fff, 552px 932px #fff,\n    1057px 1196px #fff, 282px 1280px #fff, 496px 1986px #fff, 1833px 1120px #fff,\n    1802px 1293px #fff, 6px 1696px #fff, 412px 1902px #fff, 605px 438px #fff,\n    24px 1212px #fff, 234px 1320px #fff, 544px 344px #fff, 1107px 170px #fff,\n    1603px 196px #fff, 905px 648px #fff, 68px 1458px #fff, 649px 1969px #fff,\n    744px 675px #fff, 1127px 478px #fff, 714px 1814px #fff, 1486px 526px #fff,\n    270px 1636px #fff, 1931px 149px #fff, 1807px 378px #fff, 8px 390px #fff,\n    1415px 699px #fff, 1473px 1211px #fff, 1590px 141px #fff, 270px 1705px #fff,\n    69px 1423px #fff, 1108px 1053px #fff, 1946px 128px #fff, 371px 371px #fff,\n    1490px 220px #fff, 357px 1885px #fff, 363px 363px #fff, 1896px 1256px #fff,\n    1979px 1050px #fff, 947px 1342px #fff, 1754px 242px #fff, 514px 974px #fff,\n    65px 1477px #fff, 1840px 547px #fff, 950px 695px #fff, 459px 1150px #fff,\n    1124px 1502px #fff, 481px 940px #fff, 680px 839px #fff, 797px 1169px #fff,\n    1977px 1491px #fff, 734px 1724px #fff, 210px 298px #fff, 816px 628px #fff,\n    686px 770px #fff, 1721px 267px #fff, 1663px 511px #fff, 1481px 1141px #fff,\n    582px 248px #fff, 1308px 953px #fff, 628px 657px #fff, 897px 1535px #fff,\n    270px 931px #fff, 791px 467px #fff, 1336px 1732px #fff, 1013px 1653px #fff,\n    1911px 956px #fff, 587px 816px #fff, 83px 456px #fff, 930px 1478px #fff,\n    1587px 1694px #fff, 614px 1200px #fff, 302px 1782px #fff, 1711px 1432px #fff,\n    443px 904px #fff, 1666px 714px #fff, 1588px 1167px #fff, 273px 1075px #fff,\n    1679px 461px #fff, 721px 664px #fff, 1202px 10px #fff, 166px 1126px #fff,\n    331px 1628px #fff, 430px 1565px #fff, 1585px 509px #fff, 640px 38px #fff,\n    822px 837px #fff, 1760px 1664px #fff, 1122px 1458px #fff, 398px 131px #fff,\n    689px 285px #fff, 460px 652px #fff, 1627px 365px #fff, 348px 1648px #fff,\n    819px 1946px #fff, 981px 1917px #fff, 323px 76px #fff, 979px 684px #fff,\n    887px 536px #fff, 1348px 1596px #fff, 1055px 666px #fff, 1402px 1797px #fff,\n    1300px 1055px #fff, 937px 238px #fff, 1474px 1815px #fff, 1144px 1710px #fff,\n    1629px 1087px #fff, 911px 919px #fff, 771px 819px #fff, 403px 720px #fff,\n    163px 736px #fff, 1062px 238px #fff, 1774px 818px #fff, 1874px 1178px #fff,\n    1177px 699px #fff, 1244px 1244px #fff, 1371px 58px #fff, 564px 1515px #fff,\n    1824px 487px #fff, 929px 702px #fff, 394px 1348px #fff, 1161px 641px #fff,\n    219px 1841px #fff, 358px 941px #fff, 140px 1759px #fff, 1019px 1345px #fff,\n    274px 436px #fff, 1433px 1605px #fff, 1798px 1426px #fff, 294px 1848px #fff,\n    1681px 1877px #fff, 1344px 1824px #fff, 1439px 1632px #fff,\n    161px 1012px #fff, 1308px 588px #fff, 1789px 582px #fff, 721px 1910px #fff,\n    318px 218px #fff, 607px 319px #fff, 495px 535px #fff, 1552px 1575px #fff,\n    1562px 67px #fff, 403px 926px #fff, 1096px 1800px #fff, 1814px 1709px #fff,\n    1882px 1831px #fff, 533px 46px #fff, 823px 969px #fff, 530px 165px #fff,\n    1030px 352px #fff, 1681px 313px #fff, 338px 115px #fff, 1607px 211px #fff,\n    1718px 1184px #fff, 1589px 659px #fff, 278px 355px #fff, 464px 1464px #fff,\n    1165px 277px #fff, 950px 694px #fff, 1746px 293px #fff, 793px 911px #fff,\n    528px 773px #fff, 1883px 1694px #fff, 748px 182px #fff, 1924px 1531px #fff,\n    100px 636px #fff, 1473px 1445px #fff, 1264px 1244px #fff, 850px 1377px #fff,\n    987px 1976px #fff, 933px 1761px #fff, 922px 1270px #fff, 500px 396px #fff,\n    1324px 8px #fff, 1967px 1814px #fff, 1072px 1401px #fff, 961px 37px #fff,\n    156px 81px #fff, 1915px 502px #fff, 1076px 1846px #fff, 152px 1669px #fff,\n    986px 1529px #fff, 1667px 1137px #fff;\n}\n\n.stars3 {\n  width: 3px;\n  height: 3px;\n  background: transparent;\n  animation: animStar 150s linear infinte;\n  box-shadow: 387px 1878px #fff, 760px 1564px #fff, 1487px 999px #fff,\n    948px 1828px #fff, 1977px 1001px #fff, 1284px 1963px #fff, 656px 284px #fff,\n    1268px 1635px #fff, 1820px 598px #fff, 642px 1900px #fff, 296px 57px #fff,\n    921px 1620px #fff, 476px 1858px #fff, 658px 613px #fff, 1171px 1363px #fff,\n    1419px 283px #fff, 1037px 731px #fff, 503px 663px #fff, 1562px 463px #fff,\n    383px 1197px #fff, 1171px 1233px #fff, 876px 1768px #fff, 856px 1615px #fff,\n    1375px 1924px #fff, 1725px 918px #fff, 952px 119px #fff, 768px 1212px #fff,\n    992px 1462px #fff, 1929px 717px #fff, 1947px 755px #fff, 1818px 1123px #fff,\n    1896px 1672px #fff, 460px 198px #fff, 256px 271px #fff, 752px 544px #fff,\n    1222px 1859px #fff, 1851px 443px #fff, 313px 1858px #fff, 709px 446px #fff,\n    1546px 697px #fff, 674px 1155px #fff, 1112px 130px #fff, 355px 1790px #fff,\n    1496px 974px #fff, 1696px 480px #fff, 1316px 1265px #fff, 1645px 1063px #fff,\n    1182px 237px #fff, 427px 1582px #fff, 859px 253px #fff, 458px 939px #fff,\n    1517px 1644px #fff, 1943px 60px #fff, 212px 1650px #fff, 966px 1786px #fff,\n    473px 712px #fff, 130px 76px #fff, 1417px 1186px #fff, 909px 1580px #fff,\n    1913px 762px #fff, 204px 1143px #fff, 1998px 1057px #fff, 1468px 1301px #fff,\n    144px 1676px #fff, 21px 1601px #fff, 382px 1362px #fff, 912px 753px #fff,\n    1488px 1405px #fff, 802px 156px #fff, 174px 550px #fff, 338px 1366px #fff,\n    1197px 774px #fff, 602px 486px #fff, 682px 1877px #fff, 348px 1503px #fff,\n    407px 1139px #fff, 950px 1400px #fff, 922px 1139px #fff, 1697px 293px #fff,\n    1238px 1281px #fff, 1038px 1197px #fff, 376px 1889px #fff,\n    1255px 1680px #fff, 1008px 1316px #fff, 1538px 1447px #fff,\n    1186px 874px #fff, 1967px 640px #fff, 1341px 19px #fff, 29px 1732px #fff,\n    16px 1650px #fff, 1021px 1075px #fff, 723px 424px #fff, 1175px 41px #fff,\n    494px 1957px #fff, 1296px 431px #fff, 175px 1507px #fff, 831px 121px #fff,\n    498px 1947px #fff, 617px 880px #fff, 240px 403px #fff;\n}\n\n.stars3:after {\n  content: \"\";\n  position: absolute;\n  top: 2000px;\n  width: 3px;\n  height: 3px;\n  background: transparent;\n  box-shadow: 387px 1878px #fff, 760px 1564px #fff, 1487px 999px #fff,\n    948px 1828px #fff, 1977px 1001px #fff, 1284px 1963px #fff, 656px 284px #fff,\n    1268px 1635px #fff, 1820px 598px #fff, 642px 1900px #fff, 296px 57px #fff,\n    921px 1620px #fff, 476px 1858px #fff, 658px 613px #fff, 1171px 1363px #fff,\n    1419px 283px #fff, 1037px 731px #fff, 503px 663px #fff, 1562px 463px #fff,\n    383px 1197px #fff, 1171px 1233px #fff, 876px 1768px #fff, 856px 1615px #fff,\n    1375px 1924px #fff, 1725px 918px #fff, 952px 119px #fff, 768px 1212px #fff,\n    992px 1462px #fff, 1929px 717px #fff, 1947px 755px #fff, 1818px 1123px #fff,\n    1896px 1672px #fff, 460px 198px #fff, 256px 271px #fff, 752px 544px #fff,\n    1222px 1859px #fff, 1851px 443px #fff, 313px 1858px #fff, 709px 446px #fff,\n    1546px 697px #fff, 674px 1155px #fff, 1112px 130px #fff, 355px 1790px #fff,\n    1496px 974px #fff, 1696px 480px #fff, 1316px 1265px #fff, 1645px 1063px #fff,\n    1182px 237px #fff, 427px 1582px #fff, 859px 253px #fff, 458px 939px #fff,\n    1517px 1644px #fff, 1943px 60px #fff, 212px 1650px #fff, 966px 1786px #fff,\n    473px 712px #fff, 130px 76px #fff, 1417px 1186px #fff, 909px 1580px #fff,\n    1913px 762px #fff, 204px 1143px #fff, 1998px 1057px #fff, 1468px 1301px #fff,\n    144px 1676px #fff, 21px 1601px #fff, 382px 1362px #fff, 912px 753px #fff,\n    1488px 1405px #fff, 802px 156px #fff, 174px 550px #fff, 338px 1366px #fff,\n    1197px 774px #fff, 602px 486px #fff, 682px 1877px #fff, 348px 1503px #fff,\n    407px 1139px #fff, 950px 1400px #fff, 922px 1139px #fff, 1697px 293px #fff,\n    1238px 1281px #fff, 1038px 1197px #fff, 376px 1889px #fff,\n    1255px 1680px #fff, 1008px 1316px #fff, 1538px 1447px #fff,\n    1186px 874px #fff, 1967px 640px #fff, 1341px 19px #fff, 29px 1732px #fff,\n    16px 1650px #fff, 1021px 1075px #fff, 723px 424px #fff, 1175px 41px #fff,\n    494px 1957px #fff, 1296px 431px #fff, 175px 1507px #fff, 831px 121px #fff,\n    498px 1947px #fff, 617px 880px #fff, 240px 403px #fff;\n}\n\n@keyframes animStar {\n  from {\n    transform: translateY(0px);\n  }\n  to {\n    transform: translateY(-2000px);\n  }\n}\n","size_bytes":40726},"src/styles/tailwind.css":{"content":"@import 'tailwindcss';\n@plugin \"@tailwindcss/typography\";\n\n@theme {\n  --font-*: initial;\n\n  --breakpoint-*: initial;\n  --breakpoint-xsm: 375px;\n  --breakpoint-lsm: 425px;\n  --breakpoint-3xl: 2000px;\n  --breakpoint-sm: 640px;\n  --breakpoint-md: 768px;\n  --breakpoint-lg: 1024px;\n  --breakpoint-xl: 1280px;\n  --breakpoint-2xl: 1536px;\n\n  --color-current: currentColor;\n  --color-transparent: transparent;\n  --color-white: #ffffff;\n\n  --color-dark-2: #495270;\n  --color-dark-3: #918ea0;\n  --color-dark-4: #8d93a5;\n  --color-dark-5: #bbbec9;\n  --color-dark-6: #191625;\n  --color-dark-7: #0f0c1f;\n  --color-dark-8: #100d20;\n  --color-dark: #030014;\n\n  --color-purple: #64748B;\n  --color-purple-dark: #475569;\n  --color-purple-dark-2: #334155;\n  --color-purple-light: #94A3B8;\n  --color-purple-light-2: #CBD5E1;\n  --color-purple-light-3: #E2E8F0;\n  --color-purple-light-4: #F1F5F9;\n  --color-purple-light-5: #F8FAFC;\n\n  --color-pink: #d345f8;\n  --color-pink-dark: #c814f6;\n  --color-pink-light: #df76fa;\n  --color-pink-light-2: #eaa7fc;\n  --color-pink-light-3: #f6d8fe;\n  --color-pink-light-4: #fcf1fe;\n\n  --text-heading-1: 60px;\n  --text-heading-2: 48px;\n  --text-heading-3: 40px;\n  --text-heading-4: 30px;\n  --text-heading-5: 28px;\n  --text-heading-6: 24px;\n  --text-custom-1: 45px;\n\n  --container-30: 7.5rem;\n  --container-40: 10rem;\n  --container-50: 12.5rem;\n\n  --z-index-1: 1;\n  --z-index-999: 999;\n  --z-index-9999: 9999;\n  --z-index-99999: 99999;\n\n  --shadow-1: 0px 1px 2px rgba(166, 175, 195, 0.25);\n  --shadow-2:\n    0px 2px 4px rgba(148, 163, 184, 0.05), 0px 6px 24px rgba(235, 238, 251, 0.4);\n  --shadow-3: 0px 2px 16px rgba(13, 10, 44, 0.12);\n  --shadow-4:\n    0px -8px 18px rgba(13, 10, 44, 0.04), 0px 13px 40px rgba(13, 10, 44, 0.22);\n  --shadow-5:\n    0px -18px 38px rgba(85, 106, 235, 0.04),\n    0px 4px 10px rgba(85, 106, 235, 0.04),\n    0px 10px 30px rgba(85, 106, 235, 0.12);\n  --shadow-6:\n    0px 34px 26px rgba(13, 10, 44, 0.05), 0px 12px 34px rgba(13, 10, 44, 0.08);\n  --shadow-button:\n    inset 0px -6px 15px rgba(156, 178, 255, 0.25),\n    inset 0px 6px 15px rgba(229, 156, 255, 0.25);\n  --shadow-dark:\n    0px 2px 4px rgba(11, 20, 51, 0.05), 0px 6px 24px rgba(11, 20, 51, 0.4);\n  --shadow-video:\n    0px -3px 10px 0px rgba(0, 0, 0, 0.25) inset,\n    0px 26px 50px 0px rgba(18, 9, 36, 0.1);\n}\n\n@utility container {\n  margin-inline: auto;\n  padding-inline: 1rem;\n  @media (width >= theme(--breakpoint-sm)) {\n    padding-inline: 2rem;\n  }\n  @media (width >= theme(--breakpoint-xl)) {\n    padding-inline: 0;\n  }\n}\n\n@utility text-heading-1 {\n  font-size: theme(--text-heading-1);\n  line-height: 72px;\n}\n\n@utility text-heading-2 {\n  font-size: theme(--text-heading-2);\n  line-height: 58px;\n}\n\n@utility text-heading-3 {\n  font-size: theme(--text-heading-3);\n  line-height: 48px;\n}\n\n@utility text-heading-4 {\n  font-size: theme(--text-heading-4);\n  line-height: 38px;\n}\n\n@utility text-heading-5 {\n  font-size: theme(--text-heading-5);\n  line-height: 40px;\n}\n\n@utility text-heading-6 {\n  font-size: theme(--text-heading-6);\n  line-height: 30px;\n}\n\n@utility text-custom-1 {\n  font-size: theme(--text-custom-1);\n  line-height: 55px;\n}\n\n/*\n  The default border color has changed to `currentColor` in Tailwind CSS v4,\n  so we've added these compatibility styles to make sure everything still\n  looks the same as it did with Tailwind CSS v3.\n\n  If we ever want to remove these styles, we need to add an explicit border\n  color utility to any element that depends on these defaults.\n*/\n@layer base {\n  *,\n  ::after,\n  ::before,\n  ::backdrop,\n  ::file-selector-button {\n    border-color: var(--color-gray-200, currentColor);\n  }\n}\n\n@utility dropdown {\n  @apply flex-col gap-1 min-w-max lg:w-[208px] mt-2 lg:mt-0 bg-[#1C192C] shadow-lg ease-in duration-300 p-3 rounded-lg left-0 hidden\n    lg:translate-y-10 lg:opacity-0 lg:invisible lg:absolute lg:flex\n    lg:group-hover:translate-y-3 lg:group-hover:opacity-100 lg:group-hover:visible;\n}\n\n@utility box-hover {\n  @apply before:duration-500 before:transition-opacity before:blur-[100px] before:opacity-0 before:bg-purple before:rounded-full before:w-96 before:h-96 before:z-30 before:absolute before:-top-48 before:-left-48 before:pointer-events-none before:translate-x-[var(--mouse-x)] before:translate-y-[var(--mouse-y)] hover:before:opacity-20 after:duration-500 after:transition-opacity after:opacity-0 after:rounded-[inherit] after:z-10 after:inset-0 after:absolute hover:after:opacity-100 after:box-bg;\n}\n\n@utility box-hover-small {\n  @apply before:blur-[50px]! before:w-48 before:h-48 before:-top-24 before:-left-24;\n}\n\n@utility no-scrollbar {\n  /* Chrome, Safari and Opera */\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none; /* IE and Edge */\n  scrollbar-width: none; /* Firefox */\n}\n\n@utility box-bg {\n  background: radial-gradient(\n    180px circle at var(--mouse-x) var(--mouse-y),\n    #030014,\n    transparent\n  );\n}\n\n@utility gradient-border {\n  content: '';\n  position: absolute;\n  inset: 0;\n  border-radius: inherit;\n  padding: 1px;\n  -webkit-mask:\n    linear-gradient(#fff 0 0) content-box,\n    linear-gradient(#fff 0 0);\n  -webkit-mask-composite: xor;\n  mask-composite: exclude;\n  z-index: -1;\n}\n\n@utility gradient {\n  background-image: linear-gradient(\n    90deg,\n    rgba(71, 85, 105, 0.24) 0.01%,\n    rgba(100, 116, 139, 0.24) 50.01%,\n    rgba(148, 163, 184, 0.24) 100%\n  );\n}\n\n@utility gradient-2 {\n  background-image: linear-gradient(\n    90deg,\n    #64748B 0%,\n    #475569 25%,\n    #334155 50%,\n    #1E293B 75%,\n    #0F172A 100%\n  );\n}\n\n@utility gradient-3 {\n  background-image: linear-gradient(251.09deg, #475569 5.04%, #94A3B8 96.95%);\n}\n\n@utility gradient-4 {\n  background-image: linear-gradient(\n    90deg,\n    #64748B 0.01%,\n    #475569 50.01%,\n    #334155 100%\n  );\n}\n\n@utility button-border-gradient {\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n\n  &:hover {\n    background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0) 0%,\n      rgba(255, 255, 255, 0) 100%\n    );\n  }\n\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      90deg,\n      rgba(71, 85, 105, 0.45) 0.01%,\n      rgba(100, 116, 139, 0.45) 50.01%,\n      rgba(148, 163, 184, 0.45) 100%\n    );\n  }\n}\n\n@utility button-gradient-hover {\n  box-shadow:\n    inset 0px -6px 17px rgba(148, 163, 184, 0.3),\n    inset 0px 6px 17px rgba(71, 85, 105, 0.3);\n}\n\n@utility hero-subtitle-text {\n  background:\n    -webkit-linear-gradient(90deg, #64748B 0.01%, #475569 50.01%, #334155 100%),\n    -webkit-linear-gradient(\n        0deg,\n        rgba(255, 255, 255, 0.4),\n        rgba(255, 255, 255, 0.4)\n      );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n@utility hero-button-gradient {\n  box-shadow: 0px -3px 10px 0px #00000040 inset;\n  background: linear-gradient(180deg, #64748B -11.11%, #475569 100%);\n}\n\n@utility hero-subtitle-gradient {\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.05) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  transition: 0.45s cubic-bezier(0.6, 0.6, 0, 1) box-shadow;\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0.11) 0%,\n      rgba(255, 255, 255, 0) 100%\n    );\n  }\n}\n\n@utility hero-subtitle-hover {\n  box-shadow: inset 0 -7px 11px rgba(100, 116, 139, 0.24);\n}\n\n@utility hero-circle-gradient {\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0) 0%,\n      rgba(255, 255, 255, 0.08) 100%\n    );\n  }\n}\n\n@utility features-row-border {\n  background: linear-gradient(\n    270deg,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.12) 49.48%,\n    rgba(255, 255, 255, 0) 100%\n  );\n}\n\n@utility features-bg {\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.05) 100%\n  );\n  transition: 0.45s cubic-bezier(0.6, 0.6, 0, 1) opacity;\n}\n\n@utility icon-border {\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.0288) 0%,\n    rgba(255, 255, 255, 0.06) 50%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0.06) 0%,\n      rgba(255, 255, 255, 0.15) 50.52%,\n      rgba(255, 255, 255, 0) 100%\n    );\n  }\n}\n\n@utility nav-gradient {\n  background-image: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.09) 10.51%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  border: 1px solid rgba(255, 255, 255, 0.09);\n  border-radius: 50px;\n  &::before {\n    content: '';\n    background-image: linear-gradient(\n      90deg,\n      rgba(255, 255, 255, 0) 2.56%,\n      rgba(255, 255, 255, 0.4) 51.48%,\n      rgba(255, 255, 255, 0) 97.44%\n    );\n    height: 1px;\n    @apply w-1/2 absolute left-1/2 -translate-x-1/2 top-0;\n  }\n}\n\n@utility features-box-border {\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      106.24deg,\n      rgba(255, 255, 255, 0.15) -0.68%,\n      rgba(255, 255, 255, 0) 98.03%\n    );\n  }\n}\n\n@utility features-button-gradient {\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      90deg,\n      rgba(71, 85, 105, 0.45) 0.01%,\n      rgba(100, 116, 139, 0.45) 50.01%,\n      rgba(148, 163, 184, 0.45) 100%\n    );\n  }\n}\n\n@utility pricing-grid {\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.06) 100%\n  );\n  opacity: 0.3;\n}\n\n@utility pricing-grid-border {\n  border-left: 1px solid;\n  border-right: 1px solid;\n  border-image-source: linear-gradient(\n    270deg,\n    rgba(255, 255, 255, 0.075) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  border-image-slice: 1;\n}\n\n@utility pricing-circle {\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0.3) 0%,\n      rgba(255, 255, 255, 0) 28.19%\n    );\n  }\n}\n\n@utility pricing-item-border {\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      47deg,\n      rgba(255, 255, 255, 0.1) 0%,\n      rgba(255, 255, 255, 0) 100%\n    );\n  }\n}\n\n@utility pricing-gradient-text {\n  background:\n    -webkit-linear-gradient(0deg, #64748B 0.01%, #475569 50.01%, #334155 100%),\n    -webkit-linear-gradient(\n        0deg,\n        rgba(255, 255, 255, 0.4),\n        rgba(255, 255, 255, 0.4)\n      );\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n@utility pricing-gradient-divider {\n  background: linear-gradient(\n    270deg,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.12) 49.48%,\n    rgba(255, 255, 255, 0) 100%\n  );\n}\n\n@utility pricing-button-gradient {\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n  &:before {\n    @apply gradient-border gradient-4 hover:gradient-3;\n  }\n}\n\n@utility user-border-gradient {\n  &:before {\n    @apply gradient-border -z-1;\n    background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0.1) 0%,\n      rgba(255, 255, 255, 0) 100%\n    );\n  }\n}\n\n@utility user-divider {\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      270deg,\n      rgba(255, 255, 255, 0) 0%,\n      rgba(255, 255, 255, 0.12) 49.48%,\n      rgba(255, 255, 255, 0) 100%\n    );\n  }\n}\n\n@utility form-box-gradient {\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.04) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      180deg,\n      rgba(255, 255, 255, 0.12) 0%,\n      rgba(255, 255, 255, 0) 100%\n    );\n  }\n}\n\n@utility cta-box-gradient {\n  &:before {\n    @apply gradient-border;\n    background: linear-gradient(\n      0deg,\n      rgba(255, 255, 255, 0.18) 0%,\n      rgba(255, 255, 255, 0) 100%\n    );\n  }\n}\n\n@utility footer-divider-gradient {\n  background: linear-gradient(\n    270deg,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.12) 49.48%,\n    rgba(255, 255, 255, 0) 100%\n  );\n}\n\n@utility footer-bg-gradient {\n  background: linear-gradient(\n    0deg,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n}\n\n@utility about-divider-gradient {\n  background: linear-gradient(\n    270deg,\n    rgba(255, 255, 255, 0) 0%,\n    rgba(255, 255, 255, 0.15) 49.48%,\n    rgba(255, 255, 255, 0) 100%\n  );\n}\n\n@utility team-img-gradient {\n  &:before {\n    @apply gradient-border bg-white/20;\n    padding: 5px !important;\n    z-index: 1 !important;\n  }\n}\n\n@layer base {\n  html {\n    @apply scroll-smooth;\n  }\n\n  html.sr {\n    @apply py-0!;\n  }\n\n  body {\n    @apply text-dark-3 bg-dark;\n  }\n\n  button:not(:disabled),\n  [role=\"button\"]:not(:disabled) {\n    cursor: pointer;\n  }\n}\n\n@layer utilities {\n  /* third-party libraries CSS */\n\n  #supportCheckbox:checked ~ div span {\n    @apply opacity-100;\n  }\n}\n\n.clients-carousel .swiper-slide {\n  @apply w-auto;\n}\n\n/* Blog Details Style */\n\n.blog-details p {\n  @apply mb-6 font-medium;\n}\n\n.blog-details p strong {\n  @apply text-white;\n}\n\n.blog-details h3 strong,\n.blog-details h3 {\n  @apply font-extrabold text-2xl text-white mb-6;\n}\n\n.blog-details h4 strong,\n.blog-details h4 {\n  @apply font-extrabold text-xl text-white mb-5;\n}\n\n.blog-details h5 strong,\n.blog-details h5 {\n  @apply font-extrabold text-lg text-white mb-4;\n}\n\n.blog-details h1 {\n  @apply mb-4 text-3xl font-bold! leading-tight! text-white sm:text-4xl md:text-[45px] lg:text-4xl xl:text-[45px];\n}\n\n.blog-details h2 strong,\n.blog-details h2 {\n  @apply mb-4 text-[26px] font-bold! leading-tight! text-white sm:text-3xl md:text-4xl;\n}\n\n.blog-details ul,\n.blog-details ol {\n  @apply mb-10 list-inside list-disc;\n}\n\n.blog-details li,\n.blog-details li {\n  @apply mb-2;\n}\n\n.blog-details blockquote {\n  @apply relative z-10 mb-10 overflow-hidden rounded-lg p-8 md:py-9 lg:px-10 xl:px-32 text-center font-medium italic;\n  background-image: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n}\n\n.blog-details blockquote::after {\n  content: \"\";\n  @apply absolute w-20 h-20 right-0 bottom-0 bg-[url(/images/blog/quote-shape-2.svg)] bg-no-repeat bg-contain bg-right-bottom;\n}\n\n.blog-details blockquote::before {\n  content: \"\";\n  @apply absolute left-0 top-0 w-[140px] h-[106px] bg-[url(/images/blog/quote-shape-1.svg)] bg-no-repeat bg-contain bg-left-top;\n}\n\npre {\n  @apply relative px-4 py-2 rounded-lg mb-2;\n}\n\n.prism-copy-button {\n  @apply absolute top-2 right-2 h-[26px] rounded-sm bg-white px-4;\n}\n\n/* ai examples */\n.aiExamples-border-gredient:before {\n  @apply gradient-border;\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.11) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n} \n\n.gradient-box {\n  position: relative;\n  box-sizing: border-box;\n  background-clip: padding-box; /* !importanté */\n  border: solid 1px transparent; /* !importanté */\n}\n\n.gradient-box:before {\n  content: '';\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n  z-index: -1;\n  margin: -1px; /* !importanté */\n  border-radius: inherit; /* !importanté */\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.11) 0%,\n    rgba(255, 255, 255, 0) 100%\n  );\n}\n\nselect {\n  appearance: none; /* Remove default arrow appearance */\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  background: url('/images/ai-tools/icon-5.svg') no-repeat; \n  background-position: 95% center; \n  background-size: 16px 16px; \n  padding-right: 20px;\n}\n\noption {\n  @apply capitalize p-2 inline-block;\n}\n\ntextarea {\n  resize: none;\n}\n\n.generated-content-container p {\n  @apply mt-2\n}\n","size_bytes":15641},"src/types/aiExample.ts":{"content":"export type AiExample = {\n  id: number;\n  icon: string;\n  title: string;\n  description: string;\n  rotate?: boolean;\n  path: string;\n};\n","size_bytes":135},"src/types/blog.ts":{"content":"import { PortableTextBlock } from \"sanity\";\n\nexport type Author = {\n  name: string;\n  image: string;\n  bio?: string;\n  slug?: any;\n  _id?: number | string;\n  _ref?: number | string;\n};\n\nexport type Blog = {\n  _id: number;\n  title: string;\n  slug: any;\n  metadata?: string;\n  body?: PortableTextBlock[];\n  mainImage?: any;\n  author?: Author;\n  tags?: string[];\n  publishedAt?: string;\n};\n","size_bytes":387},"src/types/client.ts":{"content":"export type Client = {\n  id: number;\n  image: string;\n  title?: string;\n  description?: string;\n};\n","size_bytes":99},"src/types/faq.ts":{"content":"export type FAQ = {\n  id: number;\n  question: string;\n  answer: string;\n};\n","size_bytes":75},"src/types/feature.ts":{"content":"export type Feature = {\n  id: number;\n  icon: string;\n  title: string;\n  description: string;\n  rotate?: boolean;\n};\n","size_bytes":117},"src/types/footerLink.ts":{"content":"export type FooterLink = {\n  id: number;\n  title: string;\n  href: string;\n  newTab?: boolean;\n};\n","size_bytes":97},"src/types/menu.ts":{"content":"export type Menu = {\n  id: number;\n  title: string;\n  path?: string;\n  newTab?: boolean;\n  submenu?: Menu[];\n};\n","size_bytes":112},"src/types/review.ts":{"content":"export type Review = {\n  id: number;\n  userName: string;\n  userDesignation: string;\n  userImage: string;\n  description: string;\n};\n","size_bytes":131},"src/types/team.ts":{"content":"export type Team = {\n  id: number;\n  name: string;\n  designation: string;\n  image: string;\n  fbLink?: string;\n  twitterLink?: string;\n  instagramLink?: string;\n};\n","size_bytes":163},"src/app/(site)/layout.tsx":{"content":"import '@/styles/animate.css';\nimport '@/styles/prism-vsc-dark-plus.css';\nimport '@/styles/star.css';\nimport '@/styles/tailwind.css';\n\nimport Footer from '@/components/Footer';\nimport Header from '@/components/Header';\nimport ScrollToTop from '@/components/ScrollToTop';\nimport { Plus_Jakarta_Sans } from 'next/font/google';\nimport NextTopLoader from 'nextjs-toploader';\nimport AuthProvider from '../context/AuthContext';\nimport ToasterContext from '../context/ToastContext';\n\nconst plusJakarta = Plus_Jakarta_Sans({\n  subsets: ['latin'],\n  display: 'swap',\n});\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang='en' className={plusJakarta.className}>\n      <body>\n        <div className='isolate'>\n          <NextTopLoader\n            color='#64748B'\n            crawlSpeed={300}\n            showSpinner={false}\n            shadow='none'\n          />\n\n          <AuthProvider>\n            <Header />\n            {children}\n            <Footer />\n\n            <ToasterContext />\n          </AuthProvider>\n        </div>\n\n        <ScrollToTop />\n      </body>\n    </html>\n  );\n}\n","size_bytes":1143},"src/app/(site)/page.tsx":{"content":"import BlogSection from \"@/components/Blog\";\nimport CallToAction from \"@/components/CallToAction\";\nimport Clients from \"@/components/Home/Clients\";\nimport Features from \"@/components/Home/Features\";\nimport FeaturesList from \"@/components/Home/FeaturesList\";\nimport Hero from \"@/components/Home/Hero\";\nimport Reviews from \"@/components/Home/Reviews\";\nimport Newsletter from \"@/components/Newsletter\";\nimport Pricing from \"@/components/Pricing\";\nimport Support from \"@/components/Support\";\nimport { Metadata } from \"next\";\nimport { integrations } from \"../../../integrations.config\";\n\nexport const metadata: Metadata = {\n  title: \"ComplianceDrone - Professional Thermal Inspection Platform\",\n  description: \"ComplianceDrone provides AI-powered thermal inspection services for solar installations and electrical infrastructure using advanced drone technology\",\n  // other metadata\n};\n\nexport default function Home() {\n  return (\n    <>\n      <Hero />\n      <Features />\n      <FeaturesList />\n      <Pricing />\n      <section className=\"relative z-20 overflow-hidden pb-20 pt-22.5 lg:pt-27.5 xl:pt-32.5 2xl:pt-45\">\n        <Reviews />\n      </section>\n      <Clients />\n      <Support />\n      {integrations.isSanityEnabled && <BlogSection />}\n      <CallToAction />\n      <Newsletter />\n    </>\n  );\n}\n","size_bytes":1300},"src/app/(studio)/layout.tsx":{"content":"import \"../../styles/tailwind.css\";\n\nexport const metadata = {\n  title: \"My Awesome Site\",\n  description: \"Generated by Next + Sanity\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\n","size_bytes":309},"src/app/context/AuthContext.tsx":{"content":"\"use client\";\nimport { SessionProvider } from \"next-auth/react\";\n\nexport default function AuthProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return <SessionProvider>{children}</SessionProvider>;\n}\n","size_bytes":214},"src/app/context/ToastContext.tsx":{"content":"\"use client\";\nimport { Toaster } from \"react-hot-toast\";\n\nconst ToasterContext = () => {\n  return (\n    <div className=\"static z-99999\">\n      <Toaster position=\"top-center\" reverseOrder={false} />\n    </div>\n  );\n};\n\nexport default ToasterContext;\n","size_bytes":249},"src/components/AiTools/APIkeyModal.tsx":{"content":"import React, { useState } from \"react\";\nimport Image from \"next/image\";\n\nconst APIkeyModal = ({ handleModal }: { handleModal: () => void }) => {\n  const [key, setKey] = useState(\"\");\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n    localStorage.setItem(\"apiKey\", key);\n    handleModal();\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"fixed inset-0 -z-1 bg-dark opacity-90\"></div>\n      <div className=\"modal-content relative w-10/12 rounded-lg border-[1px] border-white/10 bg-dark-6 p-5 text-center shadow-md md:w-[608px] lg:p-12.5\">\n        <button\n          className=\"absolute right-2 top-2 rounded-full bg-white/5 p-3 duration-500 hover:bg-white/10 \"\n          onClick={handleModal}\n        >\n          <Image\n            src={\"/images/ai-tools/icon-4.svg\"}\n            width={13}\n            height={13}\n            alt=\"close icon\"\n          />\n        </button>\n        <div>\n          <h2 className=\" text-2xl text-white md:text-3xl\">\n            Enter your OpenAI API Key\n          </h2>\n          <p className=\"pb-8 pt-4\">\n            To access the capabilities of AI Tools Template, a valid OpenAI API\n            Key is required.\n          </p>\n\n          <form onSubmit={handleSubmit} className=\"flex justify-between gap-3\">\n            <input\n              onChange={(e) => setKey(e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-dark-6 px-6 py-3 text-white outline-hidden focus:border-purple\"\n              type=\"text\"\n              placeholder=\"API-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n              required\n            />\n            <button className=\"hero-button-gradient mt-2 inline-flex rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80 lg:mt-0\">\n              Save\n            </button>\n          </form>\n          <a\n            href=\"https://openai.com/blog/openai-api\"\n            target=\"_blank\"\n            className=\"inline-block border-b-[1px] pt-6 duration-300 hover:text-white\"\n          >\n            Get your API key from OpenAI\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default APIkeyModal;\n","size_bytes":2213},"src/components/AiTools/Options.tsx":{"content":"import { useState } from \"react\";\n\ntype Props = {\n  title: string;\n  name: string;\n  values: any[];\n  handleChange: (e: any) => void;\n  selected: string;\n};\n\nconst Options = ({ title, name, values, handleChange, selected }: Props) => {\n  const [isSelected, setIsSelected] = useState(false);\n  return (\n    <div className=\"flex flex-col pt-5\">\n      <label htmlFor={name} className=\"pb-4\">\n        {title}\n      </label>\n      <select\n        value={selected}\n        name={name}\n        onChange={(e) => {\n          handleChange(e);\n          setIsSelected(true);\n        }}\n        id={name}\n        className={`rounded-lg border border-white/[0.12] bg-dark-7 py-3 pl-5 outline-hidden focus:border-purple ${\n          isSelected && \"text-white\"\n        }`}\n      >\n        <option value=\"Select Option\">Select option</option>\n        {values.map((value, key) => (\n          <option value={value} key={key}>\n            {value}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default Options;\n","size_bytes":1020},"src/components/AiTools/PreviewGeneratedText.tsx":{"content":"import React, { useState } from \"react\";\n\ntype Props = {\n  generatedContent: string;\n  height: number;\n};\n\nconst PreviewGeneratedText = ({ generatedContent, height }: Props) => {\n  const [copied, setcopied] = useState(false);\n\n  const copyToClipboard = async () => {\n    setcopied(true);\n\n    try {\n      await navigator.clipboard.writeText(generatedContent);\n    } catch (error) {\n      console.log(error);\n    }\n\n    setTimeout(() => {\n      setcopied(false);\n    }, 800);\n  };\n\n  return (\n    <div className=\"gradient-box rounded-lg bg-dark-8 px-8 pb-8 pt-5 lg:col-span-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"pb-2 text-2xl font-bold text-white\">Output Result</h2>\n          <p>Enjoy your outstanding content based on your topic</p>\n        </div>\n        <button\n          onClick={copyToClipboard}\n          className=\"button-border-gradient hover:button-gradient-hover relative mt-9 inline-flex items-center gap-1.5 rounded-lg  px-6 py-3 text-sm text-white shadow-button hover:shadow-none\"\n        >\n          <svg\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 16 16\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M14.1501 3.29999L11.5251 0.699988C11.3501 0.524988 11.1001 0.424988 10.8501 0.424988H6.3001C5.5751 0.424988 4.9751 1.02499 4.9751 1.74999V10.875C4.9751 11.6 5.5751 12.2 6.3001 12.2H13.1001C13.8251 12.2 14.4251 11.6 14.4251 10.875V3.97499C14.4251 3.72499 14.3251 3.47499 14.1501 3.29999ZM11.5751 2.34999L12.5251 3.29999H11.5751V2.34999ZM13.1001 11.075H6.3001C6.2001 11.075 6.1001 10.975 6.1001 10.875V1.74999C6.1001 1.64999 6.2001 1.54999 6.3001 1.54999H10.4501V3.84999C10.4501 4.14999 10.7001 4.42499 11.0251 4.42499H13.3001V10.9C13.3001 11 13.2001 11.075 13.1001 11.075Z\"\n              fill=\"white\"\n            />\n            <path\n              d=\"M11.0254 5.625H7.72539C7.42539 5.625 7.15039 5.875 7.15039 6.2C7.15039 6.525 7.40039 6.775 7.72539 6.775H11.0254C11.3254 6.775 11.6004 6.525 11.6004 6.2C11.6004 5.875 11.3254 5.625 11.0254 5.625Z\"\n              fill=\"white\"\n            />\n            <path\n              d=\"M11.0254 7.72498H7.72539C7.42539 7.72498 7.15039 7.97498 7.15039 8.29998C7.15039 8.59998 7.40039 8.87498 7.72539 8.87498H11.0254C11.3254 8.87498 11.6004 8.62498 11.6004 8.29998C11.5754 7.97498 11.3254 7.72498 11.0254 7.72498Z\"\n              fill=\"white\"\n            />\n            <path\n              d=\"M10.4502 13C10.1502 13 9.8752 13.25 9.8752 13.575V14.25C9.8752 14.35 9.7752 14.45 9.6752 14.45H2.9002C2.8002 14.45 2.7002 14.35 2.7002 14.25V5.1C2.7002 5 2.8002 4.9 2.9002 4.9H3.7502C4.0502 4.9 4.3252 4.65 4.3252 4.325C4.3252 4 4.0752 3.75 3.7502 3.75H2.9002C2.1752 3.75 1.5752 4.35 1.5752 5.075V14.25C1.5752 14.975 2.1752 15.575 2.9002 15.575H9.7002C10.4252 15.575 11.0252 14.975 11.0252 14.25V13.575C11.0252 13.25 10.7752 13 10.4502 13Z\"\n              fill=\"white\"\n            />\n          </svg>\n          {copied ? \"Copied\" : \"Copy\"}\n        </button>\n      </div>\n      <textarea\n        className={`mt-6 w-full rounded-lg border border-white/[0.12] bg-dark-7 p-5 outline-hidden focus:border-white/10 ${\n          height === 442 ? \"min-h-[442px]\" : \"min-h-[262px]\"\n        } ${generatedContent ? \"text-white\" : \"cursor-no-drop\"}`}\n        value={\n          generatedContent\n            ? generatedContent\n            : \"Your generated content will be here\"\n        }\n        readOnly\n      ></textarea>\n    </div>\n  );\n};\n\nexport default PreviewGeneratedText;\n","size_bytes":3572},"src/components/Auth/MagicLink.tsx":{"content":"import React, { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { validateEmail } from \"@/libs/validateEmail\";\nimport { signIn } from \"next-auth/react\";\nimport Loader from \"../Common/Loader\";\nimport { integrations, messages } from \"../../../integrations.config\";\nimport z from \"zod\";\n\nconst MagicLinkSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address.\"),\n});\n\nconst MagicLink = () => {\n  const [email, setEmail] = useState(\"\");\n  const [loader, setLoader] = useState(false);\n\n  const loginUser = (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isAuthEnabled) {\n      toast.error(messages.auth);\n      return;\n    }\n\n    setLoader(true);\n\n    const result = MagicLinkSchema.safeParse({ email });\n    if (!result.success) {\n      toast.error(result.error.errors[0].message);\n      setLoader(false);\n      return;\n    }\n\n    if (!validateEmail(email)) {\n      setLoader(false);\n      toast.error(\"Please enter a valid email address.\");\n      return;\n    } else {\n      signIn(\"email\", {\n        redirect: false,\n        email: email,\n      })\n        .then((callback) => {\n          if (callback?.ok) {\n            toast.success(\"Email sent\");\n            setEmail(\"\");\n            setLoader(false);\n          }\n        })\n        .catch((error) => {\n          toast.error(error);\n          setLoader(false);\n        });\n    }\n  };\n\n  return (\n    <form onSubmit={loginUser}>\n      <div className=\"relative mb-4\">\n        <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n          <svg\n            width=\"16\"\n            height=\"12\"\n            viewBox=\"0 0 16 12\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M13.9998 0.399994H1.9998C1.1498 0.399994 0.424805 1.09999 0.424805 1.97499V10.075C0.424805 10.925 1.1248 11.65 1.9998 11.65H13.9998C14.8498 11.65 15.5748 10.95 15.5748 10.075V1.94999C15.5748 1.09999 14.8498 0.399994 13.9998 0.399994ZM13.9998 1.52499C14.0248 1.52499 14.0498 1.52499 14.0748 1.52499L7.9998 5.42499L1.9248 1.52499C1.9498 1.52499 1.9748 1.52499 1.9998 1.52499H13.9998ZM13.9998 10.475H1.9998C1.7498 10.475 1.5498 10.275 1.5498 10.025V2.62499L7.3998 6.37499C7.5748 6.49999 7.7748 6.54999 7.9748 6.54999C8.1748 6.54999 8.3748 6.49999 8.5498 6.37499L14.3998 2.62499V10.05C14.4498 10.3 14.2498 10.475 13.9998 10.475Z\"\n              fill=\"#918EA0\"\n            />\n          </svg>\n        </span>\n        <input\n          type=\"email\"\n          placeholder=\"Enter your email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          // required\n          className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"hero-button-gradient flex w-full items-center justify-center rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n      >\n        Send Email {loader && <Loader />}\n      </button>\n    </form>\n  );\n};\n\nexport default MagicLink;\n","size_bytes":3161},"src/components/Auth/SocialSignup.tsx":{"content":"import React from \"react\";\nimport { signIn } from \"next-auth/react\";\n\nconst SocialSignup = () => {\n  return (\n    <>\n      <button\n        onClick={() => signIn(\"google\")}\n        className=\"flex w-full items-center justify-center gap-3 rounded-lg border border-white/[0.12] p-3.5 font-medium text-white duration-300 ease-in hover:border-purple\"\n      >\n        <svg\n          width=\"23\"\n          height=\"22\"\n          viewBox=\"0 0 23 22\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g clipPath=\"url(#clip0_132_14584)\">\n            <path\n              d=\"M22.5001 11.2438C22.5134 10.4876 22.4338 9.73256 22.2629 8.995H11.7246V13.0771H17.9105C17.7933 13.7929 17.5296 14.478 17.1352 15.0914C16.7409 15.7047 16.224 16.2335 15.6158 16.646L15.5942 16.7827L18.9264 19.3124L19.1571 19.335C21.2772 17.4161 22.4997 14.5926 22.4997 11.2438\"\n              fill=\"#4285F4\"\n            />\n            <path\n              d=\"M11.7245 22C14.755 22 17.2992 21.0221 19.1577 19.3355L15.6156 16.6464C14.6679 17.2944 13.3958 17.7467 11.7245 17.7467C10.3051 17.7385 8.92433 17.2926 7.77814 16.472C6.63195 15.6515 5.77851 14.4981 5.33892 13.1755L5.20737 13.1865L1.74255 15.8142L1.69727 15.9376C2.63043 17.7602 4.06252 19.2925 5.83341 20.3631C7.60429 21.4337 9.64416 22.0005 11.7249 22\"\n              fill=\"#34A853\"\n            />\n            <path\n              d=\"M5.33889 13.1755C5.09338 12.4753 4.96669 11.7404 4.96388 11C4.9684 10.2608 5.09041 9.52685 5.32552 8.8245L5.31927 8.67868L1.81196 6.00867L1.69724 6.06214C0.910039 7.5938 0.5 9.28491 0.5 10.9999C0.5 12.7148 0.910039 14.406 1.69724 15.9376L5.33889 13.1755Z\"\n              fill=\"#FBBC05\"\n            />\n            <path\n              d=\"M11.7249 4.25337C13.3333 4.22889 14.8888 4.8159 16.065 5.89121L19.2329 2.86003C17.2011 0.992106 14.5106 -0.0328008 11.7249 3.27798e-05C9.64418 -0.000452376 7.60433 0.566279 5.83345 1.63686C4.06256 2.70743 2.63046 4.23965 1.69727 6.06218L5.32684 8.82455C5.77077 7.50213 6.62703 6.34962 7.77491 5.5295C8.9228 4.70938 10.3044 4.26302 11.7249 4.25337Z\"\n              fill=\"#EB4335\"\n            />\n          </g>\n          <defs>\n            <clipPath id=\"clip0_132_14584\">\n              <rect\n                width=\"22\"\n                height=\"22\"\n                fill=\"white\"\n                transform=\"translate(0.5)\"\n              />\n            </clipPath>\n          </defs>\n        </svg>\n        Sign in with Google\n      </button>\n\n      <button\n        onClick={() => signIn(\"github\")}\n        className=\"mt-4 flex w-full items-center justify-center gap-3 rounded-lg border border-white/[0.12] p-3.5 font-medium text-white duration-300 ease-in hover:border-purple\"\n      >\n        <svg\n          fill=\"currentColor\"\n          width=\"22\"\n          height=\"22\"\n          viewBox=\"0 0 64 64\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path d=\"M32 1.7998C15 1.7998 1 15.5998 1 32.7998C1 46.3998 9.9 57.9998 22.3 62.1998C23.9 62.4998 24.4 61.4998 24.4 60.7998C24.4 60.0998 24.4 58.0998 24.3 55.3998C15.7 57.3998 13.9 51.1998 13.9 51.1998C12.5 47.6998 10.4 46.6998 10.4 46.6998C7.6 44.6998 10.5 44.6998 10.5 44.6998C13.6 44.7998 15.3 47.8998 15.3 47.8998C18 52.6998 22.6 51.2998 24.3 50.3998C24.6 48.3998 25.4 46.9998 26.3 46.1998C19.5 45.4998 12.2 42.7998 12.2 30.9998C12.2 27.5998 13.5 24.8998 15.4 22.7998C15.1 22.0998 14 18.8998 15.7 14.5998C15.7 14.5998 18.4 13.7998 24.3 17.7998C26.8 17.0998 29.4 16.6998 32.1 16.6998C34.8 16.6998 37.5 16.9998 39.9 17.7998C45.8 13.8998 48.4 14.5998 48.4 14.5998C50.1 18.7998 49.1 22.0998 48.7 22.7998C50.7 24.8998 51.9 27.6998 51.9 30.9998C51.9 42.7998 44.6 45.4998 37.8 46.1998C38.9 47.1998 39.9 49.1998 39.9 51.9998C39.9 56.1998 39.8 59.4998 39.8 60.4998C39.8 61.2998 40.4 62.1998 41.9 61.8998C54.1 57.7998 63 46.2998 63 32.5998C62.9 15.5998 49 1.7998 32 1.7998Z\" />\n        </svg>\n        Sign in with Github\n      </button>\n    </>\n  );\n};\n\nexport default SocialSignup;\n ","size_bytes":3957},"src/components/Auth/SwitchOptions.tsx":{"content":"import React from \"react\";\n\nconst SwitchOptions = ({\n  isPassword,\n  setIsPassword,\n}: {\n  isPassword: boolean;\n  setIsPassword: (value: boolean) => void;\n}) => {\n  return (\n    <div className=\"mx-auto mb-12.5 mt-9 flex flex-col items-center justify-center gap-2.5 rounded-lg border border-white/[0.12] p-2 md:flex-row\">\n      <button\n        className={`hover:text-primary w-full rounded-lg px-6 py-3 text-base outline-hidden transition-all duration-300 hover:border-white/[0.12] hover:bg-white/25 hover:text-white\n        ${!isPassword ? \"border-white/[0.12] bg-white/25 text-white\" : \"bg-white/5\"}`}\n        onClick={() => setIsPassword(false)}\n      >\n        Magic Link\n      </button>\n      <button\n        className={`hover:text-primary w-full rounded-lg  px-6 py-3 text-base outline-hidden transition-all duration-300 hover:border-white/[0.12] hover:bg-white/25 hover:text-white ${\n          isPassword\n            ? \" border-white/[0.12] bg-white/25 text-white\"\n            : \"bg-white/5\"\n        }`}\n        onClick={() => setIsPassword(true)}\n      >\n        Password\n      </button>\n    </div>\n  );\n};\n\nexport default SwitchOptions;\n","size_bytes":1145},"src/components/Blog/BlogGridContainer.tsx":{"content":"\"use client\";\nimport type { Blog } from '@/types/blog';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport SingleBlog from './SingleBlog';\n\nconst BlogGridContainer = ({ blogs }: { blogs: Blog[] }) => {\n  const itemToLoad = 5;\n\n  const [hasMore, setHasMore] = useState(true);\n  const [showBlogs, setShowBlogs] = useState(blogs?.slice(0, itemToLoad));\n\n  const fetchMoreData = () => {\n    setTimeout(() => {\n      setShowBlogs(blogs.slice(0, showBlogs.length + itemToLoad));\n    }, 1500);\n  };\n\n  useEffect(() => {\n    if (\n      showBlogs?.length > blogs?.length ||\n      showBlogs?.length === blogs?.length\n    ) {\n      setHasMore(false);\n    }\n    if (showBlogs?.length < blogs?.length) {\n      setHasMore(true);\n    }\n  }, [showBlogs?.length, blogs?.length]);\n\n  return (\n    <div className='mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0'>\n      <InfiniteScroll\n        dataLength={showBlogs.length}\n        next={fetchMoreData}\n        hasMore={hasMore}\n        loader={\n          <div className='col-span-full flex w-full items-center justify-center px-4 text-white'>\n            Loading...\n          </div>\n        }\n        className='grid grid-cols-1 gap-x-7.5 gap-y-12.5 sm:grid-cols-2 lg:grid-cols-3'\n      >\n        {showBlogs?.map((blog) => <SingleBlog key={blog._id} blog={blog} />)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default BlogGridContainer;\n","size_bytes":1436},"src/components/Blog/SingleBlog.tsx":{"content":"import { imageBuilder } from \"@/sanity/sanity-utils\";\nimport { Blog } from \"@/types/blog\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\n\nconst SingleBlog = ({ blog }: { blog: Blog }) => {\n  const { title, mainImage, slug, metadata, author, tags, publishedAt } = blog;\n\n  return (\n    <div className='wow fadeInUp group relative isolate'>\n      <div className='relative mb-6 h-[222px] w-full overflow-hidden rounded-xl'>\n        <Image\n          src={imageBuilder(mainImage).url()}\n          alt={title}\n          fill\n          className='w-full scale-100 duration-500 ease-linear group-hover:scale-125'\n        />\n      </div>\n\n      <div className='mb-4.5 flex flex-wrap items-center gap-2.5'>\n        {tags?.map((tag) => (\n          <span\n            key={tag}\n            className='cursor-pointer rounded-full border border-white/10 bg-white/[0.07] px-2.5 py-[3px] text-xs font-medium duration-300 ease-out hover:border-white/25 hover:text-white'\n          >\n            {tag}\n          </span>\n        ))}\n      </div>\n\n      <h3>\n        <Link\n          href={`/blog/${slug.current}`}\n          className='line-clamp-2 text-xl font-semibold text-white duration-300 ease-in hover:opacity-80'\n        >\n          <span className='absolute inset-0' aria-hidden></span>\n          {title}\n        </Link>\n      </h3>\n      <p className='mt-4 line-clamp-3 font-medium'>{metadata}</p>\n\n      <div className='relative mt-6 flex flex-wrap items-center gap-4.5'>\n        <div className='flex cursor-pointer flex-wrap items-center gap-2 duration-300 ease-in hover:text-white'>\n          <svg\n            className='fill-current'\n            width='20'\n            height='20'\n            viewBox='0 0 20 20'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M10 8.75C7.65625 8.75 5.78125 6.90625 5.78125 4.65625C5.78125 2.40625 7.65625 0.5625 10 0.5625C12.3438 0.5625 14.2188 2.40625 14.2188 4.65625C14.2188 6.90625 12.3438 8.75 10 8.75ZM10 1.96875C8.4375 1.96875 7.1875 3.1875 7.1875 4.65625C7.1875 6.125 8.4375 7.34375 10 7.34375C11.5625 7.34375 12.8125 6.125 12.8125 4.65625C12.8125 3.1875 11.5625 1.96875 10 1.96875Z'\n              fill=''\n            />\n            <path\n              d='M16.5938 19.4688C16.2188 19.4688 15.875 19.1562 15.875 18.75V17.8438C15.875 14.5938 13.25 11.9688 10 11.9688C6.75 11.9688 4.125 14.5938 4.125 17.8438V18.75C4.125 19.125 3.8125 19.4688 3.40625 19.4688C3 19.4688 2.6875 19.1562 2.6875 18.75V17.8438C2.6875 13.8125 5.96875 10.5625 9.96875 10.5625C13.9688 10.5625 17.25 13.8437 17.25 17.8438V18.75C17.2813 19.125 16.9688 19.4688 16.5938 19.4688Z'\n              fill=''\n            />\n          </svg>\n\n          <Link\n            href={`/blog/author/${author?.slug?.current}`}\n            className='text-sm font-medium'\n          >\n            {author?.name}\n          </Link>\n        </div>\n        <div className='flex cursor-pointer flex-wrap items-center gap-2 duration-300 ease-in hover:text-white'>\n          <svg\n            className='fill-current'\n            width='20'\n            height='20'\n            viewBox='0 0 20 20'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n          >\n            <path\n              d='M17.5 3.3125H15.875V2.625C15.875 2.25 15.5625 1.90625 15.1562 1.90625C14.75 1.90625 14.4375 2.21875 14.4375 2.625V3.3125H5.53125V2.625C5.53125 2.25 5.21875 1.90625 4.8125 1.90625C4.40625 1.90625 4.09375 2.21875 4.09375 2.625V3.3125H2.5C1.4375 3.3125 0.53125 4.1875 0.53125 5.28125V16.1563C0.53125 17.2188 1.40625 18.125 2.5 18.125H17.5C18.5625 18.125 19.4687 17.25 19.4687 16.1563V5.25C19.4687 4.1875 18.5625 3.3125 17.5 3.3125ZM1.96875 9.125H4.625V12.2188H1.96875V9.125ZM6.03125 9.125H9.3125V12.2188H6.03125V9.125ZM9.3125 13.625V16.6875H6.03125V13.625H9.3125ZM10.7187 13.625H14V16.6875H10.7187V13.625ZM10.7187 12.2188V9.125H14V12.2188H10.7187ZM15.375 9.125H18.0312V12.2188H15.375V9.125ZM2.5 4.71875H4.125V5.375C4.125 5.75 4.4375 6.09375 4.84375 6.09375C5.25 6.09375 5.5625 5.78125 5.5625 5.375V4.71875H14.5V5.375C14.5 5.75 14.8125 6.09375 15.2187 6.09375C15.625 6.09375 15.9375 5.78125 15.9375 5.375V4.71875H17.5C17.8125 4.71875 18.0625 4.96875 18.0625 5.28125V7.71875H1.96875V5.28125C1.96875 4.96875 2.1875 4.71875 2.5 4.71875ZM1.96875 16.125V13.5938H4.625V16.6563H2.5C2.1875 16.6875 1.96875 16.4375 1.96875 16.125ZM17.5 16.6875H15.375V13.625H18.0312V16.1563C18.0625 16.4375 17.8125 16.6875 17.5 16.6875Z'\n              fill=''\n            />\n          </svg>\n\n          <span className='text-sm font-medium'>\n            {publishedAt &&\n              new Date(publishedAt)\n                .toDateString()\n                .split(' ')\n                .slice(1)\n                .join(' ')}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleBlog;\n","size_bytes":4858},"src/components/Blog/index.tsx":{"content":"import { getPosts } from \"@/sanity/sanity-utils\";\nimport { Blog } from \"@/types/blog\";\nimport SectionTitle from \"../Common/SectionTitle\";\nimport SingleBlog from \"./SingleBlog\";\n\nexport default async function BlogSection() {\n  const posts = await getPosts();\n\n  return (\n    <section className=\"py-20 lg:py-25\">\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <SectionTitle\n          subTitle=\"Read Our Latest Blogs\"\n          title=\"Latest Blogs & News\"\n          paragraph=\"Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.\"\n        />\n\n        <div className=\"grid grid-cols-1 gap-7.5 sm:grid-cols-2 lg:grid-cols-3\">\n          {posts.length > 0 &&\n            posts\n              .slice(0, 3)\n              .map((blog: Blog, index: number) => (\n                <SingleBlog key={index} blog={blog} />\n              ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1015},"src/components/Breadcrumb/index.tsx":{"content":"import Link from \"next/link\";\n\nconst Breadcrumb = ({ pageTitle }: { pageTitle: string }) => {\n  return (\n    <section className=\"relative z-10 pb-18 pt-30 lg:pt-35 xl:pt-40\">\n      <div className=\"absolute left-0 top-25 -z-1 flex w-full flex-col gap-3 opacity-50\">\n        <div className=\"footer-bg-gradient h-[1.24px] w-full\"></div>\n        <div className=\"footer-bg-gradient h-[2.47px] w-full\"></div>\n        <div className=\"footer-bg-gradient h-[3.71px] w-full\"></div>\n        <div className=\"footer-bg-gradient h-[4.99px] w-full\"></div>\n        <div className=\"footer-bg-gradient h-[6.19px] w-full\"></div>\n        <div className=\"footer-bg-gradient h-[7.42px] w-full\"></div>\n        <div className=\"footer-bg-gradient h-[8.66px] w-full\"></div>\n        <div className=\"footer-bg-gradient h-[9.90px] w-full\"></div>\n        <div className=\"footer-bg-gradient h-[13px] w-full\"></div>\n      </div>\n      <div className=\"absolute bottom-0 left-0 -z-1 h-24 w-full bg-linear-to-b from-dark/0 to-dark\"></div>\n\n      <div className=\"px-4 text-center\">\n        <h1 className=\"mb-5.5 text-heading-2 font-extrabold text-white\">\n          {pageTitle}\n        </h1>\n        <ul className=\"flex items-center justify-center gap-2\">\n          <li className=\"font-medium\">\n            <Link href=\"/\">Home</Link>\n          </li>\n          <li className=\"font-medium\">/ {pageTitle}</li>\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nexport default Breadcrumb;\n","size_bytes":1448},"src/components/CallToAction/index.tsx":{"content":"import Image from \"next/image\";\nimport Link from \"next/link\";\n\nconst CallToAction = () => {\n  return (\n    <section>\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <div className=\"cta-box-gradient relative z-999 overflow-hidden rounded-[30px] bg-dark px-4 py-20 lg:py-25\">\n          {/* <!-- bg shapes --> */}\n\n          <div className=\"absolute bottom-0 left-0 -z-1 h-full w-full bg-[url(/images/cta/grid.svg)] bg-cover bg-bottom bg-no-repeat\"></div>\n\n          <div className=\"pointer-events-none absolute inset-0 -z-10 overflow-hidden\">\n            <span className=\"absolute bottom-0 left-1/2 -z-1 h-full w-full -translate-x-1/2\">\n              <Image\n                src=\"/images/blur/blur-22.svg\"\n                alt=\"blur-sm\"\n                fill\n                className=\"max-w-none\"\n              />\n            </span>\n            <span className=\"absolute bottom-0 left-1/2 -z-1 h-full w-full -translate-x-1/2\">\n              <Image\n                src=\"/images/blur/blur-23.svg\"\n                alt=\"blur-sm\"\n                fill\n                className=\"max-w-none\"\n              />\n            </span>\n            <span className=\"absolute bottom-0 left-1/2 -z-1 aspect-530/253 max-w-[530px] -translate-x-1/2\">\n              <Image\n                src=\"/images/blur/blur-24.svg\"\n                alt=\"blur-sm\"\n                fill\n                className=\"max-w-none\"\n              />\n            </span>\n          </div>\n\n          {/* <!-- stars --> */}\n          <div className=\"absolute -bottom-25 left-1/2 -z-1 h-60 w-full max-w-[482px] -translate-x-1/2 overflow-hidden\">\n            <div className=\"stars\"></div>\n            <div className=\"stars2\"></div>\n          </div>\n\n          <div className=\"wow fadeInUp text-center\">\n            <span className=\"hero-subtitle-gradient relative mb-4 inline-flex items-center gap-2 rounded-full px-4.5 py-2 text-sm font-medium\">\n              <Image\n                src=\"/images/hero/icon-title.svg\"\n                alt=\"icon\"\n                width={17}\n                height={16}\n              />\n\n              <span className=\"hero-subtitle-text\">Try our tool for Free</span>\n            </span>\n            <h2 className=\"mb-4.5 text-2xl font-extrabold text-white sm:text-4xl xl:text-heading-2\">\n              What are you waiting for?\n            </h2>\n            <p className=\"mx-auto mb-9 max-w-[714px] font-medium\">\n              Build SaaS AI applications using OpenAI and Next.js, this kit\n              comes with pre-configured and pre-built examples, making it easier\n              to quickly kickstart your AI startup.\n            </p>\n\n            <Link\n              href=\"/\"\n              className=\"hero-button-gradient inline-flex rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n            >\n              Get Started for Free\n            </Link>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default CallToAction;\n","size_bytes":2996},"src/components/Common/Loader.tsx":{"content":"import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <span\n      className={`ml-1.5 h-4 w-4 animate-spin rounded-full border-2 border-solid border-white border-t-transparent dark:border-t-transparent`}\n    ></span>\n  );\n};\n\nexport default Loader;\n","size_bytes":260},"src/components/Common/SectionTitle.tsx":{"content":"import Image from \"next/image\";\n\ntype propsType = {\n  subTitle?: string;\n  title: string;\n  paragraph: string;\n  center?: boolean;\n  icon?: string;\n};\n\nconst SectionTitle = ({\n  subTitle,\n  title,\n  paragraph,\n  icon = \"/images/hero/icon-title.svg\",\n}: propsType) => {\n  return (\n    <div className=\"wow fadeInUp relative z-10 mb-16 text-center\">\n      <span className=\"hero-subtitle-gradient relative mb-4 inline-flex items-center gap-2 rounded-full px-4.5 py-2 text-sm font-medium\">\n        <Image src={icon} alt=\"icon\" width={16} height={16} />\n\n        <span className=\"hero-subtitle-text\"> {subTitle} </span>\n      </span>\n      <h2 className=\"mb-4.5 text-2xl font-extrabold text-white sm:text-4xl xl:text-heading-2\">\n        {title}\n      </h2>\n      <p className=\"mx-auto max-w-[714px] font-medium\">{paragraph}</p>\n    </div>\n  );\n};\n\nexport default SectionTitle;\n","size_bytes":871},"src/components/Docs/DocsContent.tsx":{"content":"\"use client\";\nimport Prism from \"prismjs\";\nimport { useEffect, useRef } from \"react\";\n\nconst DocsContent = ({ content }: any) => {\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n\n  const rootRef = useRef(null);\n  useEffect(() => {\n    // @ts-ignore\n    const allPres = rootRef?.current.querySelectorAll(\"pre\");\n\n    for (const pre of allPres) {\n      const code = pre.firstElementChild;\n\n      if (!code || !/code/i.test(code.tagName)) {\n        continue;\n      }\n\n      pre.appendChild(createCopyButton(code));\n    }\n\n    return;\n  });\n\n  return (\n    <div ref={rootRef}>\n      <div\n        className=\"blog-details\"\n        dangerouslySetInnerHTML={{ __html: content }}\n      />\n    </div>\n  );\n};\nexport default DocsContent;\n\nfunction createCopyButton(codeEl: any) {\n  const button = document.createElement(\"button\");\n  button.classList.add(\"prism-copy-button\");\n  button.textContent = \"Copy\";\n\n  button.addEventListener(\"click\", () => {\n    if (button.textContent === \"Copied\") {\n      return;\n    }\n    navigator.clipboard.writeText(codeEl.textContent || \"\");\n    button.textContent = \"Copied\";\n    button.disabled = true;\n    setTimeout(() => {\n      button.textContent = \"Copy\";\n      button.disabled = false;\n    }, 3000);\n  });\n\n  return button;\n}\n","size_bytes":1265},"src/components/Docs/SidebarLink.tsx":{"content":"\"use client\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\nconst SidebarLink = ({ post }: any) => {\n  const pathUrl = usePathname();\n\n  return (\n    <li>\n      <Link\n        href={`/docs/${post?.slug}`}\n        className={`block rounded-md px-3 py-2.5 font-medium duration-300 hover:text-white ${\n          pathUrl === `/docs/${post?.slug}` ? \"bg-white/10 text-white\" : \"\"\n        }`}\n      >\n        {post?.title}\n      </Link>\n    </li>\n  );\n};\n\nexport default SidebarLink;\n","size_bytes":509},"src/components/Faq/SingleFaq.tsx":{"content":"type FaqData = {\n  activeFaq: number;\n  id: number;\n  handleFaqToggle: (id: number) => void;\n  question: string;\n  answer: string;\n};\n\nconst SingleFaq = ({ faqData }: { faqData: FaqData }) => {\n  const { activeFaq, id, handleFaqToggle, question, answer } = faqData;\n\n  return (\n    <div className=\"flex flex-col border-b border-white/[0.15]\">\n      <h3\n        onClick={() => {\n          handleFaqToggle(id);\n        }}\n        className={`flex cursor-pointer items-center justify-between py-5 text-[22px] font-semibold leading-[28px] lg:py-7 ${\n          activeFaq === id ? \"text-white\" : \"\"\n        }`}\n      >\n        {question}\n        <span>\n          {activeFaq === id ? (\n            <svg\n              width=\"22\"\n              height=\"2\"\n              viewBox=\"0 0 22 2\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M21.125 1.86263H0.875012C0.425012 1.86263 0.0125122 1.48763 0.0125122 1.00013C0.0125122 0.550134 0.387512 0.137634 0.875012 0.137634H21.125C21.575 0.137634 21.9875 0.512634 21.9875 1.00013C21.9875 1.45013 21.575 1.86263 21.125 1.86263Z\"\n                fill=\"white\"\n              />\n            </svg>\n          ) : (\n            <svg\n              className=\"fill-current\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M22.5 11.1752H12.8625V1.5002C12.8625 1.0502 12.4875 0.637695 12 0.637695C11.55 0.637695 11.1375 1.0127 11.1375 1.5002V11.1752H1.50001C1.05001 11.1752 0.637512 11.5502 0.637512 12.0377C0.637512 12.4877 1.01251 12.9002 1.50001 12.9002H11.175V22.5002C11.175 22.9502 11.55 23.3627 12.0375 23.3627C12.4875 23.3627 12.9 22.9877 12.9 22.5002V12.8627H22.5C22.95 12.8627 23.3625 12.4877 23.3625 12.0002C23.3625 11.5502 22.95 11.1752 22.5 11.1752Z\"\n                fill=\"\"\n              />\n            </svg>\n          )}\n        </span>\n      </h3>\n      <div\n        className={`text-body-color dark:text-body-color-dark grid text-base`}\n        style={{\n          gridTemplateRows: `${activeFaq === id ? \"1fr\" : \"0fr\"}`,\n          transition: \"grid-template-rows 300ms\",\n        }}\n      >\n        <div className={`overflow-hidden transition-all duration-300`}>\n          <div className=\"pb-6 pt-1 font-medium\">{answer}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleFaq;\n","size_bytes":2487},"src/components/Faq/faqData.ts":{"content":"import { FAQ } from \"@/types/faq\";\n\nconst faqData: FAQ[] = [\n  {\n    id: 74,\n    question: \"What is ComplianceDrone's thermal inspection platform?\",\n    answer:\n      \"ComplianceDrone is a professional thermal inspection platform that uses AI-powered drone technology to detect thermal anomalies in solar installations and electrical infrastructure, generating comprehensive compliance reports in minutes.\",\n  },\n  {\n    id: 100,\n    question: \"Is there a limit on how much content I can generate?\",\n    answer:\n      \"ComplianceDrone is a professional thermal inspection platform that uses AI-powered drone technology to detect thermal anomalies in solar installations and electrical infrastructure, generating comprehensive compliance reports in minutes.\",\n  },\n  {\n    id: 7,\n    question: \"Is it helpful for Digital Marketer or Content Writer?\",\n    answer:\n      \"ComplianceDrone is a professional thermal inspection platform that uses AI-powered drone technology to detect thermal anomalies in solar installations and electrical infrastructure, generating comprehensive compliance reports in minutes.\",\n  },\n  {\n    id: 67,\n    question: \"What Languages does it supports?\",\n    answer:\n      \"ComplianceDrone is a professional thermal inspection platform that uses AI-powered drone technology to detect thermal anomalies in solar installations and electrical infrastructure, generating comprehensive compliance reports in minutes.\",\n  },\n  {\n    id: 9,\n    question: \"What is SEO Writing AI and how do I use it?\",\n    answer:\n      \"ComplianceDrone is a professional thermal inspection platform that uses AI-powered drone technology to detect thermal anomalies in solar installations and electrical infrastructure, generating comprehensive compliance reports in minutes.\",\n  },\n];\n\nexport default faqData;\n","size_bytes":1812},"src/components/Faq/index.tsx":{"content":"\"use client\";\nimport { useState } from \"react\";\nimport SectionTitle from \"../Common/SectionTitle\";\nimport SingleFaq from \"./SingleFaq\";\nimport faqData from \"./faqData\";\n\nconst Faq = () => {\n  const [activeFaq, setActiveFaq] = useState(1);\n\n  const handleFaqToggle = (id: number) => {\n    activeFaq === id ? setActiveFaq(0) : setActiveFaq(id);\n  };\n\n  return (\n    <section className=\"relative overflow-hidden pb-17.5 pt-20 lg:pb-22.5 lg:pt-25 xl:pb-27.5\">\n      {/* <!-- divider --> */}\n      <div className=\"about-divider-gradient absolute left-1/2 top-0 h-[1px] w-full max-w-[1170px] -translate-x-1/2\"></div>\n\n      <div className=\"mx-auto max-w-[770px] px-4 sm:px-8 xl:px-0\">\n        <SectionTitle\n          subTitle=\"Questions About ComplianceDrone?\"\n          title=\"Frequently Asked Questions\"\n          paragraph=\"Professional thermal inspection platform using AI-powered drone technology to detect anomalies in solar installations and electrical infrastructure. Get comprehensive reports in minutes.\"\n        />\n\n        <div className=\"wow fadeInUp\">\n          {faqData.map((faq: any, key: number) => (\n            <SingleFaq\n              key={key}\n              faqData={{ ...faq, activeFaq, handleFaqToggle }}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Faq;\n","size_bytes":1323},"src/components/Footer/FooterLinkList.tsx":{"content":"import { FooterLink } from \"@/types/footerLink\";\nconst FooterLinkList = ({ title, links }: { title: string; links: FooterLink[] }) => {\n  return (\n    <div>\n      <h3 className=\"mb-5 font-semibold text-white\">{title}</h3>\n\n      <ul className=\"flex flex-col gap-3.5\">\n        {links.map((link, index) => (\n          <li key={index}>\n            <a\n              href={link.href}\n              target={link.newTab ? \"_blank\" : \"_self\"}\n              rel={link.newTab ? \"nofollow noopenner\" : \"\"}\n              className=\"font-medium duration-300 ease-in hover:text-white\"\n            >\n              {link.title}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default FooterLinkList;\n","size_bytes":720},"src/components/Footer/index.tsx":{"content":"import Image from \"next/image\";\nimport Link from \"next/link\";\nimport FooterLinkList from \"./FooterLinkList\";\nimport { companiesLink, productsLink, supportsLink } from \"./linksData\";\n\nconst Footer = () => {\n  return (\n    <>\n      <footer className=\"relative z-10 pb-17.5 lg:pb-22.5 xl:pb-27.5\">\n        {/* <!-- bg shapes --> */}\n        <div className=\"absolute bottom-0 left-0 -z-1 flex w-full flex-col gap-3 opacity-50\">\n          <div className=\"footer-bg-gradient h-[1.24px] w-full\"></div>\n          <div className=\"footer-bg-gradient h-[2.47px] w-full\"></div>\n          <div className=\"footer-bg-gradient h-[3.71px] w-full\"></div>\n          <div className=\"footer-bg-gradient h-[4.99px] w-full\"></div>\n          <div className=\"footer-bg-gradient h-[6.19px] w-full\"></div>\n          <div className=\"footer-bg-gradient h-[7.42px] w-full\"></div>\n          <div className=\"footer-bg-gradient h-[8.66px] w-full\"></div>\n          <div className=\"footer-bg-gradient h-[9.90px] w-full\"></div>\n          <div className=\"footer-bg-gradient h-[13px] w-full\"></div>\n        </div>\n\n        <div className=\"relative mx-auto max-w-[1170px] px-4 pt-17.5 sm:px-8 xl:px-0\">\n          <div className=\"footer-divider-gradient absolute left-0 top-0 h-[1px] w-full\"></div>\n\n          <div className=\"flex flex-wrap justify-between\">\n            <div className=\"mb-10 w-full max-w-[520px]\">\n              <Link href=\"/\" className=\"mb-8.5 inline-block\">\n                <Image src=\"/images/ComplianceDrone-logo.png\" alt=\"ComplianceDrone Logo\" width={200} height={60} />\n              </Link>\n\n              <p className=\"mb-12 xl:w-4/5\">\n                Professional thermal inspection platform for solar installations and electrical infrastructure. \n                AI-powered drone technology detects thermal anomalies and generates comprehensive reports in minutes.\n              </p>\n\n              <div className=\"flex items-center gap-5\">\n                <a\n                  href=\"#\"\n                  aria-label=\"facebook\"\n                  className=\"duration-300 ease-in hover:text-white\"\n                >\n                  <svg\n                    className=\"fill-current\"\n                    width=\"24\"\n                    height=\"24\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      d=\"M13 21.9506C18.0533 21.4489 22 17.1853 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 16.8379 5.43552 20.8734 10 21.8V16H7V13H10V9.79586C10 7.47449 11.9695 5.64064 14.285 5.80603L17 5.99996V8.99996H15C13.8954 8.99996 13 9.89539 13 11V13H17L16 16H13V21.9506Z\"\n                      fill=\"\"\n                    />\n                  </svg>\n                </a>\n\n                <a\n                  href=\"#\"\n                  aria-label=\"twitter\"\n                  className=\"duration-300 ease-in hover:text-white\"\n                >\n                  <svg\n                    className=\"fill-current\"\n                    width=\"24\"\n                    height=\"24\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      d=\"M7.6125 21.5251C16.4625 21.5251 21.2625 14.2126 21.2625 7.87509C21.2625 7.72509 21.2625 7.46259 21.225 7.23759C22.1625 6.56259 22.9875 5.70009 23.625 4.76259C22.725 5.17509 21.825 5.40009 20.8875 5.51259C21.9 4.91259 22.65 3.97509 22.9875 2.8501C22.05 3.3751 21.075 3.78759 19.9125 4.01259C19.0125 3.0751 17.8125 2.4751 16.425 2.4751C13.7625 2.4751 11.5875 4.65009 11.5875 7.31259C11.5875 7.68759 11.625 8.06259 11.7 8.43759C7.8375 8.17509 4.3125 6.26259 1.9125 3.3751C1.5 4.12509 1.275 4.91259 1.275 5.77509C1.275 7.46259 2.1375 8.88759 3.45 9.75009C2.6625 9.71259 1.9125 9.48759 1.275 9.15009C1.275 9.18759 1.275 9.18759 1.275 9.18759C1.275 11.4751 2.925 13.4626 5.1 13.9126C4.6875 14.0251 4.2375 14.0626 3.9 14.0626C3.6 14.0626 3.2625 14.0251 3 13.9501C3.6375 15.8626 5.4 17.2501 7.5 17.2876C5.85 18.5626 3.7875 19.3501 1.575 19.3501C1.125 19.4251 0.75 19.3501 0.375 19.3126C2.4 20.7376 4.9125 21.5251 7.6125 21.5251Z\"\n                      fill=\"\"\n                    />\n                  </svg>\n                </a>\n\n                <a\n                  href=\"#\"\n                  aria-label=\"github\"\n                  className=\"duration-300 ease-in hover:text-white\"\n                >\n                  <svg\n                    className=\"fill-current\"\n                    width=\"24\"\n                    height=\"24\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <g clipPath=\"url(#clip0_368_11839)\">\n                      <path\n                        d=\"M12 0.674805C5.625 0.674805 0.375 5.8498 0.375 12.2998C0.375 17.3998 3.7125 21.7498 8.3625 23.3248C8.9625 23.4373 9.15 23.0623 9.15 22.7998C9.15 22.5373 9.15 21.7873 9.1125 20.7748C5.8875 21.5248 5.2125 19.1998 5.2125 19.1998C4.6875 17.8873 3.9 17.5123 3.9 17.5123C2.85 16.7623 3.9375 16.7623 3.9375 16.7623C5.1 16.7998 5.7375 17.9623 5.7375 17.9623C6.75 19.7623 8.475 19.2373 9.1125 18.8998C9.225 18.1498 9.525 17.6248 9.8625 17.3248C7.3125 17.0623 4.575 16.0498 4.575 11.6248C4.575 10.3498 5.0625 9.3373 5.775 8.5498C5.6625 8.2873 5.25 7.0873 5.8875 5.4748C5.8875 5.4748 6.9 5.1748 9.1125 6.6748C10.05 6.4123 11.025 6.2623 12.0375 6.2623C13.05 6.2623 14.0625 6.3748 14.9625 6.6748C17.175 5.2123 18.15 5.4748 18.15 5.4748C18.7875 7.0498 18.4125 8.2873 18.2625 8.5498C19.0125 9.3373 19.4625 10.3873 19.4625 11.6248C19.4625 16.0498 16.725 17.0623 14.175 17.3248C14.5875 17.6998 14.9625 18.4498 14.9625 19.4998C14.9625 21.0748 14.925 22.3123 14.925 22.6873C14.925 22.9873 15.15 23.3248 15.7125 23.2123C20.2875 21.6748 23.625 17.3623 23.625 12.2248C23.5875 5.8498 18.375 0.674805 12 0.674805Z\"\n                        fill=\"\"\n                      />\n                    </g>\n                    <defs>\n                      <clipPath id=\"clip0_368_11839\">\n                        <rect width=\"24\" height=\"24\" fill=\"white\" />\n                      </clipPath>\n                    </defs>\n                  </svg>\n                </a>\n              </div>\n\n              <p className=\"mt-5.5 font-medium\">\n                ComplianceDrone, LLC. All rights reserved.\n              </p>\n            </div>\n\n            <div className=\"w-full max-w-[571px]\">\n              <div className=\"flex flex-col gap-10 sm:flex-row sm:justify-between\">\n                <FooterLinkList title=\"Products\" links={productsLink} />\n\n                <FooterLinkList title=\"Company\" links={companiesLink} />\n\n                <FooterLinkList title=\"Support\" links={supportsLink} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </>\n  );\n};\n\nexport default Footer;\n","size_bytes":6966},"src/components/Footer/linksData.ts":{"content":"import { FooterLink } from \"@/types/footerLink\";\n\nexport const productsLink: FooterLink[] = [\n  {\n    id: 1,\n    title: \"Features\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 2,\n    title: \"Integrations\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 3,\n    title: \"Pricing\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 4,\n    title: \"Changes log\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 5,\n    title: \"Roadmap\",\n    href: \"#\",\n    newTab: false,\n  },\n];\n\nexport const companiesLink: FooterLink[] = [\n  {\n    id: 11,\n    title: \"Privacy Policy\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 12,\n    title: \"Refund Policy\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 13,\n    title: \"Support\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 14,\n    title: \"Community\",\n    href: \"#\",\n    newTab: false,\n  },\n];\nexport const supportsLink: FooterLink[] = [\n  {\n    id: 21,\n    title: \"Features\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 32,\n    title: \"Integrations\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 43,\n    title: \"Pricing\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 54,\n    title: \"Changes log\",\n    href: \"#\",\n    newTab: false,\n  },\n  {\n    id: 65,\n    title: \"Roadmap\",\n    href: \"#\",\n    newTab: false,\n  },\n];\n","size_bytes":1301},"src/components/Header/DropDown.tsx":{"content":"import Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Menu } from \"@/types/menu\";\n\nconst DropDown = ({ menuItem }: { menuItem: Menu }) => {\n  const [dropdownToggler, setDropdownToggler] = useState(false);\n  const pathUrl = usePathname();\n  return (\n    <>\n      {menuItem.title !== \"Pages\" ? (\n        <Link\n          onClick={() => setDropdownToggler(!dropdownToggler)}\n          className={`hover:nav-gradient relative flex items-center justify-between gap-3 border border-transparent px-4 py-1.5 text-sm hover:text-white ${\n            pathUrl === menuItem.path\n              ? \"nav-gradient text-white\"\n              : \"text-white/80\"\n          }`}\n          href={`${menuItem.path ? menuItem.path : \"\"}`}\n        >\n          {menuItem.title}\n          <span>\n            <svg\n              className=\"h-3 w-3 cursor-pointer fill-current\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n            >\n              <path d=\"M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z\" />\n            </svg>\n          </span>\n        </Link>\n      ) : (\n        <button\n          onClick={() => setDropdownToggler(!dropdownToggler)}\n          className={`hover:nav-gradient relative flex items-center justify-between gap-3 border border-transparent px-4 py-1.5 text-sm hover:text-white ${\n            pathUrl === menuItem.path\n              ? \"nav-gradient text-white\"\n              : \"text-white/80\"\n          }`}\n        >\n          {menuItem.title}\n          <span>\n            <svg\n              className=\"h-3 w-3 cursor-pointer fill-current\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n            >\n              <path d=\"M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z\" />\n            </svg>\n          </span>\n        </button>\n      )}\n\n      <ul className={`dropdown ${dropdownToggler ? \"flex\" : \"\"}`}>\n        {menuItem?.submenu &&\n          menuItem?.submenu.map((item, key) => (\n            <li key={key}>\n              <Link\n                href={item.path || \"#\"}\n                className=\"flex rounded-md px-4 py-2 text-sm text-white/70 hover:bg-white/5 hover:text-white\"\n              >\n                {item.title}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </>\n  );\n};\n\nexport default DropDown;\n","size_bytes":2619},"src/components/Header/index.tsx":{"content":"\"use client\";\nimport { signOut, useSession } from \"next-auth/react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport DropDown from \"./DropDown\";\nimport menuData from \"./menuData\";\n\nconst Header = () => {\n  const [navigationOpen, setNavigationOpen] = useState(false);\n  const [stickyMenu, setStickyMenu] = useState(false);\n\n  const { data: session } = useSession();\n\n  const pathUrl = usePathname();\n\n  // Sticky menu\n  const handleStickyMenu = () => {\n    if (window.scrollY >= 80) {\n      setStickyMenu(true);\n    } else {\n      setStickyMenu(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleStickyMenu);\n  });\n\n  return (\n    <>\n      <header\n        className={`fixed left-0 top-0 z-1000 w-full ${\n          stickyMenu\n            ? \"before:features-row-border bg-dark/70 py-4! shadow-sm backdrop-blur-lg transition duration-100 before:absolute before:bottom-0 before:left-0 before:h-[1px] before:w-full lg:py-0!\"\n            : \"py-7 lg:py-0\"\n        }`}\n      >\n        <div className=\"relative mx-auto max-w-[1170px] items-center justify-between px-4 sm:px-8 lg:flex xl:px-0\">\n          <div className=\"flex w-full items-center justify-between lg:w-1/4\">\n            <Link href=\"/\">\n              <Image src=\"/images/ComplianceDrone-logo.png\" alt=\"ComplianceDrone Logo\" width={200} height={60} />\n            </Link>\n\n            <button\n              onClick={() => setNavigationOpen(!navigationOpen)}\n              className=\"block lg:hidden\"\n            >\n              <span className=\"relative block h-5.5 w-5.5 cursor-pointer\">\n                <span className=\"du-block absolute right-0 h-full w-full\">\n                  <span\n                    className={`relative left-0 top-0 my-1 block h-0.5 rounded-sm bg-white delay-0 duration-200 ease-in-out ${\n                      !navigationOpen ? \"w-full! delay-300\" : \"w-0\"\n                    }`}\n                  ></span>\n                  <span\n                    className={`relative left-0 top-0 my-1 block h-0.5 rounded-sm bg-white delay-150 duration-200 ease-in-out ${\n                      !navigationOpen ? \"delay-400 w-full!\" : \"w-0\"\n                    }`}\n                  ></span>\n                  <span\n                    className={`relative left-0 top-0 my-1 block h-0.5 rounded-sm bg-white delay-200 duration-200 ease-in-out ${\n                      !navigationOpen ? \"w-full! delay-500\" : \"w-0\"\n                    }`}\n                  ></span>\n                </span>\n                <span className=\"du-block absolute right-0 h-full w-full rotate-45\">\n                  <span\n                    className={`absolute left-2.5 top-0 block h-full w-0.5 rounded-sm bg-white delay-300 duration-200 ease-in-out ${\n                      !navigationOpen ? \"h-0! delay-0\" : \"h-full\"\n                    }`}\n                  ></span>\n                  <span\n                    className={`delay-400 absolute left-0 top-2.5 block h-0.5 w-full rounded-sm bg-white duration-200 ease-in-out ${\n                      !navigationOpen ? \"h-0! delay-200\" : \"h-0.5\"\n                    }`}\n                  ></span>\n                </span>\n              </span>\n            </button>\n          </div>\n\n          <div\n            className={`invisible h-0 w-full items-center justify-between lg:visible lg:flex lg:h-auto lg:w-3/4 ${\n              navigationOpen\n                ? \"visible! relative mt-4 h-auto! max-h-[400px] overflow-y-scroll rounded-md bg-dark p-7.5 shadow-lg\"\n                : \"\"\n            }`}\n          >\n            <nav>\n              <ul className=\"flex flex-col gap-5 lg:flex-row lg:items-center lg:gap-2\">\n                {menuData.map((menuItem, key) => (\n                  <li\n                    key={key}\n                    className={`nav__menu group relative ${\n                      stickyMenu ? \"lg:py-4\" : \"lg:py-7\"\n                    }`}\n                  >\n                    {menuItem.submenu ? (\n                      <>\n                        <DropDown menuItem={menuItem} />\n                      </>\n                    ) : (\n                      <Link\n                        href={`${menuItem.path}`}\n                        className={`hover:nav-gradient relative border border-transparent px-4 py-1.5 text-sm hover:text-white ${\n                          pathUrl === menuItem.path\n                            ? \"nav-gradient text-white\"\n                            : \"text-white/80\"\n                        }`}\n                      >\n                        {menuItem.title}\n                      </Link>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </nav>\n\n            <div className=\"mt-7 flex items-center gap-6 lg:mt-0\">\n              {session ? (\n                <>\n                  <p>{session?.user?.name}</p>\n                  <button\n                    aria-label=\"Sign Out button\"\n                    onClick={() => signOut()}\n                    className=\"text-sm text-white hover:text-opacity-75\"\n                  >\n                    Sign Out\n                  </button>\n                </>\n              ) : (\n                <>\n                  <Link\n                    href=\"/auth/signin\"\n                    className=\"text-sm text-white hover:text-opacity-75\"\n                  >\n                    Sign In\n                  </Link>\n                  <Link\n                    href=\"/auth/signup\"\n                    className=\"button-border-gradient hover:button-gradient-hover relative flex items-center gap-1.5 rounded-lg px-4.5 py-2 text-sm text-white shadow-button hover:shadow-none\"\n                  >\n                    Sign up\n                    <svg\n                      className=\"mt-0.5\"\n                      width=\"16\"\n                      height=\"16\"\n                      viewBox=\"0 0 16 16\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M14.4002 7.60002L9.2252 2.35002C9.0002 2.12502 8.6502 2.12502 8.4252 2.35002C8.2002 2.57502 8.2002 2.92502 8.4252 3.15002L12.6252 7.42502H2.0002C1.7002 7.42502 1.4502 7.67502 1.4502 7.97502C1.4502 8.27502 1.7002 8.55003 2.0002 8.55003H12.6752L8.4252 12.875C8.2002 13.1 8.2002 13.45 8.4252 13.675C8.5252 13.775 8.6752 13.825 8.8252 13.825C8.9752 13.825 9.1252 13.775 9.2252 13.65L14.4002 8.40002C14.6252 8.17502 14.6252 7.82503 14.4002 7.60002Z\"\n                        fill=\"white\"\n                      />\n                    </svg>\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n    </>\n  );\n};\n\nexport default Header;\n","size_bytes":6836},"src/components/Header/menuData.ts":{"content":"import { Menu } from \"@/types/menu\";\n\nconst menuData: Menu[] = [\n  {\n    id: 1,\n    title: \"Home\",\n    newTab: false,\n    path: \"/\",\n  },\n  {\n    id: 2,\n    title: \"About\",\n    newTab: false,\n    path: \"/about\",\n  },\n  {\n    id: 4,\n    title: \"Blog\",\n    newTab: false,\n    path: \"/blog\",\n  },\n  {\n    id: 3,\n    title: \"Docs\",\n    newTab: false,\n    path: \"/docs\",\n  },\n  {\n    id: 5,\n    title: \"Pages\",\n    newTab: false,\n    submenu: [\n      {\n        id: 301,\n        title: \"About Page\",\n        newTab: false,\n        path: \"/about\",\n      },\n      {\n        id: 391,\n        title: \"Pricing\",\n        newTab: false,\n        path: \"/pricing\",\n      },\n      {\n        id: 31,\n        title: \"Blog Grid\",\n        newTab: false,\n        path: \"/blog\",\n      },\n      {\n        id: 34,\n        title: \"Sign In\",\n        newTab: false,\n        path: \"/auth/signin\",\n      },\n      {\n        id: 35,\n        title: \"Sign Up\",\n        newTab: false,\n        path: \"/auth/signup\",\n      },\n      {\n        id: 35,\n        title: \"Docs\",\n        newTab: false,\n        path: \"/docs\",\n      },\n      {\n        id: 36,\n        title: \"404\",\n        newTab: false,\n        path: \"/error\",\n      },\n    ],\n  },\n\n  {\n    id: 6,\n    title: \"OpenAI Examples\",\n    newTab: false,\n    path: \"/ai-examples\",\n    submenu: [\n      {\n        id: 66,\n        title: \"Content Writing Tool\",\n        newTab: false,\n        path: \"/ai-examples/content-writing-tool\",\n      },\n      {\n        id: 67,\n        title: \"Business Name Generator\",\n        newTab: false,\n        path: \"/ai-examples/business-name-generator\",\n      },\n      {\n        id: 69,\n        title: \"Product Name Generator\",\n        newTab: false,\n        path: \"/ai-examples/product-name-generator\",\n      },\n      {\n        id: 68,\n        title: \"Article Title Generator\",\n        newTab: false,\n        path: \"/ai-examples/article-title-generator\",\n      },\n      {\n        id: 70,\n        title: \"Spreadsheet Generator\",\n        newTab: false,\n        path: \"/ai-examples/spreadsheet-generator\",\n      },\n      {\n        id: 71,\n        title: \"Interview Question Generator\",\n        newTab: false,\n        path: \"/ai-examples/interview-question-generator\",\n      },\n    ],\n  },\n];\nexport default menuData;\n","size_bytes":2262},"src/components/Newsletter/index.tsx":{"content":"const Newsletter = () => {\n  return (\n    <section className=\"pb-11 pt-17.5 sm:pt-22.5 xl:pt-27.5\">\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <div className=\"flex flex-wrap items-center justify-between gap-10\">\n          <div className=\"w-full max-w-[352px]\">\n            <h3 className=\"mb-2 text-heading-5 font-semibold text-white\">\n              News & Update\n            </h3>\n            <p className=\"font-medium\">\n              Keep up to date with everything about our tool\n            </p>\n          </div>\n          <div className=\"w-full max-w-[534px]\">\n            <form>\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-full max-w-[395px]\">\n                  <input\n                    id=\"newsletterEmail\"\n                    type=\"email\"\n                    name=\"newsletterEmail\"\n                    placeholder=\"Enter your Email\"\n                    className=\"w-full rounded-lg border border-white/[0.12] bg-white/[0.05] px-6 py-3 text-white outline-hidden focus:border-purple\"\n                  />\n                </div>\n                <button className=\"button-border-gradient hover:button-gradient-hover relative flex items-center gap-1.5 rounded-lg px-7 py-3.5 text-sm text-white shadow-button hover:shadow-none\">\n                  Subscribe\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Newsletter;\n","size_bytes":1502},"src/components/Pricing/OfferItem.tsx":{"content":"const icon1 = (\n  <svg\n    width=\"25\"\n    height=\"24\"\n    viewBox=\"0 0 25 24\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clipPath=\"url(#clip0_67_11301)\">\n      <path\n        d=\"M24.5 12C24.5 5.37258 19.1274 0 12.5 0C5.87258 0 0.5 5.37258 0.5 12C0.5 18.6274 5.87258 24 12.5 24C19.1274 24 24.5 18.6274 24.5 12Z\"\n        fill=\"url(#paint0_linear_67_11301)\"\n        fillOpacity=\"0.08\"\n      />\n      <g filter=\"url(#filter0_d_67_11301)\">\n        <path d=\"M12.5 9L15.5 12L12.5 15L9.5 12L12.5 9Z\" fill=\"#F3EEFF\" />\n      </g>\n      <path\n        d=\"M24 12C24 5.64873 18.8513 0.5 12.5 0.5C6.14873 0.5 1 5.64873 1 12C1 18.3513 6.14873 23.5 12.5 23.5C18.8513 23.5 24 18.3513 24 12Z\"\n        stroke=\"#F3EEFF\"\n        strokeOpacity=\"0.06\"\n      />\n    </g>\n    <defs>\n      <filter\n        id=\"filter0_d_67_11301\"\n        x=\"3.5\"\n        y=\"3\"\n        width=\"18\"\n        height=\"18\"\n        filterUnits=\"userSpaceOnUse\"\n        colorInterpolationFilters=\"sRGB\"\n      >\n        <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n        <feColorMatrix\n          in=\"SourceAlpha\"\n          type=\"matrix\"\n          values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n          result=\"hardAlpha\"\n        />\n        <feOffset />\n        <feGaussianBlur stdDeviation=\"3\" />\n        <feComposite in2=\"hardAlpha\" operator=\"out\" />\n        <feColorMatrix\n          type=\"matrix\"\n          values=\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.55 0\"\n        />\n        <feBlend\n          mode=\"normal\"\n          in2=\"BackgroundImageFix\"\n          result=\"effect1_dropShadow_67_11301\"\n        />\n        <feBlend\n          mode=\"normal\"\n          in=\"SourceGraphic\"\n          in2=\"effect1_dropShadow_67_11301\"\n          result=\"shape\"\n        />\n      </filter>\n      <linearGradient\n        id=\"paint0_linear_67_11301\"\n        x1=\"12.5\"\n        y1=\"0\"\n        x2=\"12.5\"\n        y2=\"24\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stopColor=\"#F3EEFF\" stopOpacity=\"0\" />\n        <stop offset=\"1\" stopColor=\"#F3EEFF\" />\n      </linearGradient>\n      <clipPath id=\"clip0_67_11301\">\n        <rect width=\"25\" height=\"24\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n);\n\nconst OfferItem = ({ text }: { text: string }) => {\n  return (\n    <li className=\"flex items-center gap-5\">\n      {icon1}\n      <span className=\"font-medium\">{text}</span>\n    </li>\n  );\n};\n\nexport default OfferItem;\n","size_bytes":2408},"src/components/Pricing/PricingGrids.tsx":{"content":"import SectionTitle from \"../Common/SectionTitle\";\nimport SinglePricing from \"./SInglePricing\";\nimport { pricingData } from \"../../../stripe/pricingData\";\n\nconst PricingGrids = () => {\n  return (\n    <div>\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <SectionTitle\n          subTitle=\"Get access\"\n          title=\"Our Pricing Plan\"\n          paragraph=\"Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.\"\n        />\n        <div className=\"grid grid-cols-1 gap-7.5 sm:grid-cols-2 lg:grid-cols-3\">\n          {pricingData &&\n            pricingData.map((price, key) => (\n              <SinglePricing price={price} key={key} />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PricingGrids;\n","size_bytes":865},"src/components/Pricing/SInglePricing.tsx":{"content":"\"use client\";\n\nimport axios from \"axios\";\nimport Image from \"next/image\";\nimport OfferItem from \"./OfferItem\";\nimport { integrations, messages } from \"../../../integrations.config\";\nimport toast from \"react-hot-toast\";\n\nconst SinglePricing = ({ price }: any) => {\n  // POST request\n  const handleSubscription = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isStripeEnabled) {\n      toast.error(messages.stripe);\n      return;\n    }\n\n    const { data } = await axios.post(\n      \"/api/payment\",\n      {\n        priceId: price.id,\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    );\n    window.location.assign(data);\n  };\n\n  return (\n    <div className=\"wow fadeInUp pricing-item-border relative z-20 overflow-hidden rounded-3xl bg-dark px-8 pb-10 pt-12.5 xl:px-10\">\n      <span className=\"absolute right-9 top-9\">\n        <Image\n          src={\n            price.nickname === \"Small\"\n              ? \"./images/pricing/pricing-icon-01.svg\"\n              : price.nickname === \"Medium\"\n                ? \"./images/pricing/pricing-icon-02.svg\"\n                : \"./images/pricing/pricing-icon-03.svg\"\n          }\n          alt=\"icon\"\n          width={44}\n          height={44}\n        />\n      </span>\n\n      <h3 className=\"mb-5.5 text-heading-6 font-semibold text-white\">\n        {price.nickname === \"Small\" && \"Starter\"}\n        {price.nickname === \"Medium\" && \"Medium\"}\n        {price.nickname === \"Large\" && \"Business\"}\n      </h3>\n\n      <div className=\"flex items-center gap-3.5\">\n        <h2 className=\"pricing-gradient-text text-custom-1 font-bold\">\n          ${\" \"}\n          {(price.unit_amount / 100).toLocaleString(\"en-US\", {\n            currency: \"USD\",\n          })}\n        </h2>\n\n        <p className=\"font-medium\">\n          /month <br />\n          (billed annually)\n        </p>\n      </div>\n\n      <div className=\"pricing-gradient-divider my-10 h-[1px] w-full\"></div>\n\n      {price.nickname === \"Small\" && (\n        <ul className=\"flex flex-col gap-4\">\n          <OfferItem text=\"Subscription with levels\" />\n          <OfferItem text=\"Advanced features included\" />\n          <OfferItem text=\"Shared workspaces & tools\" />\n          <OfferItem text=\"Premium versions functionality\" />\n          <OfferItem text=\"Customizing the outputs\" />\n          <OfferItem text=\"Priority customer support\" />\n        </ul>\n      )}\n\n      {price.nickname === \"Medium\" && (\n        <ul className=\"flex flex-col gap-4\">\n          <OfferItem text=\"Subscription with levels\" />\n          <OfferItem text=\"Advanced features included\" />\n          <OfferItem text=\"Shared workspaces & tools\" />\n          <OfferItem text=\"Premium versions functionality\" />\n          <OfferItem text=\"Customizing the outputs\" />\n          <OfferItem text=\"Priority customer support\" />\n        </ul>\n      )}\n      {price.nickname === \"Large\" && (\n        <ul className=\"flex flex-col gap-4\">\n          <OfferItem text=\"Subscription with levels\" />\n          <OfferItem text=\"Advanced features included\" />\n          <OfferItem text=\"Shared workspaces & tools\" />\n          <OfferItem text=\"Premium versions functionality\" />\n          <OfferItem text=\"Customizing the outputs\" />\n          <OfferItem text=\"Priority customer support\" />\n        </ul>\n      )}\n\n      <button\n        aria-label=\"Get the plan button\"\n        onClick={handleSubscription}\n        className=\"pricing-button-gradient relative mt-11 flex w-full items-center justify-center gap-1.5 rounded-lg p-3 font-medium text-white transition-all duration-300 ease-in-out hover:shadow-button\"\n      >\n        Get the plan\n        <svg\n          width=\"17\"\n          height=\"16\"\n          viewBox=\"0 0 17 16\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M14.8992 7.5999L9.72422 2.3499C9.49922 2.1249 9.14922 2.1249 8.92422 2.3499C8.69922 2.5749 8.69922 2.9249 8.92422 3.1499L13.1242 7.4249H2.49922C2.19922 7.4249 1.94922 7.6749 1.94922 7.9749C1.94922 8.2749 2.19922 8.5499 2.49922 8.5499H13.1742L8.92422 12.8749C8.69922 13.0999 8.69922 13.4499 8.92422 13.6749C9.02422 13.7749 9.17422 13.8249 9.32422 13.8249C9.47422 13.8249 9.62422 13.7749 9.72422 13.6499L14.8992 8.3999C15.1242 8.1749 15.1242 7.8249 14.8992 7.5999Z\"\n            fill=\"white\"\n          />\n        </svg>\n      </button>\n\n      <p className=\"mt-4 text-center text-sm\">No extra hidden charge</p>\n\n      {/* <!-- bg shapes --> */}\n      <div className=\"pointer-events-none absolute inset-0 -z-10 overflow-hidden\">\n        <span className=\"absolute bottom-0 left-0 -z-1 aspect-370/553 w-full\">\n          <Image\n            src=\"/images/blur/blur-16.svg\"\n            alt=\"blur-sm\"\n            fill\n            className=\"max-w-none\"\n          />\n        </span>\n        <span className=\"absolute left-0 top-0 -z-1 aspect-370/350 w-full\">\n          <Image\n            src=\"/images/blur/blur-17.svg\"\n            alt=\"blur-sm\"\n            fill\n            className=\"max-w-none\"\n          />\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default SinglePricing;\n","size_bytes":5117},"src/components/Pricing/index.tsx":{"content":"import Image from \"next/image\";\nimport PricingGrids from \"./PricingGrids\";\n\nconst Pricing = () => {\n  return (\n    <section\n      id=\"pricing\"\n      className=\"relative z-20 scroll-mt-17 overflow-hidden pt-22.5 lg:pt-27.5 xl:pt-32.5\"\n    >\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        {/* <!-- bg circles --> */}\n        <div className=\"relative top-18\">\n          <div className=\"pointer-events-none absolute inset-0 -z-10 -my-55 overflow-hidden\">\n            <div className=\"absolute left-1/2 top-0 mx-auto aspect-square w-full max-w-[925px] -translate-x-1/2\">\n              <Image\n                src=\"/images/blur/blur-13.svg\"\n                alt=\"blur-sm\"\n                fill\n                className=\"max-w-none\"\n              />\n            </div>\n            <div className=\"absolute left-1/2 top-0 mx-auto aspect-square w-full max-w-[778px] -translate-x-1/2\">\n              <Image\n                src=\"/images/blur/blur-14.svg\"\n                alt=\"blur-sm\"\n                fill\n                className=\"max-w-none\"\n              />\n            </div>\n            <div className=\"absolute left-1/2 top-0 mx-auto aspect-square w-full max-w-[584px] -translate-x-1/2\">\n              <Image\n                src=\"/images/blur/blur-15.svg\"\n                alt=\"blur-sm\"\n                fill\n                className=\"max-w-none\"\n              />\n            </div>\n          </div>\n          <div className=\"pricing-circle absolute left-1/2 top-0 h-[830px] w-full max-w-[830px] -translate-x-1/2 rounded-full bg-dark\"></div>\n\n          <div className=\"absolute -top-30 left-1/2 -z-1 h-60 w-full max-w-[482px] -translate-x-1/2 overflow-hidden\">\n            <div className=\"stars\"></div>\n            <div className=\"stars2\"></div>\n          </div>\n        </div>\n\n        {/* <!-- grid row --> */}\n        <div className=\"relative -z-1 flex justify-center gap-7.5\">\n          <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n          <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n          <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n          <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n          <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n          <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n          <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n          <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n        </div>\n\n        <PricingGrids />\n      </div>\n    </section>\n  );\n};\n\nexport default Pricing;\n","size_bytes":2852},"src/components/ScrollToTop/index.tsx":{"content":"'use client';\n\nimport { useEffect, useState } from 'react';\n\nexport default function ScrollToTop() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.scrollY > 300) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener('scroll', toggleVisibility);\n\n    return () => window.removeEventListener('scroll', toggleVisibility);\n  }, []);\n\n  return (\n    <button\n      onClick={scrollToTop}\n      className='bg-purple fixed right-8 bottom-8 size-10 place-items-center rounded-sm text-white shadow-md transition-opacity duration-300 hover:opacity-70'\n      style={{\n        display: isVisible ? 'grid' : 'none',\n      }}\n    >\n      <span className='sr-only'>Scroll to top</span>\n\n      <svg\n        className='size-5 fill-white'\n        xmlns='http://www.w3.org/2000/svg'\n        viewBox='0 0 512 512'\n      >\n        <path d='M233.4 105.4c12.5-12.5 32.8-12.5 45.3 0l192 192c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L256 173.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l192-192z' />\n      </svg>\n    </button>\n  );\n}\n","size_bytes":1276},"src/components/Support/index.tsx":{"content":"import Image from \"next/image\";\nimport SectionTitle from \"../Common/SectionTitle\";\n\nconst Support = () => {\n  return (\n    <section id=\"support\" className=\"scroll-mt-17\">\n      <div className=\"mx-auto max-w-[1104px] px-4 sm:px-8 xl:px-0\">\n        <div className=\"relative z-999 overflow-hidden rounded-[30px] bg-dark px-4 pt-25 sm:px-20 lg:px-27.5\">\n          {/* <!-- grid row --> */}\n          <div className=\"absolute -top-[16%] left-1/2 -z-1 flex w-full max-w-[690px] -translate-x-1/2 justify-center gap-7.5 opacity-40\">\n            <div className=\"pricing-grid pricing-grid-border relative bottom-12 h-[250px] w-full max-w-[50px]\"></div>\n            <div className=\"pricing-grid pricing-grid-border relative bottom-7 h-[250px] w-full max-w-[50px]\"></div>\n            <div className=\"pricing-grid pricing-grid-border relative bottom-3 h-[250px] w-full max-w-[50px]\"></div>\n            <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n            <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n            <div className=\"pricing-grid pricing-grid-border relative h-[250px] w-full max-w-[50px]\"></div>\n            <div className=\"pricing-grid pricing-grid-border relative bottom-2 h-[250px] w-full max-w-[50px]\"></div>\n            <div className=\"pricing-grid pricing-grid-border relative bottom-5 h-[250px] w-full max-w-[50px]\"></div>\n            <div className=\"pricing-grid pricing-grid-border relative bottom-8 h-[250px] w-full max-w-[50px]\"></div>\n          </div>\n\n          {/* <!-- stars --> */}\n          <div className=\"absolute -top-30 left-1/2 -z-1 h-60 w-full max-w-[482px] -translate-x-1/2 overflow-hidden\">\n            <div className=\"stars\"></div>\n            <div className=\"stars2\"></div>\n          </div>\n\n          {/* <!-- bg shapes --> */}\n          <div className=\"pointer-events-none absolute inset-0 -z-10 overflow-hidden\">\n            <span className=\"absolute left-1/2 top-0 -z-1 h-full w-full -translate-x-1/2 bg-[url(/images/blur/blur-19.svg)] bg-cover bg-center bg-no-repeat\"></span>\n\n            <span className=\"absolute left-1/2 top-0 -z-1 aspect-1170/592 w-full -translate-x-1/2\">\n              <Image\n                src=\"/images/blur/blur-20.svg\"\n                alt=\"blur-sm\"\n                fill\n                className=\"max-w-none\"\n              />\n            </span>\n            <span className=\"absolute left-1/2 top-0 -z-1 mx-auto aspect-530/254 w-full max-w-[530px] -translate-x-1/2\">\n              <Image\n                src=\"/images/blur/blur-21.svg\"\n                alt=\"blur-sm\"\n                fill\n                className=\"max-w-none\"\n              />\n            </span>\n          </div>\n\n          <SectionTitle\n            subTitle=\"Need Any Help?\"\n            title=\"Contact With Us\"\n            paragraph=\"Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.\"\n          />\n\n          {/* <!-- support form --> */}\n          <div className=\"form-box-gradient relative overflow-hidden rounded-[25px] p-6 sm:p-8 xl:p-15\">\n            <form\n              action=\"https://formbold.com/s/unique_form_id\"\n              method=\"POST\"\n              className=\"relative z-10\"\n            >\n              <div className=\"-mx-4 flex flex-wrap xl:-mx-10\">\n                <div className=\"w-full px-4 md:w-1/2 xl:px-5\">\n                  <div className=\"mb-9.5\">\n                    <label\n                      htmlFor=\"name\"\n                      className=\"mb-2.5 block font-medium text-white\"\n                    >\n                      Name\n                    </label>\n                    <input\n                      id=\"name\"\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder=\"Enter your Name\"\n                      required\n                      className=\"w-full rounded-lg border border-white/[0.12] bg-white/[0.05] px-6 py-3 text-white outline-hidden focus:border-purple\"\n                    />\n                  </div>\n                </div>\n                <div className=\"w-full px-4 md:w-1/2 xl:px-5\">\n                  <div className=\"mb-9.5\">\n                    <label\n                      htmlFor=\"email\"\n                      className=\"mb-2.5 block font-medium text-white\"\n                    >\n                      Email\n                    </label>\n                    <input\n                      id=\"email\"\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder=\"Enter your Email\"\n                      required\n                      className=\"w-full rounded-lg border border-white/[0.12] bg-white/[0.05] px-6 py-3 text-white outline-hidden focus:border-purple\"\n                    />\n                  </div>\n                </div>\n                <div className=\"w-full px-4 xl:px-5\">\n                  <div className=\"mb-10\">\n                    <label\n                      htmlFor=\"message\"\n                      className=\"mb-2.5 block font-medium text-white\"\n                    >\n                      Message\n                    </label>\n                    <textarea\n                      id=\"message\"\n                      name=\"message\"\n                      placeholder=\"Type your message\"\n                      rows={6}\n                      required\n                      className=\"w-full rounded-lg border border-white/[0.12] bg-white/[0.05] px-6 py-5 outline-hidden focus:border-purple\"\n                    />\n                  </div>\n                </div>\n                <div className=\"w-full px-4 xl:px-5\">\n                  <div className=\"text-center\">\n                    <button\n                      type=\"submit\"\n                      className=\"hero-button-gradient inline-flex rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n                    >\n                      Send Message\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Support;\n","size_bytes":6248},"src/sanity/config/client-config.ts":{"content":"const config = {\n  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID as string,\n  dataset: \"production\",\n  apiVersion: \"2023-06-19\",\n  token: process.env.SNITY_API_KEY as string,\n  useCdn: false,\n};\n\nexport default config;\n","size_bytes":226},"src/sanity/schemas/author.ts":{"content":"const author = {\n  name: \"author\",\n  title: \"Author\",\n  type: \"document\",\n  fields: [\n    {\n      name: \"name\",\n      title: \"Name\",\n      type: \"string\",\n    },\n    {\n      name: \"slug\",\n      title: \"Slug\",\n      type: \"slug\",\n      options: {\n        source: \"name\",\n        maxLength: 96,\n      },\n    },\n    {\n      name: \"image\",\n      title: \"Image\",\n      type: \"image\",\n      options: {\n        hotspot: true,\n      },\n    },\n    {\n      name: \"bio\",\n      title: \"Bio\",\n      type: \"array\",\n      of: [\n        {\n          title: \"Block\",\n          type: \"block\",\n          styles: [{ title: \"Normal\", value: \"normal\" }],\n          lists: [],\n        },\n      ],\n    },\n  ],\n  preview: {\n    select: {\n      title: \"name\",\n      media: \"image\",\n    },\n  },\n};\nexport default author;\n","size_bytes":793},"src/sanity/schemas/blockContent.ts":{"content":"/**\n * This is the schema definition for the rich text fields used for\n * for this blog studio. When you import it in schemas.js it can be\n * reused in other parts of the studio with:\n *  {\n *    name: 'someName',\n *    title: 'Some title',\n *    type: 'blockContent'\n *  }\n */\nconst blockContent = {\n  title: \"Block Content\",\n  name: \"blockContent\",\n  type: \"array\",\n  of: [\n    {\n      title: \"Block\",\n      type: \"block\",\n      // Styles let you set what your user can mark up blocks with. These\n      // correspond with HTML tags, but you can set any title or value\n      // you want and decide how you want to deal with it where you want to\n      // use your content.\n      styles: [\n        { title: \"Normal\", value: \"normal\" },\n        { title: \"H1\", value: \"h1\" },\n        { title: \"H2\", value: \"h2\" },\n        { title: \"H3\", value: \"h3\" },\n        { title: \"H4\", value: \"h4\" },\n        { title: \"Quote\", value: \"blockquote\" },\n      ],\n      lists: [{ title: \"Bullet\", value: \"bullet\" }],\n      // Marks let you mark up inline text in the block editor.\n      marks: {\n        // Decorators usually describe a single property – e.g. a typographic\n        // preference or highlighting by editors.\n        decorators: [\n          { title: \"Strong\", value: \"strong\" },\n          { title: \"Emphasis\", value: \"em\" },\n        ],\n        // Annotations can be any object structure – e.g. a link or a footnote.\n        annotations: [\n          {\n            title: \"URL\",\n            name: \"link\",\n            type: \"object\",\n            fields: [\n              {\n                title: \"URL\",\n                name: \"href\",\n                type: \"string\",\n              },\n              {\n                title: \"Open in new tab\",\n                name: \"blank\",\n                type: \"boolean\",\n              },\n            ],\n            initialValue: {\n              blank: true,\n            },\n          },\n        ],\n      },\n    },\n    // You can add additional types here. Note that you can't use\n    // primitive types such as 'string' and 'number' in the same array\n    // as a block type.\n    {\n      type: \"image\",\n      options: { hotspot: true },\n    },\n  ],\n};\nexport default blockContent;\n","size_bytes":2208},"src/sanity/schemas/category.ts":{"content":"const category = {\n  name: \"tagDetail\",\n  title: \"Tag Detail\",\n  type: \"document\",\n  fields: [\n    {\n      name: \"tagname\",\n      title: \"Tag Name\",\n      type: \"string\",\n      options: {\n        source: \"tagname\",\n        unique: true,\n        slugify: (input: any) => {\n          return input\n            .toLowerCase()\n            .replace(/\\s+/g, \"-\")\n            .replace(/[^\\w-]+/g, \"\");\n        },\n      },\n      validation: (Rule: any) =>\n        Rule.custom((fields: any) => {\n          if (\n            fields !== fields.toLowerCase() ||\n            fields.split(\" \").includes(\"\")\n          ) {\n            return \"Tags must be lowercase and not be included space\";\n          }\n          return true;\n        }),\n    },\n    {\n      name: \"ogImage\",\n      title: \"Open Graph Image\",\n      type: \"image\",\n      options: {\n        hotspot: true,\n      },\n    },\n    {\n      name: \"title\",\n      title: \"Title\",\n      type: \"string\",\n    },\n    {\n      name: \"description\",\n      title: \"Description\",\n      type: \"text\",\n    },\n  ],\n};\nexport default category;\n","size_bytes":1068},"src/sanity/schemas/index.ts":{"content":"import author from \"./author\";\nimport blockContent from \"./blockContent\";\nimport category from \"./category\";\nimport post from \"./post\";\n\nconst schemas = [post, author, category, blockContent];\n\nexport default schemas;\n","size_bytes":218},"src/sanity/schemas/page-schema.ts":{"content":"const page = {\n  name: \"page\",\n  title: \"Pages\",\n  type: \"document\",\n  fields: [\n    {\n      name: \"title\",\n      title: \"Title\",\n      type: \"string\"\n    },\n    {\n      name: \"slug\",\n      title: \"Slug\",\n      type: \"slug\",\n      options: { source: \"title\", maxLength: 96 }\n    },\n    {\n      name: \"content\",\n      title: \"Content\",\n      type: \"array\",\n      of: [\n        { type: \"block\" }\n      ]\n    }\n  ]\n}\n\nexport default page;","size_bytes":435},"src/sanity/schemas/post.ts":{"content":"const post = {\n  name: \"post\",\n  title: \"Post\",\n  type: \"document\",\n  fields: [\n    {\n      name: \"title\",\n      title: \"Title\",\n      type: \"string\",\n      validation: (Rule: any) => Rule.required(),\n    },\n    {\n      name: \"metadata\",\n      title: \"Metadata\",\n      type: \"string\",\n    },\n    {\n      name: \"slug\",\n      title: \"Slug\",\n      type: \"slug\",\n      options: {\n        source: \"title\",\n        unique: true,\n        slugify: (input: any) => {\n          return input\n            .toLowerCase()\n            .replace(/\\s+/g, \"-\")\n            .replace(/[^\\w-]+/g, \"\");\n        },\n      },\n      validation: (Rule: any) =>\n        Rule.required().custom((fields: any) => {\n          if (\n            fields?.current !== fields?.current?.toLowerCase() ||\n            fields?.current.split(\" \").includes(\"\")\n          ) {\n            return \"Slug must be lowercase and not be included space\";\n          }\n          return true;\n        }),\n    },\n    {\n      name: \"tags\",\n      title: \"Tags\",\n      type: \"array\",\n      of: [\n        {\n          type: \"string\",\n          validation: (Rule: any) =>\n            Rule.custom((fields: any) => {\n              if (\n                fields !== fields.toLowerCase() ||\n                fields.split(\" \").includes(\"\")\n              ) {\n                return \"Tags must be lowercase and not be included space\";\n              }\n              return true;\n            }),\n        },\n      ],\n    },\n    {\n      name: \"author\",\n      title: \"Author\",\n      type: \"reference\",\n      to: { type: \"author\" },\n      validation: (Rule: any) => Rule.required(),\n    },\n    {\n      name: \"mainImage\",\n      title: \"Main image\",\n      type: \"image\",\n      options: {\n        hotspot: true,\n      },\n    },\n    {\n      name: \"publishedAt\",\n      title: \"Published at\",\n      type: \"datetime\",\n      validation: (Rule: any) => Rule.required(),\n    },\n    {\n      name: \"body\",\n      title: \"Body\",\n      type: \"blockContent\",\n    },\n  ],\n\n  preview: {\n    select: {\n      title: \"title\",\n      author: \"author.name\",\n      media: \"mainImage\",\n    },\n    prepare(selection: any) {\n      const { author } = selection;\n      return Object.assign({}, selection, {\n        subtitle: author && `by ${author}`,\n      });\n    },\n  },\n};\nexport default post;\n","size_bytes":2287},"src/sanity/schemas/project-schema.ts":{"content":"const project = {\n  name: \"project\",\n  title: \"Projects\",\n  type: \"document\",\n  fields: [\n    {\n      name: \"name\",\n      title: \"Name\",\n      type: \"string\",\n    },\n    {\n      name: \"slug\",\n      title: \"Slug\",\n      type: \"slug\",\n      options: { source: \"name\" }\n    },\n    {\n      name: \"image\",\n      title: \"Image\",\n      type: \"image\",\n      options: { hotspot: true },\n      fields: [\n        {\n          name: \"alt\",\n          title: \"Alt\",\n          type: \"string\"\n        }\n      ]\n    },\n    {\n      name: \"url\",\n      title: \"URL\",\n      type: \"url\"\n    },\n    {\n      name: \"content\",\n      title: \"Content\",\n      type: \"array\",\n      of: [{ type: \"block\" }]\n    }\n  ]\n}\n\nexport default project;","size_bytes":711},"src/app/(site)/about/page.tsx":{"content":"import AboutSection from \"@/components/About/AboutSection\";\nimport Team from \"@/components/About/Team\";\nimport Video from \"@/components/About/Video\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport CallToAction from \"@/components/CallToAction\";\nimport Clients from \"@/components/Home/Clients\";\nimport Features from \"@/components/Home/Features\";\nimport Reviews from \"@/components/Home/Reviews\";\nimport Newsletter from \"@/components/Newsletter\";\nimport { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"About | ComplianceDrone - Professional Thermal Inspection Platform\",\n  description: \"Learn about ComplianceDrone's professional thermal inspection platform for solar installations and electrical infrastructure\",\n  // other metadata\n};\n\nconst AboutPage = () => {\n  return (\n    <>\n      <Breadcrumb pageTitle=\"About Page\" />\n      <AboutSection />\n      <Features />\n      <Video />\n      <Team />\n      <section className=\"relative z-20 overflow-hidden pb-20\">\n        <Reviews />\n      </section>\n      <Clients />\n      <CallToAction />\n      <Newsletter />\n    </>\n  );\n};\n\nexport default AboutPage;\n","size_bytes":1136},"src/app/(site)/ai-examples/page.tsx":{"content":"\"use client\";\nimport APIkeyModal from \"@/components/AiTools/APIkeyModal\";\nimport AiToolExample from \"@/components/AiTools/AiToolExample\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport Image from \"next/image\";\nimport { useEffect, useState } from \"react\";\n\nconst AiToolPage = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isKeyAvailable, setIsKeyAvailable] = useState(false);\n\n  const handleModal = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleRemoveKey = () => {\n    localStorage.removeItem(\"apiKey\");\n    setIsKeyAvailable(false);\n  };\n\n  useEffect(() => {\n    const handleOutsideClick = (event: any) => {\n      if (isOpen && !event.target.closest(\".modal-content\")) {\n        setIsOpen(!isOpen);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener(\"mousedown\", handleOutsideClick);\n    } else {\n      document.removeEventListener(\"mousedown\", handleOutsideClick);\n    }\n\n    const key = localStorage.getItem(\"apiKey\");\n    if (key) {\n      setIsKeyAvailable(true);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleOutsideClick);\n    };\n  }, [isOpen]);\n\n  return (\n    <>\n      <title>OpenAI Examples | AI Tool - Next.js Template for AI Tools</title>\n      <meta name=\"description\" content=\"This is AI Examples page for AI Tool\" />\n\n      <Breadcrumb pageTitle=\"OpenAI Examples\" />\n\n      <section className=\"pb-25 pt-3\">\n        <div className=\"z-10 mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n          <div className=\"aiExamples-border-gredient relative flex flex-col items-center justify-center rounded-lg bg-white/[0.05] p-4 md:justify-between lg:flex-row lg:px-6 lg:py-2\">\n            <p className=\"text-center md:text-left\">\n              <Image\n                src={\"/images/ai-tools/icon-1.svg\"}\n                width={20}\n                height={20}\n                alt=\"icon\"\n                className=\"mr-2 inline-block\"\n              />\n              Note: You need to add an OpenAI API key to try example demos, on\n              production you can add it on .env\n            </p>\n            <button\n              onClick={isKeyAvailable ? handleRemoveKey : handleModal}\n              className=\"hero-button-gradient mt-2 inline-flex rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80 lg:mt-0\"\n            >\n              {isKeyAvailable ? \"Remove API Key\" : \"Set API Key\"}\n            </button>\n          </div>\n\n          <AiToolExample />\n        </div>\n\n        {isOpen && <APIkeyModal handleModal={handleModal} />}\n      </section>\n    </>\n  );\n};\n\nexport default AiToolPage;\n","size_bytes":2609},"src/app/(site)/blog/page.tsx":{"content":"import BlogGridContainer from \"@/components/Blog/BlogGridContainer\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport { getPosts } from \"@/sanity/sanity-utils\";\nimport { Metadata } from \"next\";\nimport { integrations, messages } from \"../../../../integrations.config\";\n\nexport const metadata: Metadata = {\n  title: \"Blog | AI Tool - Next.js Template for AI Tools\",\n  description: \"This is Blog page for AI Tool\",\n  // other metadata\n};\n\nexport default async function BlogPage() {\n  const posts = integrations.isSanityEnabled ? await getPosts() : [];\n\n  return (\n    <>\n      <Breadcrumb pageTitle='Blog Grid' />\n\n      <section className='pt-20 pb-17.5 lg:pt-25 lg:pb-22.5 xl:pb-27.5'>\n        <div className='mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0'>\n          {integrations?.isSanityEnabled ? (\n            <BlogGridContainer blogs={posts} />\n          ) : (\n            <div>{messages.sanity}</div>\n          )}\n        </div>\n      </section>\n    </>\n  );\n}\n","size_bytes":973},"src/app/(site)/contact/page.tsx":{"content":"import { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Request Quote - ComplianceDrone\",\n  description: \"Get a custom quote for professional thermal inspection services. Save thousands with early problem detection using our AI-powered drone technology.\",\n};\n\nexport default function ContactPage() {\n  return (\n    <section className=\"pb-20 pt-35 lg:pb-25 lg:pt-45 xl:pb-30 xl:pt-50\">\n      <div className=\"mx-auto max-w-4xl px-4 sm:px-8 xl:px-0\">\n        <div className=\"text-center\">\n          <h1 className=\"mb-6 text-3xl font-bold text-white sm:text-4xl lg:text-heading-2\">\n            Request Your Thermal Inspection Quote\n          </h1>\n          <p className=\"mx-auto mb-10 max-w-2xl text-lg text-waterloo\">\n            Get professional thermal inspection services that save thousands through early problem detection. \n            Our certified pilots use AI-powered drone technology to identify issues before they become costly failures.\n          </p>\n        </div>\n\n        <div className=\"mx-auto max-w-2xl\">\n          <form className=\"rounded-lg bg-white bg-opacity-[0.08] p-8 backdrop-blur-md\">\n            <div className=\"mb-6\">\n              <label htmlFor=\"company\" className=\"mb-3 block text-sm font-medium text-white\">\n                Company Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"company\"\n                name=\"company\"\n                required\n                className=\"w-full rounded-lg border border-white border-opacity-20 bg-white bg-opacity-10 px-4 py-3 text-white placeholder-gray-400 backdrop-blur-sm focus:border-primary focus:outline-none\"\n                placeholder=\"Your Company\"\n              />\n            </div>\n\n            <div className=\"mb-6 grid gap-6 sm:grid-cols-2\">\n              <div>\n                <label htmlFor=\"name\" className=\"mb-3 block text-sm font-medium text-white\">\n                  Contact Name *\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  required\n                  className=\"w-full rounded-lg border border-white border-opacity-20 bg-white bg-opacity-10 px-4 py-3 text-white placeholder-gray-400 backdrop-blur-sm focus:border-primary focus:outline-none\"\n                  placeholder=\"Your Name\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"email\" className=\"mb-3 block text-sm font-medium text-white\">\n                  Email Address *\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  required\n                  className=\"w-full rounded-lg border border-white border-opacity-20 bg-white bg-opacity-10 px-4 py-3 text-white placeholder-gray-400 backdrop-blur-sm focus:border-primary focus:outline-none\"\n                  placeholder=\"your@email.com\"\n                />\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <label htmlFor=\"facility\" className=\"mb-3 block text-sm font-medium text-white\">\n                Facility Type\n              </label>\n              <select \n                id=\"facility\"\n                name=\"facility\"\n                className=\"w-full rounded-lg border border-white border-opacity-20 bg-white bg-opacity-10 px-4 py-3 text-white backdrop-blur-sm focus:border-primary focus:outline-none\"\n              >\n                <option value=\"\">Select facility type</option>\n                <option value=\"solar\">Solar Installation</option>\n                <option value=\"electrical\">Electrical Infrastructure</option>\n                <option value=\"industrial\">Industrial Facility</option>\n                <option value=\"commercial\">Commercial Building</option>\n                <option value=\"other\">Other</option>\n              </select>\n            </div>\n\n            <div className=\"mb-6\">\n              <label htmlFor=\"location\" className=\"mb-3 block text-sm font-medium text-white\">\n                Facility Location\n              </label>\n              <input\n                type=\"text\"\n                id=\"location\"\n                name=\"location\"\n                className=\"w-full rounded-lg border border-white border-opacity-20 bg-white bg-opacity-10 px-4 py-3 text-white placeholder-gray-400 backdrop-blur-sm focus:border-primary focus:outline-none\"\n                placeholder=\"City, State\"\n              />\n            </div>\n\n            <div className=\"mb-8\">\n              <label htmlFor=\"message\" className=\"mb-3 block text-sm font-medium text-white\">\n                Project Details\n              </label>\n              <textarea\n                id=\"message\"\n                name=\"message\"\n                rows={4}\n                className=\"w-full rounded-lg border border-white border-opacity-20 bg-white bg-opacity-10 px-4 py-3 text-white placeholder-gray-400 backdrop-blur-sm focus:border-primary focus:outline-none\"\n                placeholder=\"Tell us about your inspection needs, timeline, and any specific concerns...\"\n              ></textarea>\n            </div>\n\n            <button\n              type=\"submit\"\n              className=\"w-full rounded-lg bg-primary px-6 py-3 font-medium text-white transition-colors hover:bg-primary-dark\"\n            >\n              Request Quote\n            </button>\n          </form>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5485},"src/app/(site)/docs/layout.tsx":{"content":"import SidebarLink from \"@/components/Docs/SidebarLink\";\nimport { getAllPosts } from \"@/libs/markdown\";\nimport type { PropsWithChildren } from \"react\";\n\nexport default async function DocsLayout({ children }: PropsWithChildren) {\n  const posts = getAllPosts([\"title\", \"date\", \"excerpt\", \"coverImage\", \"slug\"]);\n\n  return (\n    <div className='mx-auto grid max-w-[1170px] gap-x-8 gap-y-4 pt-24 pb-16 md:pt-28 md:pb-20 lg:grid-cols-[auto_1fr] lg:pt-32 lg:pb-24'>\n      <aside className='max-h-fit rounded-lg bg-white/5 p-4 lg:sticky lg:top-[80px]'>\n        <nav>\n          <ul className='space-y-2'>\n            {posts.map((post, key) => (\n              <SidebarLink post={post} key={key} />\n            ))}\n          </ul>\n        </nav>\n      </aside>\n\n      <main className='prose prose-invert rounded-lg bg-white/5 px-8 py-11 sm:p-[55px] lg:px-8 xl:p-[55px]'>\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":912},"src/app/(site)/docs/page.tsx":{"content":"import { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Documentation | ComplianceDrone - Thermal Inspection Platform\",\n  description: \"ComplianceDrone documentation for thermal inspection platform setup and usage\",\n  // other metadata\n};\n\nexport default function DocsPage() {\n  return (\n    <article>\n      <h1>ComplianceDrone Documentation</h1>\n\n      <p className='font-medium'>\n        Welcome to ComplianceDrone's documentation. This comprehensive platform\n        provides AI-powered thermal inspection services for solar installations\n        and electrical infrastructure.\n      </p>\n      <p className='font-medium'>\n        Please visit:{' '}\n        <a\n          className='underline'\n          target='_blank'\n          href='https://nextjstemplates.com/docs'\n        >\n          nextjstemplates.com/docs\n        </a>{' '}\n        to check out the real docs, setup guide and even video instructions\n      </p>\n    </article>\n  );\n}\n","size_bytes":968},"src/app/(site)/error/page.tsx":{"content":"import Breadcrumb from \"@/components/Breadcrumb\";\n\nimport { Metadata } from \"next\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\n\nexport const metadata: Metadata = {\n  title: \"Error | AI Tool - Next.js Template for AI Tools\",\n  description: \"This is Error page for AI Tool\",\n  // other metadata\n};\n\nconst ErrorPage = () => {\n  return (\n    <>\n      <Breadcrumb pageTitle=\"Error Page\" />\n\n      <section className=\"pb-20 pt-17.5 lg:pb-25 lg:pt-22.5 xl:pb-30 xl:pt-27.5 2xl:pb-[150px]\">\n        <div\n          className=\"wow fadeInUp mx-auto w-full max-w-[597px] px-4 text-center sm:px-8 lg:px-0\"\n          data-wow-delay=\"0.1s\"\n        >\n          <div className=\"relative mx-auto mb-12.5 aspect-191/143 w-full max-w-[382px]\">\n            <Image src=\"/images/404.svg\" alt=\"404\" fill />\n          </div>\n          <h2 className=\"mb-5.5 text-heading-3 font-bold text-white\">\n            Oops! Page Not Found.\n          </h2>\n          <p className=\"mb-9 font-medium\">\n            The page you are looking for is not available or has been moved. Try\n            a different page or go to homepage with the button below.\n          </p>\n          <Link\n            href=\"/\"\n            className=\"hero-button-gradient inline-flex rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n          >\n            Go To Home\n          </Link>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default ErrorPage;\n","size_bytes":1452},"src/app/(site)/pilot-registration/page.tsx":{"content":"import { Metadata } from \"next\";\nimport PilotRegistration from \"@/components/Auth/PilotRegistration\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\n\nexport const metadata: Metadata = {\n  title: \"Pilot Registration - ComplianceDrone\",\n  description: \"Join the ComplianceDrone pilot network. Professional thermal inspection pilots with flexible scheduling and competitive compensation.\",\n  keywords: \"drone pilot, thermal inspection, Part 107, pilot registration, ComplianceDrone\",\n  openGraph: {\n    title: \"Pilot Registration - ComplianceDrone\",\n    description: \"Join the ComplianceDrone pilot network. Professional thermal inspection pilots with flexible scheduling and competitive compensation.\",\n    type: \"website\",\n  }\n};\n\nconst PilotRegistrationPage = () => {\n  return (\n    <>\n      <Breadcrumb \n        pageTitle=\"Pilot Registration\" \n        breadcrumbItems={[\n          { text: \"Home\", href: \"/\" },\n          { text: \"Pilots\", href: \"/pilots\" },\n          { text: \"Registration\", href: \"/pilot-registration\" }\n        ]}\n      />\n\n      <PilotRegistration />\n    </>\n  );\n};\n\nexport default PilotRegistrationPage;","size_bytes":1128},"src/app/(site)/pilots/page.tsx":{"content":"import { Metadata } from \"next\";\nimport Link from \"next/link\";\nimport dynamic from \"next/dynamic\";\n\nconst NewsletterSignup = dynamic(() => import(\"@/components/NewsletterSignup\"));\n\nexport const metadata: Metadata = {\n  title: \"Apply to Fly - ComplianceDrone Pilot Network\",\n  description: \"Join our certified pilot network for thermal inspection services. Flexible work, professional training, and competitive compensation.\",\n};\n\nexport default function PilotsPage() {\n  return (\n    <section className=\"pb-20 pt-35 lg:pb-25 lg:pt-45 xl:pb-30 xl:pt-50\">\n      <div className=\"mx-auto max-w-4xl px-4 sm:px-8 xl:px-0\">\n        <div className=\"text-center\">\n          <h1 className=\"mb-6 text-3xl font-bold text-white sm:text-4xl lg:text-heading-2\">\n            Join the ComplianceDrone Pilot Network\n          </h1>\n          <p className=\"mx-auto mb-10 max-w-2xl text-lg text-waterloo\">\n            Become part of our professional thermal inspection pilot network. Work flexible schedules, \n            receive comprehensive training, and earn competitive compensation using cutting-edge drone technology.\n          </p>\n        </div>\n\n        <div className=\"mb-12 grid gap-8 md:grid-cols-3\">\n          <div className=\"rounded-lg bg-white bg-opacity-[0.08] p-6 backdrop-blur-md\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-primary\">\n              <svg className=\"h-6 w-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 text-lg font-semibold text-white\">Flexible Scheduling</h3>\n            <p className=\"text-waterloo\">\n              Choose your own projects and work schedule. Perfect for full-time or part-time pilots.\n            </p>\n          </div>\n\n          <div className=\"rounded-lg bg-white bg-opacity-[0.08] p-6 backdrop-blur-md\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-primary\">\n              <svg className=\"h-6 w-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 text-lg font-semibold text-white\">Professional Training</h3>\n            <p className=\"text-waterloo\">\n              Comprehensive training on thermal imaging, data analysis, and reporting standards.\n            </p>\n          </div>\n\n          <div className=\"rounded-lg bg-white bg-opacity-[0.08] p-6 backdrop-blur-md\">\n            <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-primary\">\n              <svg className=\"h-6 w-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\n              </svg>\n            </div>\n            <h3 className=\"mb-2 text-lg font-semibold text-white\">Competitive Pay</h3>\n            <p className=\"text-waterloo\">\n              Earn industry-leading rates for thermal inspection services with performance bonuses.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"rounded-lg bg-white bg-opacity-[0.08] p-8 backdrop-blur-md\">\n          <h2 className=\"mb-6 text-2xl font-bold text-white\">Pilot Requirements</h2>\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            <div>\n              <h3 className=\"mb-3 text-lg font-semibold text-white\">Required Certifications</h3>\n              <ul className=\"space-y-2 text-waterloo\">\n                <li className=\"flex items-center\">\n                  <svg className=\"mr-2 h-4 w-4 text-green-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Part 107 Remote Pilot License\n                </li>\n                <li className=\"flex items-center\">\n                  <svg className=\"mr-2 h-4 w-4 text-green-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Current FAA Medical (if applicable)\n                </li>\n                <li className=\"flex items-center\">\n                  <svg className=\"mr-2 h-4 w-4 text-green-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Liability Insurance\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"mb-3 text-lg font-semibold text-white\">Preferred Experience</h3>\n              <ul className=\"space-y-2 text-waterloo\">\n                <li className=\"flex items-center\">\n                  <svg className=\"mr-2 h-4 w-4 text-blue-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Thermal imaging experience\n                </li>\n                <li className=\"flex items-center\">\n                  <svg className=\"mr-2 h-4 w-4 text-blue-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Industrial/commercial work\n                </li>\n                <li className=\"flex items-center\">\n                  <svg className=\"mr-2 h-4 w-4 text-blue-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Construction background\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Community Section */}\n        <div className=\"mt-16 rounded-lg bg-gradient-blue p-8 backdrop-blur-md\">\n          <div className=\"text-center\">\n            <h2 className=\"mb-4 text-2xl font-bold text-white\">Join Our Nationwide Community</h2>\n            <p className=\"mx-auto mb-6 max-w-2xl text-lg text-white/90\">\n              Connect with drone pilots from coast to coast! Get the latest updates on solar panel inspections, \n              electrical infrastructure monitoring, and cutting-edge thermal imaging techniques. \n              Stay ahead with industry insights and exclusive opportunities.\n            </p>\n            \n            <NewsletterSignup />\n          </div>\n          \n          <div className=\"mt-8 grid gap-6 sm:grid-cols-3\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-white/10\">\n                <svg className=\"h-6 w-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z\" />\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z\" />\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-white\">Solar Insights</h3>\n              <p className=\"text-sm text-white/80\">Latest techniques in thermal solar panel inspection</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"mx-auto mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-white/10\">\n                <svg className=\"h-6 w-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-white\">Electrical Monitoring</h3>\n              <p className=\"text-sm text-white/80\">Advanced thermal detection for electrical systems</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"mx-auto mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-white/10\">\n                <svg className=\"h-6 w-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                </svg>\n              </div>\n              <h3 className=\"font-semibold text-white\">Pilot Network</h3>\n              <p className=\"text-sm text-white/80\">Connect with pilots across all 50 states</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-10 text-center\">\n          <Link\n            href=\"/pilot-registration\"\n            className=\"mr-4 inline-flex rounded-lg bg-primary px-8 py-3 font-medium text-white transition-colors hover:bg-primary-dark\"\n          >\n            Start Application\n          </Link>\n          <Link\n            href=\"/contact\"\n            className=\"inline-flex rounded-lg border border-white border-opacity-20 px-8 py-3 font-medium text-white backdrop-blur-sm transition-colors hover:bg-white hover:bg-opacity-10\"\n          >\n            Contact Us\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":10602},"src/app/(site)/pricing/page.tsx":{"content":"import Breadcrumb from \"@/components/Breadcrumb\";\nimport Faq from \"@/components/Faq\";\nimport PricingGrids from \"@/components/Pricing/PricingGrids\";\n\nimport { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Pricing | ComplianceDrone - Professional Thermal Inspection Platform\",\n  description: \"ComplianceDrone pricing plans for professional thermal inspection services\",\n  // other metadata\n};\n\nconst PricingPage = () => {\n  return (\n    <>\n      <Breadcrumb pageTitle=\"Pricing Page\" />\n      <section className=\"pb-20 pt-17.5 lg:pb-25 lg:pt-22.5 xl:pt-27.5\">\n        <PricingGrids />\n      </section>\n\n      <Faq />\n    </>\n  );\n};\n\nexport default PricingPage;\n","size_bytes":684},"src/app/api/generate-content/route.ts":{"content":"import OpenAI from \"openai\";\n\nexport async function POST(req: Request) {\n  const body = await req.json();\n\n  const { prompt, apiKey } = body;\n\n  const openai = new OpenAI({\n    apiKey: apiKey ? apiKey : process.env.OPENAI_API_KEY,\n  });\n\n  try {\n    const chatCompletion = await openai.chat.completions.create({\n      messages: prompt,\n      model: \"gpt-3.5-turbo\",\n      temperature: 1,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0,\n    });\n\n    const generatedContent = chatCompletion.choices[0].message?.content;\n\n    return new Response(JSON.stringify(generatedContent));\n  } catch (error: any) {\n    return new Response(JSON.stringify(error.error.message), { status: 500 });\n  }\n}\n","size_bytes":711},"src/app/api/payment/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport Stripe from \"stripe\";\n\nexport async function POST(request: NextRequest) {\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || \"\", {\n    apiVersion: \"2023-10-16\",\n  });\n  let data = await request.json();\n  let priceId = data.priceId;\n\n  const session = await stripe.checkout.sessions.create({\n    line_items: [\n      {\n        price: priceId,\n        quantity: 1,\n      },\n    ],\n    mode: \"subscription\",\n    success_url: process.env.SITE_URL,\n    cancel_url: process.env.SITE_URL,\n  });\n\n  return NextResponse.json(session.url);\n}\n","size_bytes":605},"src/app/api/register/route.ts":{"content":"import { prisma } from \"@/libs/prismaDB\";\nimport bcrypt from \"bcrypt\";\nimport { NextResponse } from \"next/server\";\n\nexport async function POST(request: any) {\n  const body = await request.json();\n  const { name, email, password } = body;\n\n  if (!name || !email || !password) {\n    return new NextResponse(\"Missing Fields\", { status: 400 });\n  }\n\n  const exist = await prisma.user.findUnique({\n    where: {\n      email,\n    },\n  });\n\n  if (exist) {\n    throw new Error(\"Email already exists\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  const user = await prisma.user.create({\n    data: {\n      name,\n      email,\n      password: hashedPassword,\n    },\n  });\n\n  return NextResponse.json(user);\n}\n","size_bytes":718},"src/app/api/register-pilot/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport bcrypt from \"bcrypt\";\nimport { prisma } from \"@/libs/prismaDB\";\nimport { db } from \"../../../../server/db\";\nimport { users, pilotProfiles } from \"../../../../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\ninterface PilotRegistrationData {\n  // Basic user info\n  name: string;\n  email: string;\n  password: string;\n  phoneNumber: string;\n  companyName?: string;\n  businessType: string;\n  \n  // Address\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  \n  // Certifications\n  part107Number: string;\n  part107ExpiryDate: string;\n  thermalExperienceYears: string;\n  totalFlightHours: string;\n  \n  // Equipment\n  droneModels: string[];\n  thermalCameraModels: string[];\n  \n  // Insurance\n  hasInsurance: boolean;\n  insuranceProvider?: string;\n  insurancePolicyNumber?: string;\n  insuranceExpiryDate?: string;\n  liabilityCoverage?: string;\n  \n  // Service Area\n  maxTravelDistance: string;\n  serviceStates: string[];\n  \n  // Application notes\n  applicationNotes: string;\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body: PilotRegistrationData = await request.json();\n    const {\n      name,\n      email,\n      password,\n      phoneNumber,\n      companyName,\n      businessType,\n      address,\n      city,\n      state,\n      zipCode,\n      part107Number,\n      part107ExpiryDate,\n      thermalExperienceYears,\n      totalFlightHours,\n      droneModels,\n      thermalCameraModels,\n      hasInsurance,\n      insuranceProvider,\n      insurancePolicyNumber,\n      insuranceExpiryDate,\n      liabilityCoverage,\n      maxTravelDistance,\n      serviceStates,\n      applicationNotes\n    } = body;\n\n    // Validation\n    if (!name || !email || !password || !phoneNumber || !businessType) {\n      return NextResponse.json(\n        { error: \"Missing required basic information\" },\n        { status: 400 }\n      );\n    }\n\n    if (!address || !city || !state || !zipCode) {\n      return NextResponse.json(\n        { error: \"Missing required address information\" },\n        { status: 400 }\n      );\n    }\n\n    if (!part107Number || !part107ExpiryDate || !thermalExperienceYears || !totalFlightHours) {\n      return NextResponse.json(\n        { error: \"Missing required certification information\" },\n        { status: 400 }\n      );\n    }\n\n    if (!droneModels?.length || !thermalCameraModels?.length) {\n      return NextResponse.json(\n        { error: \"Please select at least one drone model and thermal camera\" },\n        { status: 400 }\n      );\n    }\n\n    if (!maxTravelDistance || !serviceStates?.length || !applicationNotes) {\n      return NextResponse.json(\n        { error: \"Missing service area or application information\" },\n        { status: 400 }\n      );\n    }\n\n    if (hasInsurance && (!insuranceProvider || !insurancePolicyNumber || !insuranceExpiryDate || !liabilityCoverage)) {\n      return NextResponse.json(\n        { error: \"Insurance details are required when you have insurance\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already exists (Prisma)\n    const existingUser = await prisma.user.findUnique({\n      where: { email }\n    });\n\n    if (existingUser) {\n      return NextResponse.json(\n        { error: \"Email already registered\" },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already exists (Drizzle)\n    const existingUserDrizzle = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, email))\n      .limit(1);\n\n    if (existingUserDrizzle.length > 0) {\n      return NextResponse.json(\n        { error: \"Email already registered in pilot system\" },\n        { status: 400 }\n      );\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create user in Prisma (for NextAuth compatibility)\n    const prismaUser = await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword,\n      },\n    });\n\n    // Create user in Drizzle (for pilot profiles)\n    const drizzleUser = await db\n      .insert(users)\n      .values({\n        email,\n        firstName: name.split(' ')[0],\n        lastName: name.split(' ').slice(1).join(' ') || '',\n      })\n      .returning();\n\n    // Create pilot profile\n    const pilotProfile = await db\n      .insert(pilotProfiles)\n      .values({\n        userId: drizzleUser[0].id,\n        \n        // Professional Information\n        companyName: companyName || null,\n        businessType,\n        \n        // Contact Information  \n        phoneNumber,\n        address,\n        city,\n        state,\n        zipCode,\n        \n        // Pilot Qualifications\n        part107Certified: true,\n        part107Number,\n        licenseExpiryDate: new Date(part107ExpiryDate),\n        thermalExperienceYears: parseInt(thermalExperienceYears),\n        totalFlightHours: parseInt(totalFlightHours.split('-')[0]) || 0, // Extract first number from range\n        \n        // Equipment Information\n        droneModels,\n        thermalCameraModels,\n        \n        // Insurance Information\n        hasInsurance,\n        insuranceProvider: insuranceProvider || null,\n        insurancePolicyNumber: insurancePolicyNumber || null,\n        insuranceExpiryDate: insuranceExpiryDate ? new Date(insuranceExpiryDate) : null,\n        liabilityCoverage: liabilityCoverage ? parseInt(liabilityCoverage) : null,\n        \n        // Geographic Coverage\n        serviceStates,\n        maxTravelDistance: maxTravelDistance === 'nationwide' ? 99999 : parseInt(maxTravelDistance),\n        \n        // Platform Status\n        status: 'pending', // Will be reviewed by admin\n        \n        // Application Information\n        applicationNotes,\n        \n        // Initialize metrics\n        completedJobs: 0,\n        totalEarnings: 0,\n      })\n      .returning();\n\n    return NextResponse.json({\n      success: true,\n      message: \"Pilot registration submitted successfully\",\n      user: {\n        id: prismaUser.id,\n        email: prismaUser.email,\n        name: prismaUser.name\n      },\n      pilotProfile: {\n        id: pilotProfile[0].id,\n        status: pilotProfile[0].status\n      }\n    });\n\n  } catch (error) {\n    console.error(\"Pilot registration error:\", error);\n    \n    // Handle specific database errors\n    if (error instanceof Error) {\n      if (error.message.includes('unique constraint')) {\n        return NextResponse.json(\n          { error: \"Email already registered\" },\n          { status: 400 }\n        );\n      }\n    }\n\n    return NextResponse.json(\n      { error: \"Registration failed. Please try again.\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":6599},"src/app/api/revalidate/route.ts":{"content":"import { revalidateTag } from \"next/cache\";\nimport { type NextRequest, NextResponse } from \"next/server\";\nimport { parseBody } from \"next-sanity/webhook\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { body, isValidSignature } = await parseBody<{\n      _type: string;\n      slug?: string | undefined;\n    }>(req, process.env.SANITY_HOOK_SECRET);\n    if (!isValidSignature) {\n      return new Response(\"Invalid Signature\", { status: 401 });\n    }\n\n    if (!body?._type) {\n      return new Response(\"Bad Request\", { status: 400 });\n    }\n\n    revalidateTag(body._type);\n    return NextResponse.json({\n      status: 200,\n      revalidated: true,\n      now: Date.now(),\n      body,\n    });\n  } catch (error: any) {\n    console.error(error);\n    return new Response(error.message, { status: 500 });\n  }\n}\n","size_bytes":821},"src/components/About/AboutSection/index.tsx":{"content":"import Image from \"next/image\";\n\nconst AboutSection = () => {\n  return (\n    <section className=\"overflow-hidden\">\n      <div className=\"relative mx-auto max-w-[1170px] px-4 py-20 sm:px-8 lg:py-25 xl:px-0\">\n        <div className=\"about-divider-gradient absolute bottom-0 left-0 h-[1px] w-full\"></div>\n\n        <div className=\"flex flex-wrap justify-between gap-11 xl:flex-nowrap\">\n          <div className=\"wow fadeInLeft w-full max-w-[570px]\">\n            <span className=\"hero-subtitle-text mb-5 block font-semibold\">\n              About ComplianceDrone\n            </span>\n\n            <h2 className=\"mb-5 text-2xl font-extrabold text-white sm:text-4xl xl:text-heading-2\">\n              Professional Thermal Inspection Platform for Solar & Electrical Infrastructure.\n            </h2>\n            <p className=\"mb-9 font-medium\">\n              AI-powered drone technology processes 100+ thermal images to detect anomalies\n              in solar installations and electrical infrastructure. Generate comprehensive\n              compliance reports with GPS coordinates in under 5 minutes.\n            </p>\n\n            <a\n              href=\"#\"\n              className=\"hero-button-gradient inline-flex rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n            >\n              Schedule Inspection\n            </a>\n          </div>\n\n          <div className=\"wow fadeInRight relative hidden aspect-556/401 w-full xl:block\">\n            <Image src=\"/images/about/about.svg\" alt=\"about\" fill />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default AboutSection;\n","size_bytes":1629},"src/components/About/Team/SingleTeam.tsx":{"content":"import { Team } from \"@/types/team\";\nimport Image from \"next/image\";\n\nconst SingleTeam = ({ team }: { team: Team }) => {\n  const { name, designation, image, fbLink, twitterLink, instagramLink } = team;\n\n  return (\n    <div className=\"wow fadeInUp group text-center\">\n      <div className=\"team-img-gradient group-hover:before:gradient-3 relative mx-auto mb-7.5 h-50 w-full max-w-50 rounded-full\">\n        <Image\n          src={image}\n          alt={name}\n          fill\n          className=\"rounded-full object-cover object-center\"\n        />\n      </div>\n      <h3 className=\"mb-2.5 text-heading-6 font-semibold text-white\">{name}</h3>\n      <p className=\"mb-6 font-medium\">{designation}</p>\n\n      <div className=\"flex items-center justify-center gap-5\">\n        <a\n          aria-label=\"social icon\"\n          href={fbLink}\n          className=\"duration-300 ease-in hover:text-white\"\n        >\n          <svg\n            className=\"fill-current\"\n            width=\"22\"\n            height=\"22\"\n            viewBox=\"0 0 22 22\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M11.9163 20.1213C16.5485 19.6614 20.1663 15.7531 20.1663 10.9999C20.1663 5.93731 16.0622 1.83325 10.9997 1.83325C5.93706 1.83325 1.83301 5.93731 1.83301 10.9999C1.83301 15.4347 4.98223 19.1339 9.16634 19.9833V14.6666H6.41634V11.9166H9.16634V8.97946C9.16634 6.85153 10.9717 5.17051 13.0943 5.32211L15.583 5.49988V8.24988H13.7497C12.7371 8.24988 11.9163 9.07069 11.9163 10.0833V11.9166H15.583L14.6663 14.6666H11.9163V20.1213Z\"\n              fill=\"\"\n            />\n          </svg>\n        </a>\n\n        <a\n          aria-label=\"social icon\"\n          href={twitterLink}\n          className=\"duration-300 ease-in hover:text-white\"\n        >\n          <svg\n            className=\"fill-current\"\n            width=\"22\"\n            height=\"22\"\n            viewBox=\"0 0 22 22\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M6.97812 19.7311C15.0906 19.7311 19.4906 13.0279 19.4906 7.21855C19.4906 7.08105 19.4906 6.84043 19.4562 6.63418C20.3156 6.01543 21.0719 5.2248 21.6562 4.36543C20.8312 4.74355 20.0063 4.9498 19.1469 5.05293C20.075 4.50293 20.7625 3.64355 21.0719 2.6123C20.2125 3.09355 19.3188 3.47168 18.2531 3.67793C17.4281 2.81855 16.3281 2.26855 15.0562 2.26855C12.6156 2.26855 10.6219 4.2623 10.6219 6.70293C10.6219 7.04668 10.6562 7.39043 10.725 7.73418C7.18438 7.49355 3.95312 5.74043 1.75312 3.09355C1.375 3.78105 1.16875 4.50293 1.16875 5.29355C1.16875 6.84043 1.95937 8.14668 3.1625 8.9373C2.44062 8.90293 1.75313 8.69668 1.16875 8.3873C1.16875 8.42168 1.16875 8.42168 1.16875 8.42168C1.16875 10.5186 2.68125 12.3404 4.675 12.7529C4.29688 12.8561 3.88437 12.8904 3.575 12.8904C3.3 12.8904 2.99062 12.8561 2.75 12.7873C3.33437 14.5404 4.95 15.8123 6.875 15.8467C5.3625 17.0154 3.47187 17.7373 1.44375 17.7373C1.03125 17.8061 0.6875 17.7373 0.34375 17.7029C2.2 19.0092 4.50312 19.7311 6.97812 19.7311Z\"\n              fill=\"\"\n            />\n          </svg>\n        </a>\n\n        <a\n          aria-label=\"social icon\"\n          href={instagramLink}\n          className=\"duration-300 ease-in hover:text-white\"\n        >\n          <svg\n            className=\"fill-current\"\n            width=\"22\"\n            height=\"22\"\n            viewBox=\"0 0 22 22\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g clipPath=\"url(#clip0_117_13418)\">\n              <path\n                d=\"M21.6219 6.6C21.5875 5.5 21.3813 4.70937 21.1406 3.9875C20.9 3.26563 20.5219 2.68125 19.9375 2.09687C19.3531 1.5125 18.7688 1.16875 18.0813 0.89375C17.3938 0.61875 16.6375 0.446875 15.4688 0.4125C14.2656 0.34375 13.9219 0.34375 11 0.34375C8.07813 0.34375 7.76875 0.34375 6.6 0.378125C5.43125 0.4125 4.70938 0.61875 3.9875 0.859375C3.26563 1.1 2.68125 1.5125 2.09688 2.09687C1.5125 2.68125 1.13438 3.26563 0.89375 3.9875C0.61875 4.675 0.446875 5.43125 0.4125 6.6C0.378125 7.76875 0.34375 8.07812 0.34375 11C0.34375 13.9219 0.34375 14.2312 0.378125 15.4C0.4125 16.5688 0.61875 17.2906 0.859375 18.0125C1.1 18.7344 1.47813 19.3188 2.0625 19.9031C2.64688 20.4875 3.26563 20.8656 3.95313 21.1063C4.64063 21.3469 5.39688 21.5531 6.56563 21.5875C7.73438 21.6562 8.04375 21.6562 10.9656 21.6562C13.8875 21.6562 14.1969 21.6562 15.3656 21.6219C16.5344 21.5875 17.2563 21.3813 17.9781 21.1406C18.7 20.9 19.2844 20.5219 19.8688 19.9375C20.4531 19.3531 20.8313 18.7344 21.0719 18.0469C21.3125 17.3594 21.5188 16.6031 21.5531 15.4344C21.5875 14.3344 21.5875 13.9906 21.5875 11.0688C21.5875 8.14688 21.6563 7.76875 21.6219 6.6ZM19.6969 15.2969C19.6625 16.3281 19.4563 16.8781 19.3188 17.2906C19.1125 17.7719 18.8719 18.15 18.4938 18.4937C18.1156 18.8719 17.7719 19.0781 17.2906 19.3188C16.9125 19.4563 16.3625 19.6625 15.2969 19.6969C14.1969 19.6969 13.8531 19.6969 11.0344 19.6969C8.21563 19.6969 7.8375 19.6969 6.7375 19.6625C5.70625 19.6281 5.15625 19.4219 4.74375 19.2844C4.2625 19.0781 3.88438 18.8375 3.54063 18.4594C3.1625 18.0813 2.95625 17.7375 2.71563 17.2563C2.57813 16.8781 2.37188 16.3281 2.3375 15.2625C2.3375 14.1969 2.3375 13.8531 2.3375 11C2.3375 8.14687 2.3375 7.80312 2.37188 6.70312C2.40625 5.67188 2.6125 5.12187 2.75 4.70937C2.95625 4.22812 3.19688 3.85 3.54063 3.50625C3.91875 3.12812 4.2625 2.92188 4.74375 2.71563C5.12188 2.57812 5.67188 2.37188 6.7375 2.3375C7.8375 2.30313 8.18125 2.30312 11.0344 2.30312C13.8875 2.30312 14.2313 2.30313 15.3313 2.3375C16.3625 2.37188 16.9125 2.57812 17.325 2.71563C17.8063 2.92188 18.1844 3.1625 18.5281 3.50625C18.9063 3.88437 19.1125 4.22812 19.3531 4.70937C19.4906 5.0875 19.6969 5.6375 19.7313 6.70312C19.7656 7.80312 19.7656 8.14687 19.7656 11C19.7656 13.8531 19.7313 14.1969 19.6969 15.2969Z\"\n                fill=\"\"\n              />\n              <path\n                d=\"M11.0008 5.53418C7.94141 5.53418 5.53516 8.00918 5.53516 10.9998C5.53516 14.0592 8.01016 16.4654 11.0008 16.4654C13.9914 16.4654 16.5008 14.0592 16.5008 10.9998C16.5008 7.94043 14.0602 5.53418 11.0008 5.53418ZM11.0008 14.5748C9.00703 14.5748 7.42578 12.9592 7.42578 10.9998C7.42578 9.04043 9.04141 7.4248 11.0008 7.4248C12.9945 7.4248 14.5758 9.00605 14.5758 10.9998C14.5758 12.9936 12.9945 14.5748 11.0008 14.5748Z\"\n                fill=\"\"\n              />\n              <path\n                d=\"M16.7406 6.56572C17.4431 6.56572 18.0125 5.99627 18.0125 5.29385C18.0125 4.59139 17.4431 4.02197 16.7406 4.02197C16.0382 4.02197 15.4688 4.59139 15.4688 5.29385C15.4688 5.99627 16.0382 6.56572 16.7406 6.56572Z\"\n                fill=\"\"\n              />\n            </g>\n            <defs>\n              <clipPath id=\"clip0_117_13418\">\n                <rect width=\"22\" height=\"22\" fill=\"white\" />\n              </clipPath>\n            </defs>\n          </svg>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleTeam;\n","size_bytes":6898},"src/components/About/Team/index.tsx":{"content":"import SectionTitle from \"@/components/Common/SectionTitle\";\nimport SingleTeam from \"./SingleTeam\";\nimport teamData from \"./teamData\";\n\nconst Team = () => {\n  return (\n    <section className=\"overflow-hidden py-17.5 lg:py-22.5 xl:py-27.5\">\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <SectionTitle\n          subTitle=\"Meet Out Team\"\n          title=\"Our Dynamic Team\"\n          paragraph=\"Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.\"\n        />\n\n        <div className=\"grid grid-cols-1 gap-10 sm:grid-cols-2 lg:grid-cols-3 lg:gap-17.5 xl:grid-cols-4\">\n          {teamData.map((team) => (\n            <SingleTeam key={team.id} team={team} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Team;\n","size_bytes":884},"src/components/About/Team/teamData.ts":{"content":"import { Team } from \"@/types/team\";\n\nconst teamData: Team[] = [\n  {\n    id: 76,\n    name: \"Christian Cannon\",\n    designation: \"Product Designer\",\n    image: \"/images/team/team-01.png\",\n    fbLink: \"https://www.facebook.com/\",\n    twitterLink: \"https://twitter.com/\",\n    instagramLink: \"https://www.instagram.com/\",\n  },\n  {\n    id: 51,\n    name: \"Ricky Riley\",\n    designation: \"Frontend Developer\",\n    image: \"/images/team/team-02.png\",\n    fbLink: \"https://www.facebook.com/\",\n    twitterLink: \"https://twitter.com/\",\n    instagramLink: \"https://www.instagram.com/\",\n  },\n  {\n    id: 86,\n    name: \"Gilbert Graham\",\n    designation: \"Backend Developer\",\n    image: \"/images/team/team-03.png\",\n    fbLink: \"https://www.facebook.com/\",\n    twitterLink: \"https://twitter.com/\",\n    instagramLink: \"https://www.instagram.com/\",\n  },\n  {\n    id: 1,\n    name: \"Elijah Carroll\",\n    designation: \"Content Writer\",\n    image: \"/images/team/team-04.png\",\n    fbLink: \"https://www.facebook.com/\",\n    twitterLink: \"https://twitter.com/\",\n    instagramLink: \"https://www.instagram.com/\",\n  },\n  {\n    id: 64,\n    name: \"Millie Buchanan\",\n    designation: \"SEO Expert\",\n    image: \"/images/team/team-05.png\",\n    fbLink: \"https://www.facebook.com/\",\n    twitterLink: \"https://twitter.com/\",\n    instagramLink: \"https://www.instagram.com/\",\n  },\n  {\n    id: 59,\n    name: \"Jeffrey Alvarado\",\n    designation: \"DevOps\",\n    image: \"/images/team/team-06.png\",\n    fbLink: \"https://www.facebook.com/\",\n    twitterLink: \"https://twitter.com/\",\n    instagramLink: \"https://www.instagram.com/\",\n  },\n  {\n    id: 39,\n    name: \"Kathryn Klein\",\n    designation: \"Full-stack Developer\",\n    image: \"/images/team/team-07.png\",\n    fbLink: \"https://www.facebook.com/\",\n    twitterLink: \"https://twitter.com/\",\n    instagramLink: \"https://www.instagram.com/\",\n  },\n  {\n    id: 87,\n    name: \"Minnie Jordan\",\n    designation: \"Testing Developer\",\n    image: \"/images/team/team-08.png\",\n    fbLink: \"https://www.facebook.com/\",\n    twitterLink: \"https://twitter.com/\",\n    instagramLink: \"https://www.instagram.com/\",\n  },\n];\n\nexport default teamData;\n","size_bytes":2131},"src/components/About/Video/index.tsx":{"content":"\"use client\";\nimport FsLightbox from \"fslightbox-react\";\nimport Image from \"next/image\";\nimport { useState } from \"react\";\n\nconst Video = () => {\n  const [toggler, setToggler] = useState(false);\n\n  return (\n    <section className=\"pt-12\">\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <div className=\"relative z-999 aspect-39/20 rounded-3xl\">\n          <button\n            aria-label=\"video play button\"\n            onClick={() => setToggler(!toggler)}\n            className=\"absolute left-1/2 top-1/2 z-10 flex h-27.5 w-27.5 -translate-x-1/2 -translate-y-1/2 items-center justify-center rounded-full bg-linear-to-b from-[#A073EE] to-[#6E25ED] shadow-video\"\n          >\n            <svg\n              width=\"30\"\n              height=\"30\"\n              viewBox=\"0 0 30 30\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M25.1688 16.8077L7.26999 27.1727C5.73764 28.0601 3.75 27.0394 3.75 25.3651V4.63517C3.75 2.96091 5.73764 1.94018 7.26997 2.82754L25.1688 13.1925C26.6104 14.0274 26.6104 15.9729 25.1688 16.8077Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </button>\n          <span className=\"absolute left-1/2 top-1/2 z-1 block h-32 w-32 -translate-x-1/2 -translate-y-1/2 rounded-full bg-white/[0.04] backdrop-blur-[5px]\"></span>\n\n          <Image src=\"/images/video/video.png\" fill alt=\"video\" />\n        </div>\n      </div>\n\n      <FsLightbox\n        toggler={toggler}\n        sources={[\"https://www.youtube.com/watch?v=xcJtL7QggTI\"]}\n      />\n    </section>\n  );\n};\n\nexport default Video;\n","size_bytes":1636},"src/components/AiTools/AiToolExample/SingleExample.tsx":{"content":"import { AiExample } from \"@/types/aiExample\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\n\nconst SingleExample = ({ example }: { example: AiExample }) => {\n  return (\n    <div className=\"aiExamples-border-gredient relative rounded-lg\">\n      <div className=\"group relative overflow-hidden rounded-lg px-8 py-9 \">\n        <span\n          className={`features-bg absolute left-0 top-0 -z-1 h-full w-full ${\n            example?.rotate && \"rotate-180\"\n          }`}\n        ></span>\n        <span className=\"icon-border relative mx-auto mb-6 inline-flex h-20 w-full max-w-[80px] items-center justify-center rounded-full\">\n          <Image src={example.icon} alt=\"icon\" width={32} height={32} />\n        </span>\n\n        <h3 className=\"mb-4 text-2xl font-semibold text-white\">\n          {example.title}\n        </h3>\n        <p className=\"font-medium\">{example.description}</p>\n\n        <Link\n          href={example.path}\n          aria-label=\"Try it out! button\"\n          className=\"button-border-gradient hover:button-gradient-hover relative mt-9 inline-block gap-1.5 rounded-lg  px-6 py-3 text-sm text-white shadow-button hover:shadow-none\"\n        >\n          Try it out!\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleExample;\n","size_bytes":1272},"src/components/AiTools/AiToolExample/examplesData.ts":{"content":"import { AiExample } from \"@/types/aiExample\";\n\nconst exampleData: AiExample[] = [\n  {\n    id: 11,\n    title: \"Content Writing Tool\",\n    description:\n      \"Generate any content based on your topic, subject and number of paragraphs.\",\n    icon: \"/images/features/icon-01.svg\",\n    path: \"/ai-examples/content-writing-tool\",\n  },\n  {\n    id: 27,\n    title: \"Business Name Generator\",\n    description:\n      \"Generate any content based on your topic, subject and number of paragraphs.\",\n    icon: \"/images/ai-tools/icon-2.svg\",\n    path: \"/ai-examples/business-name-generator\",\n  },\n  {\n    id: 21,\n    title: \"Article Title Writer\",\n    description:\n      \"Generate any content based on your topic, subject and number of paragraphs.\",\n    icon: \"/images/ai-tools/icon-3.svg\",\n    path: \"/ai-examples/article-title-generator\",\n  },\n  {\n    id: 22,\n    title: \"Product Name Generator\",\n    description:\n      \"Generate any content based on your topic, subject and number of paragraphs.\",\n    icon: \"/images/ai-tools/icon-1.svg\",\n    path: \"/ai-examples/product-name-generator\",\n  },\n  {\n    id: 23,\n    title: \"Spreadsheet Creator\",\n    description:\n      \"Generate any content based on your topic, subject and number of paragraphs.\",\n    icon: \"/images/ai-tools/icon-2.svg\",\n    path: \"/ai-examples/spreadsheet-generator\",\n  },\n  {\n    id: 23,\n    title: \"Interview Questions\",\n    description:\n      \"Generate any content based on your topic, subject and number of paragraphs.\",\n    icon: \"/images/ai-tools/icon-3.svg\",\n    path: \"/ai-examples/interview-question-generator\",\n  },\n];\n\nexport default exampleData;\n","size_bytes":1612},"src/components/AiTools/AiToolExample/index.tsx":{"content":"import React from \"react\";\nimport exampleData from \"./examplesData\";\nimport SingleExample from \"./SingleExample\";\n\nconst AiToolExample = () => {\n  return (\n    <div className=\"grid gap-7.5 pt-7.5 md:grid-cols-2 lg:grid-cols-3\">\n      {exampleData.map((example, id) => (\n        <SingleExample key={id} example={example} />\n      ))}\n    </div>\n  );\n};\n\nexport default AiToolExample;\n","size_bytes":383},"src/components/Auth/ForgotPassword/index.tsx":{"content":"\"use client\";\nimport React, { useState } from \"react\";\nimport Image from \"next/image\";\nimport { toast } from \"react-hot-toast\";\nimport { validateEmail } from \"@/libs/validateEmail\";\nimport axios from \"axios\";\nimport Loader from \"@/components/Common/Loader\";\nimport { integrations, messages } from \"../../../../integrations.config\";\nimport z from \"zod\";\n\nconst ForgotPasswordSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address.\"),\n});\n\nconst ForgotPassword = () => {\n  const [email, setEmail] = useState(\"\");\n  const [loader, setLoader] = useState(false);\n\n  const sendEmail = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isAuthEnabled) {\n      toast.error(messages.auth);\n      return;\n    }\n\n    const result = ForgotPasswordSchema.safeParse({ email });\n    if (!result.success) {\n      toast.error(result.error.errors[0].message);\n      return;\n    }\n\n    if (!validateEmail(email)) {\n      return toast.error(\"Please enter a valid email address.\");\n    }\n\n    setLoader(true);\n\n    try {\n      const res = await axios.post(\"/api/forgot-password/reset\", {\n        email: email.toLowerCase(),\n      });\n\n      if (res.status === 404) {\n        toast.error(\"User not found.\");\n        return;\n      }\n\n      if (res.status === 200) {\n        toast.success(res.data);\n        setEmail(\"\");\n      }\n\n      setEmail(\"\");\n      setLoader(false);\n    } catch (error: any) {\n      toast.error(error?.response.data);\n      setLoader(false);\n    }\n  };\n\n  return (\n    <section className=\"pb-17.5 pt-17.5 lg:pb-22.5 xl:pb-27.5\">\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <div className=\"wow fadeInUp rounded-3xl bg-white/[0.05]\">\n          <div className=\"flex\">\n            <div className=\"hidden w-full lg:block lg:w-1/2\">\n              <div className=\"relative py-20 pl-17.5 pr-22\">\n                <div className=\"absolute right-0 top-0 h-full w-[1px] bg-linear-to-b from-white/0 via-white/20 to-white/0\"></div>\n\n                <h2 className=\"mb-10 max-w-[292px] text-heading-4 font-bold text-white\">\n                  Unlock the Power of Writing Tool\n                </h2>\n                <div className=\"relative aspect-61/50 w-full max-w-[427px]\">\n                  <Image src=\"/images/signin/sigin.svg\" alt=\"signin\" fill />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"w-full lg:w-1/2\">\n              <div className=\"flex h-full flex-col justify-center py-8 pl-8 pr-8 sm:py-20  sm:pl-21 sm:pr-20\">\n                <div>\n                  <form onSubmit={sendEmail}>\n                    <div className=\"relative mb-4\">\n                      <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                        <svg\n                          width=\"16\"\n                          height=\"12\"\n                          viewBox=\"0 0 16 12\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            d=\"M13.9998 0.399994H1.9998C1.1498 0.399994 0.424805 1.09999 0.424805 1.97499V10.075C0.424805 10.925 1.1248 11.65 1.9998 11.65H13.9998C14.8498 11.65 15.5748 10.95 15.5748 10.075V1.94999C15.5748 1.09999 14.8498 0.399994 13.9998 0.399994ZM13.9998 1.52499C14.0248 1.52499 14.0498 1.52499 14.0748 1.52499L7.9998 5.42499L1.9248 1.52499C1.9498 1.52499 1.9748 1.52499 1.9998 1.52499H13.9998ZM13.9998 10.475H1.9998C1.7498 10.475 1.5498 10.275 1.5498 10.025V2.62499L7.3998 6.37499C7.5748 6.49999 7.7748 6.54999 7.9748 6.54999C8.1748 6.54999 8.3748 6.49999 8.5498 6.37499L14.3998 2.62499V10.05C14.4498 10.3 14.2498 10.475 13.9998 10.475Z\"\n                            fill=\"#918EA0\"\n                          />\n                        </svg>\n                      </span>\n                      <input\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n                      />\n                    </div>\n\n                    <button\n                      type=\"submit\"\n                      className=\"hero-button-gradient flex w-full items-center justify-center rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n                    >\n                      Send Email {loader && <Loader />}\n                    </button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ForgotPassword;\n","size_bytes":4849},"src/components/Auth/PilotRegistration/index.tsx":{"content":"\"use client\";\nimport axios from \"axios\";\nimport { signIn } from \"next-auth/react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport Loader from \"@/components/Common/Loader\";\nimport { integrations, messages } from \"../../../../integrations.config\";\nimport z from \"zod\";\nimport {\n  droneModels,\n  thermalCameraModels,\n  businessTypes,\n  statesAndTerritories,\n  insuranceProviders,\n  experienceLevels,\n  flightHoursRanges,\n  maxTravelDistances\n} from \"@/data/pilotEquipmentData\";\n\n// Comprehensive validation schema for pilot registration\nconst PilotRegistrationSchema = z.object({\n  // Basic user info\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z\n    .string()\n    .min(8, { message: \"Password must be at least 8 characters long\" })\n    .refine((val) => /[A-Z]/.test(val), {\n      message: \"Password must contain at least one uppercase letter\",\n    })\n    .refine((val) => /[a-z]/.test(val), {\n      message: \"Password must contain at least one lowercase letter\",\n    })\n    .refine((val) => /\\d/.test(val), {\n      message: \"Password must contain at least one number\",\n    }),\n  \n  // Professional info\n  phoneNumber: z.string().min(10, \"Please enter a valid phone number\"),\n  companyName: z.string().optional(),\n  businessType: z.string().min(1, \"Please select a business type\"),\n  \n  // Address\n  address: z.string().min(5, \"Please enter your full address\"),\n  city: z.string().min(2, \"Please enter your city\"),\n  state: z.string().min(2, \"Please select your state\"),\n  zipCode: z.string().min(5, \"Please enter a valid ZIP code\"),\n  \n  // Certifications\n  part107Number: z.string().min(1, \"Part 107 certificate number is required\"),\n  part107ExpiryDate: z.string().min(1, \"Please enter your Part 107 expiry date\"),\n  thermalExperienceYears: z.string().min(1, \"Please select your experience level\"),\n  totalFlightHours: z.string().min(1, \"Please select your total flight hours\"),\n  \n  // Equipment\n  droneModels: z.array(z.string()).min(1, \"Please select at least one drone model\"),\n  thermalCameraModels: z.array(z.string()).min(1, \"Please select at least one thermal camera\"),\n  \n  // Insurance\n  hasInsurance: z.boolean(),\n  insuranceProvider: z.string().optional(),\n  insurancePolicyNumber: z.string().optional(),\n  insuranceExpiryDate: z.string().optional(),\n  liabilityCoverage: z.string().optional(),\n  \n  // Service Area\n  maxTravelDistance: z.string().min(1, \"Please select your travel distance\"),\n  serviceStates: z.array(z.string()).min(1, \"Please select at least one service state\"),\n  \n  // Application notes\n  applicationNotes: z.string().min(50, \"Please provide at least 50 characters about your experience\")\n}).refine((data) => {\n  if (data.hasInsurance) {\n    return (\n      data.insuranceProvider && \n      data.insurancePolicyNumber && \n      data.insuranceExpiryDate && \n      data.liabilityCoverage\n    );\n  }\n  return true;\n}, {\n  message: \"Insurance details are required when you have insurance\",\n  path: [\"insuranceProvider\"]\n});\n\nconst PilotRegistration = () => {\n  const [formData, setFormData] = useState({\n    // Basic info\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    phoneNumber: \"\",\n    companyName: \"\",\n    businessType: \"\",\n    \n    // Address\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    zipCode: \"\",\n    \n    // Certifications\n    part107Number: \"\",\n    part107ExpiryDate: \"\",\n    thermalExperienceYears: \"\",\n    totalFlightHours: \"\",\n    \n    // Equipment\n    droneModels: [] as string[],\n    thermalCameraModels: [] as string[],\n    \n    // Insurance\n    hasInsurance: true,\n    insuranceProvider: \"\",\n    insurancePolicyNumber: \"\",\n    insuranceExpiryDate: \"\",\n    liabilityCoverage: \"\",\n    \n    // Service Area\n    maxTravelDistance: \"\",\n    serviceStates: [] as string[],\n    \n    // Application notes\n    applicationNotes: \"\"\n  });\n\n  const [currentStep, setCurrentStep] = useState(1);\n  const [loader, setLoader] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const totalSteps = 5;\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleArrayChange = (field: string, value: string, checked: boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: checked \n        ? [...(prev[field as keyof typeof prev] as string[]), value]\n        : (prev[field as keyof typeof prev] as string[]).filter(item => item !== value)\n    }));\n  };\n\n  const validateStep = (step: number): boolean => {\n    switch (step) {\n      case 1:\n        return !!(formData.name && formData.email && formData.password && formData.phoneNumber);\n      case 2:\n        return !!(formData.businessType && formData.address && formData.city && formData.state && formData.zipCode);\n      case 3:\n        return !!(formData.part107Number && formData.part107ExpiryDate && formData.thermalExperienceYears && formData.totalFlightHours);\n      case 4:\n        return !!(formData.droneModels.length > 0 && formData.thermalCameraModels.length > 0);\n      case 5:\n        return !!(formData.maxTravelDistance && formData.serviceStates.length > 0 && formData.applicationNotes.length >= 50);\n      default:\n        return false;\n    }\n  };\n\n  const nextStep = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep(prev => Math.min(prev + 1, totalSteps));\n    } else {\n      toast.error(\"Please fill in all required fields before continuing\");\n    }\n  };\n\n  const prevStep = () => {\n    setCurrentStep(prev => Math.max(prev - 1, 1));\n  };\n\n  const submitRegistration = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!integrations?.isAuthEnabled) {\n      toast.error(messages.auth);\n      return;\n    }\n\n    setLoader(true);\n\n    const result = PilotRegistrationSchema.safeParse(formData);\n    if (!result.success) {\n      toast.error(result.error.errors[0].message);\n      setLoader(false);\n      return;\n    }\n\n    try {\n      await axios.post(\"/api/register-pilot\", formData);\n      toast.success(\"Pilot registration submitted successfully! We'll review your application within 48 hours.\");\n      \n      // Reset form\n      setFormData({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        phoneNumber: \"\",\n        companyName: \"\",\n        businessType: \"\",\n        address: \"\",\n        city: \"\",\n        state: \"\",\n        zipCode: \"\",\n        part107Number: \"\",\n        part107ExpiryDate: \"\",\n        thermalExperienceYears: \"\",\n        totalFlightHours: \"\",\n        droneModels: [],\n        thermalCameraModels: [],\n        hasInsurance: true,\n        insuranceProvider: \"\",\n        insurancePolicyNumber: \"\",\n        insuranceExpiryDate: \"\",\n        liabilityCoverage: \"\",\n        maxTravelDistance: \"\",\n        serviceStates: [],\n        applicationNotes: \"\"\n      });\n      setCurrentStep(1);\n    } catch (error) {\n      toast.error(\"Registration failed. Please check your information and try again.\");\n    } finally {\n      setLoader(false);\n    }\n  };\n\n  const renderStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"mb-6 text-xl font-semibold text-white\">Basic Information</h3>\n            \n            <div className=\"relative\">\n              <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                <svg className=\"h-4 w-4 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clipRule=\"evenodd\" />\n                </svg>\n              </span>\n              <input\n                type=\"text\"\n                placeholder=\"Full Name *\"\n                value={formData.name}\n                onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n                required\n              />\n            </div>\n\n            <div className=\"relative\">\n              <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                <svg className=\"h-4 w-4 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z\" />\n                  <path d=\"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z\" />\n                </svg>\n              </span>\n              <input\n                type=\"email\"\n                placeholder=\"Email Address *\"\n                value={formData.email}\n                onChange={(e) => handleInputChange(\"email\", e.target.value.toLowerCase())}\n                className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n                required\n              />\n            </div>\n\n            <div className=\"relative\">\n              <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                <svg className=\"h-4 w-4 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2z\" clipRule=\"evenodd\" />\n                </svg>\n              </span>\n              <input\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Password *\"\n                value={formData.password}\n                onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-12 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 hover:text-white\"\n              >\n                {showPassword ? \"Hide\" : \"Show\"}\n              </button>\n            </div>\n\n            <div className=\"relative\">\n              <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                <svg className=\"h-4 w-4 text-gray-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z\" />\n                </svg>\n              </span>\n              <input\n                type=\"tel\"\n                placeholder=\"Phone Number *\"\n                value={formData.phoneNumber}\n                onChange={(e) => handleInputChange(\"phoneNumber\", e.target.value)}\n                className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n                required\n              />\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"mb-6 text-xl font-semibold text-white\">Business Information</h3>\n            \n            <input\n              type=\"text\"\n              placeholder=\"Company/Business Name (optional)\"\n              value={formData.companyName}\n              onChange={(e) => handleInputChange(\"companyName\", e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n            />\n\n            <select\n              value={formData.businessType}\n              onChange={(e) => handleInputChange(\"businessType\", e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white outline-none focus:border-primary\"\n              required\n            >\n              <option value=\"\" className=\"bg-gray-800\">Business Type *</option>\n              {businessTypes.map((type) => (\n                <option key={type} value={type} className=\"bg-gray-800\">\n                  {type}\n                </option>\n              ))}\n            </select>\n\n            <input\n              type=\"text\"\n              placeholder=\"Street Address *\"\n              value={formData.address}\n              onChange={(e) => handleInputChange(\"address\", e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n              required\n            />\n\n            <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\n              <input\n                type=\"text\"\n                placeholder=\"City *\"\n                value={formData.city}\n                onChange={(e) => handleInputChange(\"city\", e.target.value)}\n                className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n                required\n              />\n              \n              <select\n                value={formData.state}\n                onChange={(e) => handleInputChange(\"state\", e.target.value)}\n                className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white outline-none focus:border-primary\"\n                required\n              >\n                <option value=\"\" className=\"bg-gray-800\">State *</option>\n                {statesAndTerritories.map((state) => (\n                  <option key={state} value={state} className=\"bg-gray-800\">\n                    {state}\n                  </option>\n                ))}\n              </select>\n\n              <input\n                type=\"text\"\n                placeholder=\"ZIP Code *\"\n                value={formData.zipCode}\n                onChange={(e) => handleInputChange(\"zipCode\", e.target.value)}\n                className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n                required\n              />\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"mb-6 text-xl font-semibold text-white\">Certifications & Experience</h3>\n            \n            <input\n              type=\"text\"\n              placeholder=\"Part 107 Certificate Number *\"\n              value={formData.part107Number}\n              onChange={(e) => handleInputChange(\"part107Number\", e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n              required\n            />\n\n            <input\n              type=\"date\"\n              placeholder=\"Part 107 Expiry Date *\"\n              value={formData.part107ExpiryDate}\n              onChange={(e) => handleInputChange(\"part107ExpiryDate\", e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n              required\n            />\n\n            <select\n              value={formData.thermalExperienceYears}\n              onChange={(e) => handleInputChange(\"thermalExperienceYears\", e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white outline-none focus:border-primary\"\n              required\n            >\n              <option value=\"\" className=\"bg-gray-800\">Thermal Imaging Experience *</option>\n              {experienceLevels.map((level) => (\n                <option key={level.value} value={level.value} className=\"bg-gray-800\">\n                  {level.label}\n                </option>\n              ))}\n            </select>\n\n            <select\n              value={formData.totalFlightHours}\n              onChange={(e) => handleInputChange(\"totalFlightHours\", e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white outline-none focus:border-primary\"\n              required\n            >\n              <option value=\"\" className=\"bg-gray-800\">Total Flight Hours *</option>\n              {flightHoursRanges.map((range) => (\n                <option key={range.value} value={range.value} className=\"bg-gray-800\">\n                  {range.label}\n                </option>\n              ))}\n            </select>\n\n            <div className=\"mt-6\">\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={formData.hasInsurance}\n                  onChange={(e) => handleInputChange(\"hasInsurance\", e.target.checked)}\n                  className=\"h-4 w-4 rounded border-white/[0.12] bg-transparent text-primary focus:ring-primary\"\n                />\n                <span className=\"text-white\">I have liability insurance</span>\n              </label>\n            </div>\n\n            {formData.hasInsurance && (\n              <div className=\"space-y-4 pl-7\">\n                <select\n                  value={formData.insuranceProvider}\n                  onChange={(e) => handleInputChange(\"insuranceProvider\", e.target.value)}\n                  className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white outline-none focus:border-primary\"\n                  required\n                >\n                  <option value=\"\" className=\"bg-gray-800\">Insurance Provider *</option>\n                  {insuranceProviders.map((provider) => (\n                    <option key={provider} value={provider} className=\"bg-gray-800\">\n                      {provider}\n                    </option>\n                  ))}\n                </select>\n\n                <input\n                  type=\"text\"\n                  placeholder=\"Policy Number *\"\n                  value={formData.insurancePolicyNumber}\n                  onChange={(e) => handleInputChange(\"insurancePolicyNumber\", e.target.value)}\n                  className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n                  required\n                />\n\n                <input\n                  type=\"date\"\n                  placeholder=\"Insurance Expiry Date *\"\n                  value={formData.insuranceExpiryDate}\n                  onChange={(e) => handleInputChange(\"insuranceExpiryDate\", e.target.value)}\n                  className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary\"\n                  required\n                />\n\n                <select\n                  value={formData.liabilityCoverage}\n                  onChange={(e) => handleInputChange(\"liabilityCoverage\", e.target.value)}\n                  className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white outline-none focus:border-primary\"\n                  required\n                >\n                  <option value=\"\" className=\"bg-gray-800\">Liability Coverage Amount *</option>\n                  <option value=\"1000000\" className=\"bg-gray-800\">$1,000,000</option>\n                  <option value=\"2000000\" className=\"bg-gray-800\">$2,000,000</option>\n                  <option value=\"5000000\" className=\"bg-gray-800\">$5,000,000</option>\n                  <option value=\"10000000\" className=\"bg-gray-800\">$10,000,000+</option>\n                </select>\n              </div>\n            )}\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            <h3 className=\"mb-6 text-xl font-semibold text-white\">Equipment</h3>\n            \n            <div>\n              <h4 className=\"mb-3 text-lg font-medium text-white\">Drone Models *</h4>\n              <p className=\"mb-3 text-sm text-gray-400\">Select all drone models you own or operate</p>\n              <div className=\"max-h-40 overflow-y-auto space-y-2 rounded-lg border border-white/[0.12] p-4\">\n                {droneModels.map((drone) => (\n                  <label key={drone} className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.droneModels.includes(drone)}\n                      onChange={(e) => handleArrayChange(\"droneModels\", drone, e.target.checked)}\n                      className=\"h-4 w-4 rounded border-white/[0.12] bg-transparent text-primary focus:ring-primary\"\n                    />\n                    <span className=\"text-white text-sm\">{drone}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"mb-3 text-lg font-medium text-white\">Thermal Camera Models *</h4>\n              <p className=\"mb-3 text-sm text-gray-400\">Select all thermal cameras you own or have access to</p>\n              <div className=\"max-h-40 overflow-y-auto space-y-2 rounded-lg border border-white/[0.12] p-4\">\n                {thermalCameraModels.map((camera) => (\n                  <label key={camera} className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.thermalCameraModels.includes(camera)}\n                      onChange={(e) => handleArrayChange(\"thermalCameraModels\", camera, e.target.checked)}\n                      className=\"h-4 w-4 rounded border-white/[0.12] bg-transparent text-primary focus:ring-primary\"\n                    />\n                    <span className=\"text-white text-sm\">{camera}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      case 5:\n        return (\n          <div className=\"space-y-6\">\n            <h3 className=\"mb-6 text-xl font-semibold text-white\">Service Area & Application</h3>\n            \n            <select\n              value={formData.maxTravelDistance}\n              onChange={(e) => handleInputChange(\"maxTravelDistance\", e.target.value)}\n              className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white outline-none focus:border-primary\"\n              required\n            >\n              <option value=\"\" className=\"bg-gray-800\">Maximum Travel Distance *</option>\n              {maxTravelDistances.map((distance) => (\n                <option key={distance.value} value={distance.value} className=\"bg-gray-800\">\n                  {distance.label}\n                </option>\n              ))}\n            </select>\n\n            <div>\n              <h4 className=\"mb-3 text-lg font-medium text-white\">Service States *</h4>\n              <p className=\"mb-3 text-sm text-gray-400\">Select all states where you can provide services</p>\n              <div className=\"max-h-40 overflow-y-auto space-y-2 rounded-lg border border-white/[0.12] p-4\">\n                {statesAndTerritories.map((state) => (\n                  <label key={state} className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={formData.serviceStates.includes(state)}\n                      onChange={(e) => handleArrayChange(\"serviceStates\", state, e.target.checked)}\n                      className=\"h-4 w-4 rounded border-white/[0.12] bg-transparent text-primary focus:ring-primary\"\n                    />\n                    <span className=\"text-white text-sm\">{state}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <label className=\"mb-3 block text-lg font-medium text-white\">\n                Tell us about your experience *\n              </label>\n              <p className=\"mb-3 text-sm text-gray-400\">\n                Describe your experience with thermal imaging, drone operations, or relevant technical background (minimum 50 characters)\n              </p>\n              <textarea\n                rows={6}\n                placeholder=\"Please describe your relevant experience, previous thermal inspection work, technical background, or why you're interested in joining our pilot network...\"\n                value={formData.applicationNotes}\n                onChange={(e) => handleInputChange(\"applicationNotes\", e.target.value)}\n                className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 px-4 font-medium text-white placeholder-gray-400 outline-none focus:border-primary resize-none\"\n                required\n              />\n              <p className=\"mt-1 text-xs text-gray-400\">\n                {formData.applicationNotes.length}/50 characters minimum\n              </p>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <>\n      <section className=\"pb-17.5 pt-17.5 lg:pb-22.5 xl:pb-27.5\">\n        <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n          <div className=\"wow fadeInUp rounded-3xl bg-white/[0.05]\">\n            <div className=\"flex\">\n              <div className=\"hidden w-full lg:block lg:w-1/2\">\n                <div className=\"relative py-20 pl-17.5 pr-22\">\n                  <div className=\"absolute right-0 top-0 h-full w-[1px] bg-gradient-to-b from-white/0 via-white/20 to-white/0\"></div>\n\n                  <h2 className=\"mb-6 max-w-[292px] text-heading-4 font-bold text-white\">\n                    Join the ComplianceDrone Pilot Network\n                  </h2>\n                  <p className=\"mb-8 max-w-[350px] text-white/80\">\n                    Professional thermal inspection pilots earn competitive rates using cutting-edge drone technology.\n                  </p>\n                  \n                  {/* Progress indicator */}\n                  <div className=\"mb-8\">\n                    <div className=\"flex items-center space-x-2 mb-4\">\n                      {Array.from({ length: totalSteps }, (_, i) => (\n                        <div\n                          key={i}\n                          className={`h-2 flex-1 rounded-full ${\n                            i + 1 <= currentStep ? 'bg-primary' : 'bg-white/20'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <p className=\"text-sm text-white/70\">\n                      Step {currentStep} of {totalSteps}\n                    </p>\n                  </div>\n\n                  <div className=\"relative aspect-square w-full max-w-[300px]\">\n                    <Image \n                      src=\"/images/thermal-inspection-main.jpg\" \n                      alt=\"Thermal inspection\" \n                      fill \n                      className=\"rounded-lg object-cover\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"w-full lg:w-1/2\">\n                <div className=\"py-8 pl-8 pr-8 sm:py-20 sm:pl-21 sm:pr-20\">\n                  <form onSubmit={submitRegistration}>\n                    {renderStep()}\n\n                    <div className=\"mt-8 flex justify-between space-x-4\">\n                      {currentStep > 1 && (\n                        <button\n                          type=\"button\"\n                          onClick={prevStep}\n                          className=\"flex items-center justify-center rounded-lg border border-white/20 px-6 py-3 font-medium text-white transition-colors hover:bg-white/10\"\n                        >\n                          Previous\n                        </button>\n                      )}\n                      \n                      <div className=\"flex-1\"></div>\n                      \n                      {currentStep < totalSteps ? (\n                        <button\n                          type=\"button\"\n                          onClick={nextStep}\n                          className=\"hero-button-gradient flex items-center justify-center rounded-lg px-6 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n                        >\n                          Next Step\n                        </button>\n                      ) : (\n                        <button\n                          type=\"submit\"\n                          disabled={loader}\n                          className=\"hero-button-gradient flex items-center justify-center rounded-lg px-6 py-3 font-medium text-white duration-300 ease-in hover:opacity-80 disabled:opacity-50\"\n                        >\n                          Submit Application {loader && <Loader />}\n                        </button>\n                      )}\n                    </div>\n                  </form>\n\n                  <p className=\"mt-6 text-center font-medium text-white\">\n                    Already have an account?{\" \"}\n                    <Link href=\"/auth/signin\" className=\"text-primary hover:underline\">\n                      Sign in Here\n                    </Link>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default PilotRegistration;","size_bytes":29817},"src/components/Auth/ResetPassword/index.tsx":{"content":"\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"react-hot-toast\";\nimport Image from \"next/image\";\nimport Loader from \"@/components/Common/Loader\";\n\nconst ResetPassword = ({ token }: { token: string }) => {\n  const [data, setData] = useState({\n    newPassword: \"\",\n    ReNewPassword: \"\",\n  });\n  const [loader, setLoader] = useState(false);\n\n  const [user, setUser] = useState({\n    email: \"\",\n  });\n\n  const router = useRouter();\n\n  useEffect(() => {\n    const verifyToken = async () => {\n      try {\n        const res = await axios.post(`/api/forgot-password/verify-token`, {\n          token,\n        });\n\n        if (res.status === 200) {\n          setUser({\n            email: res.data.email,\n          });\n        }\n      } catch (error: any) {\n        toast.error(error.response.data);\n        router.push(\"/auth/forgot-password\");\n      }\n    };\n\n    verifyToken();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoader(true);\n\n    if (data.newPassword === \"\") {\n      toast.error(\"Please enter your password.\");\n      return;\n    }\n\n    try {\n      const res = await axios.post(`/api/forgot-password/update`, {\n        email: user?.email,\n        password: data.newPassword,\n      });\n\n      if (res.status === 200) {\n        toast.success(res.data);\n        setData({ newPassword: \"\", ReNewPassword: \"\" });\n        router.push(\"/auth/signin\");\n      }\n\n      setLoader(false);\n    } catch (error: any) {\n      toast.error(error.response.data);\n      setLoader(false);\n    }\n  };\n\n  return (\n    <section className=\"pb-17.5 pt-17.5 lg:pb-22.5 xl:pb-27.5\">\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <div className=\"wow fadeInUp rounded-3xl bg-white/[0.05]\">\n          <div className=\"flex\">\n            <div className=\"hidden w-full lg:block lg:w-1/2\">\n              <div className=\"relative py-20 pl-17.5 pr-22\">\n                <div className=\"absolute right-0 top-0 h-full w-[1px] bg-linear-to-b from-white/0 via-white/20 to-white/0\"></div>\n\n                <h2 className=\"mb-10 max-w-[292px] text-heading-4 font-bold text-white\">\n                  Unlock the Power of Writing Tool\n                </h2>\n                <div className=\"relative aspect-61/50 w-full max-w-[427px]\">\n                  <Image src=\"/images/signin/sigin.svg\" alt=\"signin\" fill />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"w-full lg:w-1/2\">\n              <div className=\"flex h-full flex-col justify-center py-8 pl-8 pr-8 sm:py-20  sm:pl-21 sm:pr-20\">\n                <div>\n                  <form onSubmit={handleSubmit}>\n                    <div className=\"relative mb-4\">\n                      <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                        <svg\n                          width=\"16\"\n                          height=\"12\"\n                          viewBox=\"0 0 16 12\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            d=\"M13.9998 0.399994H1.9998C1.1498 0.399994 0.424805 1.09999 0.424805 1.97499V10.075C0.424805 10.925 1.1248 11.65 1.9998 11.65H13.9998C14.8498 11.65 15.5748 10.95 15.5748 10.075V1.94999C15.5748 1.09999 14.8498 0.399994 13.9998 0.399994ZM13.9998 1.52499C14.0248 1.52499 14.0498 1.52499 14.0748 1.52499L7.9998 5.42499L1.9248 1.52499C1.9498 1.52499 1.9748 1.52499 1.9998 1.52499H13.9998ZM13.9998 10.475H1.9998C1.7498 10.475 1.5498 10.275 1.5498 10.025V2.62499L7.3998 6.37499C7.5748 6.49999 7.7748 6.54999 7.9748 6.54999C8.1748 6.54999 8.3748 6.49999 8.5498 6.37499L14.3998 2.62499V10.05C14.4498 10.3 14.2498 10.475 13.9998 10.475Z\"\n                            fill=\"#918EA0\"\n                          />\n                        </svg>\n                      </span>\n                      <input\n                        type=\"text\"\n                        placeholder=\"Enter new password\"\n                        value={data.newPassword}\n                        onChange={handleChange}\n                        name=\"newPassword\"\n                        className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n                      />\n                    </div>\n                    <div className=\"relative mb-4\">\n                      <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                        <svg\n                          width=\"16\"\n                          height=\"12\"\n                          viewBox=\"0 0 16 12\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            d=\"M13.9998 0.399994H1.9998C1.1498 0.399994 0.424805 1.09999 0.424805 1.97499V10.075C0.424805 10.925 1.1248 11.65 1.9998 11.65H13.9998C14.8498 11.65 15.5748 10.95 15.5748 10.075V1.94999C15.5748 1.09999 14.8498 0.399994 13.9998 0.399994ZM13.9998 1.52499C14.0248 1.52499 14.0498 1.52499 14.0748 1.52499L7.9998 5.42499L1.9248 1.52499C1.9498 1.52499 1.9748 1.52499 1.9998 1.52499H13.9998ZM13.9998 10.475H1.9998C1.7498 10.475 1.5498 10.275 1.5498 10.025V2.62499L7.3998 6.37499C7.5748 6.49999 7.7748 6.54999 7.9748 6.54999C8.1748 6.54999 8.3748 6.49999 8.5498 6.37499L14.3998 2.62499V10.05C14.4498 10.3 14.2498 10.475 13.9998 10.475Z\"\n                            fill=\"#918EA0\"\n                          />\n                        </svg>\n                      </span>\n                      <input\n                        type=\"text\"\n                        placeholder=\"Re-enter new password\"\n                        value={data.ReNewPassword}\n                        name=\"ReNewPassword\"\n                        onChange={handleChange}\n                        className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n                      />\n                    </div>\n\n                    <button\n                      type=\"submit\"\n                      className=\"hero-button-gradient flex w-full items-center justify-center rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n                    >\n                      Send Email {loader && <Loader />}\n                    </button>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ResetPassword;\n","size_bytes":7019},"src/components/Auth/SignIn/index.tsx":{"content":"\"use client\";\nimport { signIn } from \"next-auth/react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport toast from \"react-hot-toast\";\nimport SocialSignup from \"../SocialSignup\";\nimport SwitchOptions from \"../SwitchOptions\";\nimport MagicLink from \"../MagicLink\";\nimport Loader from \"@/components/Common/Loader\";\nimport { integrations, messages } from \"../../../../integrations.config\";\nimport z from \"zod\";\n\nconst SigninSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address.\"),\n  password: z\n    .string()\n    .min(8, { message: \"Password must be at least 8 characters long\" })\n    .refine((val) => /[A-Z]/.test(val), {\n      message: \"Password must contain at least one uppercase letter.\",\n    })\n    .refine((val) => /[a-z]/.test(val), {\n      message: \"Password must contain at least one lowercase letter.\",\n    })\n    .refine((val) => /\\d/.test(val), {\n      message: \"Password must contain at least one number.\",\n    })\n    .refine((val) => /[@$!%*?&]/.test(val), {\n      message: \"Password must contain at least one special character.\",\n    }),\n});\n\nconst Signin = () => {\n  const router = useRouter();\n  const [data, setData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [loader, setLoader] = useState(false);\n  const [remember, setRemember] = useState(false);\n  const [isPassword, setIsPassword] = useState(false);\n\n  const loginUser = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isAuthEnabled) {\n      toast.error(messages.auth);\n      return;\n    }\n\n    const result = SigninSchema.safeParse({ ...data });\n    if (!result.success) {\n      toast.error(result.error.errors[0].message);\n      return;\n    }\n\n    setLoader(true);\n    signIn(\"credentials\", { ...data, redirect: false }).then(async (callback) => {\n      if (callback?.error) {\n        toast.error(callback.error);\n        setLoader(false);\n        return;\n      }\n\n      if (callback?.ok && !callback?.error) {\n        toast.success(\"Logged in successfully\");\n        setLoader(false);\n        \n        // Check if user is a pilot and redirect to dashboard\n        try {\n          const response = await fetch('/api/auth/user');\n          if (response.ok) {\n            const user = await response.json();\n            if (user?.pilotProfile) {\n              router.push('/pilots/dashboard');\n            } else {\n              router.push('/');\n            }\n          } else {\n            router.push('/');\n          }\n        } catch (error) {\n          console.error('Error checking user profile:', error);\n          router.push('/');\n        }\n        return;\n      }\n    });\n  };\n  return (\n    <>\n      <section className=\"pb-17.5 pt-17.5 lg:pb-22.5 xl:pb-27.5\">\n        <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n          <div className=\"wow fadeInUp rounded-3xl bg-white/[0.05]\">\n            <div className=\"flex\">\n              <div className=\"hidden w-full lg:block lg:w-1/2\">\n                <div className=\"relative py-20 pl-17.5 pr-22\">\n                  <div className=\"absolute right-0 top-0 h-full w-[1px] bg-linear-to-b from-white/0 via-white/20 to-white/0\"></div>\n\n                  <h2 className=\"mb-10 max-w-[292px] text-heading-4 font-bold text-white\">\n                    Unlock the Power of Writing Tool\n                  </h2>\n                  <div className=\"relative aspect-61/50 w-full max-w-[427px]\">\n                    <Image src=\"/images/signin/sigin.svg\" alt=\"signin\" fill />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"w-full lg:w-1/2\">\n                <div className=\"py-8 pl-8 pr-8 sm:py-20 sm:pl-21 sm:pr-20\">\n                  <div>\n                    <SocialSignup />\n\n                    <span className=\"relative my-7.5 block text-center text-sm font-medium\">\n                      <span className=\"absolute left-0 top-1/2 block h-[1px] w-22.5 bg-white/[0.12]\"></span>\n                      <span className=\"absolute right-0 top-1/2 block h-[1px] w-22.5 bg-white/[0.12]\"></span>\n                      Or sign in with email\n                    </span>\n\n                    <SwitchOptions\n                      isPassword={isPassword}\n                      setIsPassword={setIsPassword}\n                    />\n\n                    {!isPassword ? (\n                      <MagicLink />\n                    ) : (\n                      <form onSubmit={loginUser}>\n                        <div className=\"relative mb-4\">\n                          <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                            <svg\n                              width=\"16\"\n                              height=\"12\"\n                              viewBox=\"0 0 16 12\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                              <path\n                                d=\"M13.9998 0.399994H1.9998C1.1498 0.399994 0.424805 1.09999 0.424805 1.97499V10.075C0.424805 10.925 1.1248 11.65 1.9998 11.65H13.9998C14.8498 11.65 15.5748 10.95 15.5748 10.075V1.94999C15.5748 1.09999 14.8498 0.399994 13.9998 0.399994ZM13.9998 1.52499C14.0248 1.52499 14.0498 1.52499 14.0748 1.52499L7.9998 5.42499L1.9248 1.52499C1.9498 1.52499 1.9748 1.52499 1.9998 1.52499H13.9998ZM13.9998 10.475H1.9998C1.7498 10.475 1.5498 10.275 1.5498 10.025V2.62499L7.3998 6.37499C7.5748 6.49999 7.7748 6.54999 7.9748 6.54999C8.1748 6.54999 8.3748 6.49999 8.5498 6.37499L14.3998 2.62499V10.05C14.4498 10.3 14.2498 10.475 13.9998 10.475Z\"\n                                fill=\"#918EA0\"\n                              />\n                            </svg>\n                          </span>\n                          <input\n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            value={data.email}\n                            onChange={(e) =>\n                              setData({\n                                ...data,\n                                email: e.target.value.toLowerCase(),\n                              })\n                            }\n                            className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n                          />\n                        </div>\n\n                        <div className=\"relative mb-5\">\n                          <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                            <svg\n                              width=\"16\"\n                              height=\"16\"\n                              viewBox=\"0 0 16 16\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                              <g clipPath=\"url(#clip0_368_6544)\">\n                                <path\n                                  d=\"M14.0752 1.92501C13.1252 0.975012 11.8502 0.450012 10.5002 0.450012C9.1502 0.450012 7.8502 0.975012 6.9002 1.92501C5.6252 3.20001 5.1252 5.00001 5.5752 6.75001L0.725195 11.575C0.550195 11.75 0.450195 12 0.450195 12.275V14.6C0.450195 15.125 0.875195 15.575 1.4252 15.575H3.7502C4.0002 15.575 4.2502 15.475 4.4502 15.3L5.0252 14.725C5.2252 14.525 5.3502 14.225 5.3002 13.925V13.875L5.6002 13.85C6.0752 13.8 6.4252 13.45 6.4752 12.975L6.5002 12.675H6.5502C6.8252 12.7 7.1002 12.625 7.3252 12.425C7.5252 12.25 7.6502 11.975 7.6502 11.7V11.5H7.8252C8.0752 11.5 8.3252 11.4 8.5002 11.225L9.3252 10.425C11.0502 10.85 12.8502 10.375 14.1002 9.12501C16.0502 7.12501 16.0502 3.90001 14.0752 1.92501ZM13.2752 8.30001C12.2502 9.32501 10.7252 9.70001 9.3002 9.22501C9.1002 9.15001 8.8752 9.20001 8.7252 9.35001L7.7252 10.35H7.0502C6.7502 10.35 6.4752 10.6 6.4752 10.925V11.525L6.0252 11.475C5.8752 11.45 5.7252 11.5 5.6002 11.6C5.4752 11.7 5.4002 11.825 5.4002 11.975L5.3252 12.725L4.5752 12.8C4.4252 12.825 4.2752 12.9 4.2002 13C4.1002 13.125 4.0502 13.275 4.0752 13.425L4.1502 13.975L3.6752 14.45H1.5752V12.35L6.6002 7.32501C6.7502 7.17501 6.8002 6.95001 6.7252 6.75001C6.2752 5.32501 6.6252 3.80001 7.6752 2.75001C8.4252 2.00001 9.4002 1.60001 10.4752 1.60001C11.5252 1.60001 12.5252 2.00001 13.2752 2.75001C14.8252 4.25001 14.8252 6.75001 13.2752 8.30001Z\"\n                                  fill=\"#918EA0\"\n                                />\n                                <path\n                                  d=\"M11.3498 2.875C10.8748 2.875 10.4248 3.05 10.0748 3.4C9.3748 4.1 9.3748 5.225 10.0748 5.925C10.4248 6.275 10.8748 6.45 11.3498 6.45C11.8248 6.45 12.2748 6.275 12.6248 5.925C12.9748 5.575 13.1498 5.125 13.1498 4.65C13.1498 4.175 12.9748 3.725 12.6248 3.375C12.2748 3.05 11.8248 2.875 11.3498 2.875ZM11.8248 5.125C11.5748 5.375 11.1248 5.375 10.8748 5.125C10.6248 4.875 10.6248 4.45 10.8748 4.175C10.9998 4.05 11.1748 3.975 11.3498 3.975C11.5248 3.975 11.6998 4.05 11.8248 4.175C11.9498 4.3 12.0248 4.475 12.0248 4.65C12.0248 4.825 11.9498 5 11.8248 5.125Z\"\n                                  fill=\"#918EA0\"\n                                />\n                              </g>\n                              <defs>\n                                <clipPath id=\"clip0_368_6544\">\n                                  <rect width=\"16\" height=\"16\" fill=\"white\" />\n                                </clipPath>\n                              </defs>\n                            </svg>\n                          </span>\n                          <input\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            value={data.password}\n                            onChange={(e) =>\n                              setData({ ...data, password: e.target.value })\n                            }\n                            className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n                          />\n                        </div>\n\n                        <div className=\"mb-7.5 flex items-center justify-between\">\n                          <div x-data=\"{ checkboxToggle: false }\">\n                            <label\n                              htmlFor=\"checkboxLabelTwo\"\n                              className=\"flex cursor-pointer select-none items-center text-sm font-medium\"\n                            >\n                              <div className=\"relative\">\n                                <input\n                                  type=\"checkbox\"\n                                  id=\"checkboxLabelTwo\"\n                                  className=\"sr-only text-white\"\n                                  onChange={() => setRemember(!remember)}\n                                />\n                                <div\n                                  className={`mr-2 flex h-5 w-5 items-center justify-center rounded-md border ${\n                                    remember\n                                      ? \"border-purple bg-purple\"\n                                      : \"border-white/[0.12]\"\n                                  }`}\n                                >\n                                  <span\n                                    className={`${\n                                      remember ? \"opacity-100\" : \"opacity-0\"\n                                    }`}\n                                  >\n                                    <svg\n                                      width=\"11\"\n                                      height=\"8\"\n                                      viewBox=\"0 0 11 8\"\n                                      fill=\"none\"\n                                      xmlns=\"http://www.w3.org/2000/svg\"\n                                    >\n                                      <path\n                                        d=\"M10.0915 0.951972L10.0867 0.946075L10.0813 0.940568C9.90076 0.753564 9.61034 0.753146 9.42927 0.939309L4.16201 6.22962L1.58507 3.63469C1.40401 3.44841 1.11351 3.44879 0.932892 3.63584C0.755703 3.81933 0.755703 4.10875 0.932892 4.29224L0.932878 4.29225L0.934851 4.29424L3.58046 6.95832C3.73676 7.11955 3.94983 7.2 4.1473 7.2C4.36196 7.2 4.55963 7.11773 4.71406 6.9584L10.0468 1.60234C10.2436 1.4199 10.2421 1.1339 10.0915 0.951972ZM4.2327 6.30081L4.2317 6.2998C4.23206 6.30015 4.23237 6.30049 4.23269 6.30082L4.2327 6.30081Z\"\n                                        fill=\"#FFF\"\n                                        stroke=\"#FF\"\n                                        strokeWidth=\"0.4\"\n                                      ></path>\n                                    </svg>\n                                  </span>\n                                </div>\n                              </div>\n                              Remember me\n                            </label>\n                          </div>\n                          <Link\n                            href=\"/auth/forgot-password\"\n                            className=\"text-sm font-medium text-purple\"\n                          >\n                            Forgot Password?\n                          </Link>\n                        </div>\n\n                        <button\n                          type=\"submit\"\n                          className=\"hero-button-gradient flex w-full items-center  justify-center rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n                        >\n                          Sign in {loader && <Loader />}\n                        </button>\n                      </form>\n                    )}\n\n                    <p className=\"mt-5 text-center font-medium text-white\">\n                      Don{`'`}t have an account?{\" \"}\n                      <Link href=\"/auth/signup\" className=\"text-purple\">\n                        Sign Up for Free\n                      </Link>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Signin;\n","size_bytes":14248},"src/components/Auth/Signup/index.tsx":{"content":"\"use client\";\nimport axios from \"axios\";\nimport { signIn } from \"next-auth/react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport SocialSignup from \"../SocialSignup\";\nimport SwitchOptions from \"../SwitchOptions\";\nimport MagicLink from \"../MagicLink\";\nimport Loader from \"@/components/Common/Loader\";\nimport { integrations, messages } from \"../../../../integrations.config\";\nimport z from \"zod\";\n\nconst RegisterSchema = z.object({\n  name: z.string(),\n  email: z.string().email(\"Please enter a valid email address.\"),\n  password: z\n    .string()\n    .min(8, { message: \"Password must be at least 8 characters long\" })\n    .refine((val) => /[A-Z]/.test(val), {\n      message: \"Password must contain at least one uppercase letter.\",\n    })\n    .refine((val) => /[a-z]/.test(val), {\n      message: \"Password must contain at least one lowercase letter.\",\n    })\n    .refine((val) => /\\d/.test(val), {\n      message: \"Password must contain at least one number.\",\n    })\n    .refine((val) => /[@$!%*?&]/.test(val), {\n      message: \"Password must contain at least one special character.\",\n    }),\n});\n\nconst Signup = () => {\n  const [data, setData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [loader, setLoader] = useState(false);\n\n  const [isPassword, setIsPassword] = useState(false);\n\n  const { name, email, password } = data;\n\n  const registerUser = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isAuthEnabled) {\n      toast.error(messages.auth);\n      return;\n    }\n\n    setLoader(true);\n\n    const result = RegisterSchema.safeParse({ name, email, password });\n    if (!result.success) {\n      toast.error(result.error.errors[0].message);\n      setLoader(false);\n      return;\n    }\n\n    axios\n      .post(\"/api/register\", {\n        name,\n        email,\n        password,\n      })\n      .then(() => {\n        toast.success(\"User has been registered\");\n        setData({\n          name: \"\",\n          email: \"\",\n          password: \"\",\n        });\n        setLoader(false);\n      })\n      .catch(() => {\n        toast.error(\"Something went wrong\");\n        setLoader(false);\n      });\n  };\n\n  return (\n    <>\n      <section className=\"pb-17.5 pt-17.5 lg:pb-22.5 xl:pb-27.5\">\n        <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n          <div className=\"wow fadeInUp rounded-3xl bg-white/[0.05]\">\n            <div className=\"flex\">\n              <div className=\"hidden w-full lg:block lg:w-1/2\">\n                <div className=\"relative py-20 pl-17.5 pr-22\">\n                  <div className=\"absolute right-0 top-0 h-full w-[1px] bg-linear-to-b from-white/0 via-white/20 to-white/0\"></div>\n\n                  <h2 className=\"mb-10 max-w-[292px] text-heading-4 font-bold text-white\">\n                    Unlock the Power of Writing Tool\n                  </h2>\n                  <div className=\"relative aspect-61/50 w-full max-w-[427px]\">\n                    <Image src=\"/images/signin/sigin.svg\" alt=\"signin\" fill />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"w-full lg:w-1/2\">\n                <div className=\"py-8 pl-8 pr-8 sm:py-20 sm:pl-21 sm:pr-20\">\n                  <div>\n                    <SocialSignup />\n\n                    <span className=\"relative my-7.5 block text-center text-sm font-medium\">\n                      <span className=\"absolute left-0 top-1/2 block h-[1px] w-22.5 bg-white/[0.12]\"></span>\n                      <span className=\"absolute right-0 top-1/2 block h-[1px] w-22.5 bg-white/[0.12]\"></span>\n                      Or sign up with email\n                    </span>\n\n                    <SwitchOptions\n                      isPassword={isPassword}\n                      setIsPassword={setIsPassword}\n                    />\n\n                    {!isPassword ? (\n                      <MagicLink />\n                    ) : (\n                      <form onSubmit={registerUser}>\n                        <div className=\"relative mb-4\">\n                          <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                            <svg\n                              width=\"16\"\n                              height=\"16\"\n                              viewBox=\"0 0 16 16\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                              <path\n                                d=\"M8.00039 6.92499C9.85039 6.92499 11.3504 5.47499 11.3504 3.67499C11.3504 1.87499 9.85039 0.424988 8.00039 0.424988C6.15039 0.424988 4.65039 1.87499 4.65039 3.67499C4.65039 5.47499 6.15039 6.92499 8.00039 6.92499ZM8.00039 1.57499C9.22539 1.57499 10.2254 2.52499 10.2254 3.69999C10.2254 4.87499 9.22539 5.82499 8.00039 5.82499C6.77539 5.82499 5.77539 4.87499 5.77539 3.69999C5.77539 2.52499 6.77539 1.57499 8.00039 1.57499Z\"\n                                fill=\"#918EA0\"\n                              />\n                              <path\n                                d=\"M9.62539 8.04999H6.37539C3.70039 8.04999 1.52539 10.25 1.52539 12.925V15C1.52539 15.3 1.77539 15.575 2.10039 15.575C2.42539 15.575 2.67539 15.325 2.67539 15V12.925C2.67539 10.875 4.35039 9.17499 6.42539 9.17499H9.65039C11.7004 9.17499 13.4004 10.85 13.4004 12.925V15C13.4004 15.3 13.6504 15.575 13.9754 15.575C14.3004 15.575 14.5504 15.325 14.5504 15V12.925C14.4754 10.25 12.3004 8.04999 9.62539 8.04999Z\"\n                                fill=\"#918EA0\"\n                              />\n                            </svg>\n                          </span>\n                          <input\n                            type=\"name\"\n                            placeholder=\"Enter your name\"\n                            value={data.name}\n                            onChange={(e) =>\n                              setData({\n                                ...data,\n                                name: e.target.value,\n                              })\n                            }\n                            className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n                          />\n                        </div>\n\n                        <div className=\"relative mb-4\">\n                          <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                            <svg\n                              width=\"16\"\n                              height=\"12\"\n                              viewBox=\"0 0 16 12\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                              <path\n                                d=\"M13.9998 0.399994H1.9998C1.1498 0.399994 0.424805 1.09999 0.424805 1.97499V10.075C0.424805 10.925 1.1248 11.65 1.9998 11.65H13.9998C14.8498 11.65 15.5748 10.95 15.5748 10.075V1.94999C15.5748 1.09999 14.8498 0.399994 13.9998 0.399994ZM13.9998 1.52499C14.0248 1.52499 14.0498 1.52499 14.0748 1.52499L7.9998 5.42499L1.9248 1.52499C1.9498 1.52499 1.9748 1.52499 1.9998 1.52499H13.9998ZM13.9998 10.475H1.9998C1.7498 10.475 1.5498 10.275 1.5498 10.025V2.62499L7.3998 6.37499C7.5748 6.49999 7.7748 6.54999 7.9748 6.54999C8.1748 6.54999 8.3748 6.49999 8.5498 6.37499L14.3998 2.62499V10.05C14.4498 10.3 14.2498 10.475 13.9998 10.475Z\"\n                                fill=\"#918EA0\"\n                              />\n                            </svg>\n                          </span>\n                          <input\n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            value={data.email}\n                            onChange={(e) =>\n                              setData({\n                                ...data,\n                                email: e.target.value.toLowerCase(),\n                              })\n                            }\n                            className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n                          />\n                        </div>\n\n                        <div className=\"relative mb-5\">\n                          <span className=\"absolute left-6 top-1/2 -translate-y-1/2\">\n                            <svg\n                              width=\"16\"\n                              height=\"16\"\n                              viewBox=\"0 0 16 16\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                              <g clipPath=\"url(#clip0_368_6544)\">\n                                <path\n                                  d=\"M14.0752 1.92501C13.1252 0.975012 11.8502 0.450012 10.5002 0.450012C9.1502 0.450012 7.8502 0.975012 6.9002 1.92501C5.6252 3.20001 5.1252 5.00001 5.5752 6.75001L0.725195 11.575C0.550195 11.75 0.450195 12 0.450195 12.275V14.6C0.450195 15.125 0.875195 15.575 1.4252 15.575H3.7502C4.0002 15.575 4.2502 15.475 4.4502 15.3L5.0252 14.725C5.2252 14.525 5.3502 14.225 5.3002 13.925V13.875L5.6002 13.85C6.0752 13.8 6.4252 13.45 6.4752 12.975L6.5002 12.675H6.5502C6.8252 12.7 7.1002 12.625 7.3252 12.425C7.5252 12.25 7.6502 11.975 7.6502 11.7V11.5H7.8252C8.0752 11.5 8.3252 11.4 8.5002 11.225L9.3252 10.425C11.0502 10.85 12.8502 10.375 14.1002 9.12501C16.0502 7.12501 16.0502 3.90001 14.0752 1.92501ZM13.2752 8.30001C12.2502 9.32501 10.7252 9.70001 9.3002 9.22501C9.1002 9.15001 8.8752 9.20001 8.7252 9.35001L7.7252 10.35H7.0502C6.7502 10.35 6.4752 10.6 6.4752 10.925V11.525L6.0252 11.475C5.8752 11.45 5.7252 11.5 5.6002 11.6C5.4752 11.7 5.4002 11.825 5.4002 11.975L5.3252 12.725L4.5752 12.8C4.4252 12.825 4.2752 12.9 4.2002 13C4.1002 13.125 4.0502 13.275 4.0752 13.425L4.1502 13.975L3.6752 14.45H1.5752V12.35L6.6002 7.32501C6.7502 7.17501 6.8002 6.95001 6.7252 6.75001C6.2752 5.32501 6.6252 3.80001 7.6752 2.75001C8.4252 2.00001 9.4002 1.60001 10.4752 1.60001C11.5252 1.60001 12.5252 2.00001 13.2752 2.75001C14.8252 4.25001 14.8252 6.75001 13.2752 8.30001Z\"\n                                  fill=\"#918EA0\"\n                                />\n                                <path\n                                  d=\"M11.3498 2.875C10.8748 2.875 10.4248 3.05 10.0748 3.4C9.3748 4.1 9.3748 5.225 10.0748 5.925C10.4248 6.275 10.8748 6.45 11.3498 6.45C11.8248 6.45 12.2748 6.275 12.6248 5.925C12.9748 5.575 13.1498 5.125 13.1498 4.65C13.1498 4.175 12.9748 3.725 12.6248 3.375C12.2748 3.05 11.8248 2.875 11.3498 2.875ZM11.8248 5.125C11.5748 5.375 11.1248 5.375 10.8748 5.125C10.6248 4.875 10.6248 4.45 10.8748 4.175C10.9998 4.05 11.1748 3.975 11.3498 3.975C11.5248 3.975 11.6998 4.05 11.8248 4.175C11.9498 4.3 12.0248 4.475 12.0248 4.65C12.0248 4.825 11.9498 5 11.8248 5.125Z\"\n                                  fill=\"#918EA0\"\n                                />\n                              </g>\n                              <defs>\n                                <clipPath id=\"clip0_368_6544\">\n                                  <rect width=\"16\" height=\"16\" fill=\"white\" />\n                                </clipPath>\n                              </defs>\n                            </svg>\n                          </span>\n                          <input\n                            type=\"password\"\n                            placeholder=\"Confirm password\"\n                            value={data.password}\n                            onChange={(e) =>\n                              setData({\n                                ...data,\n                                password: e.target.value,\n                              })\n                            }\n                            className=\"w-full rounded-lg border border-white/[0.12] bg-transparent py-3.5 pl-14.5 pr-4 font-medium text-white outline-hidden focus:border-purple focus-visible:shadow-none\"\n                          />\n                        </div>\n\n                        <button\n                          type=\"submit\"\n                          className=\"hero-button-gradient flex w-full items-center justify-center rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80\"\n                        >\n                          Sign up {loader && <Loader />}\n                        </button>\n                      </form>\n                    )}\n\n                    <p className=\"mt-5 text-center font-medium text-white\">\n                      Already have an account?{\" \"}\n                      <Link href=\"/auth/signin\" className=\"text-purple\">\n                        Sign in Here\n                      </Link>\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Signup;\n","size_bytes":13042},"src/components/Home/Clients/SingleClient.tsx":{"content":"import { Client } from \"@/types/client\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\n\nconst SingleClient = ({ client }: { client: Client }) => {\n  return (\n    <div className=\"swiper-slide w-auto!\">\n      <Link href=\"/#\" className=\"static flex h-9 w-auto items-center\">\n        <Image\n          src={client.image}\n          alt=\"client\"\n          style={{ width: \"auto\", height: \"auto\", verticalAlign: \"middle\" }}\n          width={80}\n          height={36}\n        />\n      </Link>\n    </div>\n  );\n};\n\nexport default SingleClient;\n","size_bytes":549},"src/components/Home/Clients/clientsData.ts":{"content":"import { Client } from \"@/types/client\";\n\nconst clientsData: Client[] = [\n  {\n    id: 36,\n    image: \"/images/clients/client-01.svg\",\n  },\n  {\n    id: 4,\n    image: \"/images/clients/client-02.svg\",\n  },\n  {\n    id: 407,\n    image: \"/images/clients/client-03.svg\",\n  },\n  {\n    id: 29,\n    image: \"/images/clients/client-04.svg\",\n  },\n  {\n    id: 99,\n    image: \"/images/clients/client-05.svg\",\n  },\n  {\n    id: 79,\n    image: \"/images/clients/client-06.svg\",\n  },\n  {\n    id: 51,\n    image: \"/images/clients/client-07.svg\",\n  },\n  {\n    id: 59,\n    image: \"/images/clients/client-01.svg\",\n  },\n  {\n    id: 92,\n    image: \"/images/clients/client-02.svg\",\n  },\n  {\n    id: 87,\n    image: \"/images/clients/client-03.svg\",\n  },\n  {\n    id: 27,\n    image: \"/images/clients/client-04.svg\",\n  },\n  {\n    id: 52,\n    image: \"/images/clients/client-05.svg\",\n  },\n  {\n    id: 64,\n    image: \"/images/clients/client-06.svg\",\n  },\n  {\n    id: 97,\n    image: \"/images/clients/client-07.svg\",\n  },\n  {\n    id: 32,\n    image: \"/images/clients/client-01.svg\",\n  },\n  {\n    id: 13,\n    image: \"/images/clients/client-02.svg\",\n  },\n  {\n    id: 35,\n    image: \"/images/clients/client-03.svg\",\n  },\n  {\n    id: 67,\n    image: \"/images/clients/client-04.svg\",\n  },\n  {\n    id: 11,\n    image: \"/images/clients/client-05.svg\",\n  },\n  {\n    id: 76,\n    image: \"/images/clients/client-06.svg\",\n  },\n  {\n    id: 2,\n    image: \"/images/clients/client-07.svg\",\n  },\n  {\n    id: 47,\n    image: \"/images/clients/client-03.svg\",\n  },\n];\nexport default clientsData;\n","size_bytes":1534},"src/components/Home/Clients/index.tsx":{"content":"\"use client\";\nimport \"swiper/css\";\nimport { Autoplay } from \"swiper/modules\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport SingleClient from \"./SingleClient\";\nimport clientsData from \"./clientsData\";\n\nconst Clients = () => {\n  return (\n    <section className=\"py-19\">\n      <div className=\"mx-auto max-w-[1104px] px-4 sm:px-8 xl:px-0\">\n        <div className=\"relative z-10 overflow-hidden\">\n          <span className=\"pointer-events-none absolute inset-0 left-0 top-1/2 z-10 block h-[37px] w-full max-w-[128px] -translate-y-1/2 bg-linear-to-l from-dark/0 to-dark/100\"></span>\n          <span className=\"pointer-events-none absolute inset-0 left-auto top-1/2 z-10 block h-[37px] w-full max-w-[128px] -translate-y-1/2 bg-linear-to-r from-dark/0 to-dark/100\"></span>\n          <div className=\"clients-carousel\">\n            <Swiper\n              modules={[Autoplay]}\n              slidesPerView=\"auto\"\n              spaceBetween={64}\n              loop={true}\n              speed={5000}\n              noSwiping={true}\n              noSwipingClass=\"swiper-slide w-auto\"\n              autoplay={{\n                delay: 0,\n                disableOnInteraction: true,\n              }}\n            >\n              {clientsData.map((client) => (\n                <SwiperSlide key={client.id}>\n                  <SingleClient client={client} />\n                </SwiperSlide>\n              ))}\n            </Swiper>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Clients;\n","size_bytes":1514},"src/components/Home/Features/SingleFeature.tsx":{"content":"import { Feature } from \"@/types/feature\";\nimport Image from \"next/image\";\n\nconst SingleFeature = ({ feature }: { feature: Feature }) => {\n  return (\n    <div className=\"w-full sm:w-1/2 lg:w-1/3\">\n      <div className=\"group relative overflow-hidden px-4 py-8 text-center sm:py-10 lg:px-8 xl:px-13 xl:py-15\">\n        <span\n          className={`features-bg absolute left-0 top-0 -z-1 h-full w-full opacity-0 group-hover:opacity-100 ${\n            feature?.rotate && \"rotate-180\"\n          }`}\n        ></span>\n        <span className=\"icon-border relative mx-auto mb-8 inline-flex h-20 w-full max-w-[80px] items-center justify-center rounded-full\">\n          <Image src={feature.icon} alt=\"icon\" width={32} height={32} />\n        </span>\n        <h3 className=\"mb-4 text-lg font-semibold text-white\">\n          {feature.title}\n        </h3>\n        <p className=\"font-medium\">{feature.description}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleFeature;\n","size_bytes":965},"src/components/Home/Features/featuresData.ts":{"content":"import { Feature } from \"@/types/feature\";\n\nconst featuresData: Feature[] = [\n  {\n    id: 1,\n    title: \"OpenAI Integration\",\n    description:\n      \"Our AI writing tool analyzes your content, suggests improvements\",\n    icon: \"/images/features/icon-01.svg\",\n  },\n  {\n    id: 2,\n    title: \"Next.js 15, React 19, TS\",\n    description: \"Say goodbye to embarrassing typos and grammar mistakes\",\n    icon: \"/images/features/icon-02.svg\",\n  },\n  {\n    id: 3,\n    title: \"Auth, DB, Sanity Blog\",\n    description:\n      \"Originality is key, and our AI writing tool helps you maintain it\",\n    icon: \"/images/features/icon-03.svg\",\n  },\n  {\n    id: 4,\n    title: \"Cutting-edge Technologies\",\n    description:\n      \"Transform your spoken words into written text easily & effortlessly\",\n    icon: \"/images/features/icon-04.svg\",\n    rotate: true,\n  },\n  {\n    id: 5,\n    title: \"Pre-made AI Examples\",\n    description:\n      \"Whether you need a professional, or positive tone it has everyone\",\n    icon: \"/images/features/icon-05.svg\",\n    rotate: true,\n  },\n  {\n    id: 6,\n    title: \"Rich Documentation\",\n    description: \"Need inspiration or assistance with generating content?\",\n    icon: \"/images/features/icon-06.svg\",\n    rotate: true,\n  },\n];\n\nexport default featuresData;\n","size_bytes":1273},"src/components/Home/Features/index.tsx":{"content":"import SectionTitle from \"@/components/Common/SectionTitle\";\nimport SingleFeature from \"./SingleFeature\";\nimport featuresData from \"./featuresData\";\n\nconst Features = () => {\n  return (\n    <section\n      id=\"features\"\n      className=\"scroll-mt-17 overflow-hidden pt-17.5 lg:pt-22.5 xl:pt-27.5\"\n    >\n      <div className=\"mx-auto max-w-[1222px] px-4 sm:px-8 xl:px-0\">\n        <SectionTitle\n          subTitle=\"Main Features\"\n          title=\"Key Features of ComplianceDrone\"\n          paragraph=\"Professional Thermal Inspection & Compliance Platform\"\n        />\n\n        <div className=\"relative\">\n          <div className=\"features-row-border absolute left-1/2 top-1/2 hidden h-[1px] w-1/2 -translate-y-1/2 rotate-90 lg:left-1/4 lg:block lg:-translate-x-1/3\"></div>\n          <div className=\"features-row-border absolute right-1/2 top-1/2 hidden h-[1px] w-1/2 -translate-y-1/2 rotate-90 lg:right-[8.3%] lg:block\"></div>\n\n          {/* <!--=== Features Row ===--> */}\n          <div className=\"flex flex-wrap justify-center\">\n            {featuresData.slice(0, 3).map((feature) => (\n              <SingleFeature key={feature.id} feature={feature} />\n            ))}\n          </div>\n\n          <div className=\"features-row-border h-[1px] w-full\"></div>\n\n          {/* <!--=== Features Row ===--> */}\n          <div className=\"flex flex-wrap justify-center\">\n            {featuresData.slice(3).map((feature) => (\n              <SingleFeature key={feature.title} feature={feature} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Features;\n","size_bytes":1594},"src/components/Home/FeaturesList/HighLighter.tsx":{"content":"\"use client\";\nimport { useEffect, useRef } from \"react\";\n\nconst Highlighter = ({ children }: { children: React.ReactNode }) => {\n  const containerRef = useRef(null);\n  const boxesRef = useRef([]);\n\n  const mouse = useRef({ x: 0, y: 0 });\n  const containerSize = useRef({ w: 0, h: 0 });\n\n  const initContainer = () => {\n    const containerElement = containerRef.current as any;\n    containerSize.current.w = containerElement?.offsetWidth;\n    containerSize.current.h = containerElement.offsetHeight;\n  };\n\n  const onMouseMove = (event: any) => {\n    const { clientX, clientY } = event;\n    const containerElement = containerRef.current as any;\n    const rect = containerElement.getBoundingClientRect();\n    const { w, h } = containerSize.current;\n    const x = clientX - rect.left;\n    const y = clientY - rect.top;\n\n    containerElement.style.setProperty(\"--mouse-x\", `${x}px`);\n    containerElement.style.setProperty(\"--mouse-y\", `${y}px`);\n  };\n\n  useEffect(() => {\n    initContainer();\n    window.addEventListener(\"resize\", initContainer);\n    window.addEventListener(\"mousemove\", onMouseMove);\n\n    return () => {\n      window.removeEventListener(\"resize\", initContainer);\n      window.removeEventListener(\"mousemove\", onMouseMove);\n    };\n  }, []);\n\n  return (\n    <div ref={containerRef} className=\"relative\">\n      {/* Render your child elements or boxes here */}\n      {children}\n    </div>\n  );\n};\n\nexport default Highlighter;\n","size_bytes":1436},"src/components/Home/FeaturesList/index.tsx":{"content":"import Image from \"next/image\";\nimport Link from \"next/link\";\nimport Highlighter from \"./HighLighter\";\n\nconst FeaturesList = () => {\n  return (\n    <section className=\"pt-12.5\">\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <div className=\"grid gap-7.5 sm:grid-cols-12\">\n          {/* <!-- features item --> */}\n          <div className=\"sm:col-span-12\">\n            <Highlighter>\n              <div className=\"features-box-border relative rounded-3xl\">\n                <div className=\"box-hover relative overflow-hidden rounded-3xl p-10 xl:p-15\">\n                  <div className=\"relative z-20 flex items-center justify-between\">\n                    <div className=\"w-full max-w-[477px]\">\n                      <span className=\"hero-subtitle-gradient relative mb-4 inline-flex items-center gap-2 rounded-full px-4.5 py-2 text-sm font-medium\">\n                        <Image\n                          src=\"/images/hero/icon-title.svg\"\n                          alt=\"icon\"\n                          width={16}\n                          height={16}\n                        />\n\n                        <span className=\"hero-subtitle-text\">\n                          Kickstart your AI Startup\n                        </span>\n                      </span>\n                      <h3 className=\"mb-4.5 text-heading-4 font-bold text-white\">\n                        Seamless OpenAI Integration\n                      </h3>\n                      <p className=\"mb-10 font-medium\">\n                        Build SaaS AI applications using OpenAI and Next.js,\n                        this kit comes with pre-configured and pre-built\n                        examples, making it easier to quickly kickstart your AI\n                        startup.\n                      </p>\n                      <Link\n                        href=\"/#\"\n                        className=\"features-button-gradient relative inline-flex items-center gap-1.5 rounded-full px-6 py-3 text-sm text-white duration-300 ease-in hover:shadow-button\"\n                      >\n                        Learn more\n                        <svg\n                          width=\"14\"\n                          height=\"12\"\n                          viewBox=\"0 0 14 12\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            d=\"M13.3992 5.60002L8.22422 0.350024C7.99922 0.125024 7.64922 0.125024 7.42422 0.350024C7.19922 0.575024 7.19922 0.925025 7.42422 1.15002L11.6242 5.42503H0.999219C0.699219 5.42503 0.449219 5.67502 0.449219 5.97502C0.449219 6.27502 0.699219 6.55003 0.999219 6.55003H11.6742L7.42422 10.875C7.19922 11.1 7.19922 11.45 7.42422 11.675C7.52422 11.775 7.67422 11.825 7.82422 11.825C7.97422 11.825 8.12422 11.775 8.22422 11.65L13.3992 6.40002C13.6242 6.17502 13.6242 5.82502 13.3992 5.60002Z\"\n                            fill=\"white\"\n                          />\n                        </svg>\n                      </Link>\n                    </div>\n\n                    <div className=\"relative hidden aspect-square w-full max-w-[428px] sm:block\">\n                      <Image\n                        src=\"/images/features/big-icon.svg\"\n                        alt=\"icon\"\n                        fill\n                      />\n                    </div>\n                  </div>\n\n                  {/* <!-- bg shapes --> */}\n                  <div className=\"pointer-events-none absolute inset-0 -z-10 -mx-28 overflow-hidden\">\n                    <span className=\"absolute bottom-0 right-0\">\n                      <Image\n                        src=\"/images/features/shape-01.png\"\n                        alt=\"shape\"\n                        width={282}\n                        height={226}\n                      />\n                    </span>\n                    <span className=\"absolute left-0 top-0 aspect-1170/192 w-full\">\n                      <Image\n                        src=\"/images/features/shape-02.svg\"\n                        alt=\"shape\"\n                        fill\n                      />\n                    </span>\n                    <span className=\"absolute bottom-0 left-1/2 h-full w-full -translate-x-1/2\">\n                      <Image\n                        src=\"/images/blur/blur-03.svg\"\n                        alt=\"blur-sm\"\n                        fill\n                        className=\"max-w-none\"\n                      />\n                    </span>\n                    <span className=\"absolute bottom-0 left-1/2 h-full w-full -translate-x-1/2\">\n                      <Image\n                        src=\"/images/blur/blur-04.svg\"\n                        alt=\"blur-sm\"\n                        fill\n                        className=\"max-w-none\"\n                      />\n                    </span>\n                    <span className=\"absolute bottom-0 left-1/2 aspect-530/270 w-full max-w-[530px] -translate-x-1/2\">\n                      <Image\n                        src=\"/images/blur/blur-05.svg\"\n                        alt=\"blur-sm\"\n                        fill\n                        className=\"max-w-none\"\n                      />\n                    </span>\n                    <span className=\"absolute right-0 top-0 aspect-580/430 w-full max-w-[580px]\">\n                      <Image\n                        src=\"/images/features/shape-03.svg\"\n                        alt=\"shape\"\n                        fill\n                        className=\"max-w-none\"\n                      />\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </Highlighter>\n          </div>\n\n          {/* <!-- features item --> */}\n          <div className=\"sm:col-span-7\">\n            <Highlighter>\n              <div className=\"features-box-border relative rounded-3xl\">\n                <div className=\"box-hover box-hover-small relative overflow-hidden rounded-3xl px-11 pb-14 pt-12.5\">\n                  <div className=\"relative z-20\">\n                    <span className=\"icon-border relative mx-auto mb-13.5 inline-flex h-20 w-full max-w-[80px] items-center justify-center rounded-full\">\n                      <Image\n                        src=\"/images/features/icon-05.svg\"\n                        alt=\"icon\"\n                        width={32}\n                        height={32}\n                      />\n                    </span>\n\n                    <h3 className=\"mb-4.5 text-heading-6 font-semibold text-white\">\n                      All Essential SaaS Pages\n                    </h3>\n                    <p className=\"font-medium\">\n                      Build SaaS AI applications using OpenAI and Next.js, this\n                      kit comes with pre-configured and pre-built examples,\n                      making it easier to quickly kickstart.\n                    </p>\n                  </div>\n\n                  {/* <!-- bg shapes --> */}\n                  <div className=\"pointer-events-none absolute inset-0 -z-10 overflow-hidden\">\n                    <span className=\"absolute bottom-0 left-0 h-full w-full bg-[url(/images/blur/blur-06.svg)] bg-cover bg-center bg-no-repeat\"></span>\n\n                    <span className=\"absolute right-0 top-0 h-full w-full bg-[url(/images/blur/blur-07.svg)] bg-cover bg-center bg-no-repeat\"></span>\n\n                    <span className=\"absolute right-[16%] top-[16%]\">\n                      <Image\n                        src=\"/images/features/shape-04.svg\"\n                        alt=\"shape\"\n                        width={250}\n                        height={135}\n                      />\n                    </span>\n                    <span className=\"absolute bottom-0 left-0 aspect-521/335 w-full max-w-[521px]\">\n                      <Image\n                        src=\"/images/blur/blur-08.svg\"\n                        alt=\"blur-sm\"\n                        fill\n                        className=\"max-w-none\"\n                      />\n                    </span>\n                    <span className=\"absolute bottom-0 left-0 aspect-287/256 w-full max-w-[287px]\">\n                      <Image\n                        src=\"/images/blur/blur-09.svg\"\n                        alt=\"blur-sm\"\n                        fill\n                        className=\"max-w-none\"\n                      />\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </Highlighter>\n          </div>\n\n          {/* <!-- features item --> */}\n          <div className=\"sm:col-span-5\">\n            <Highlighter>\n              <div className=\"features-box-border relative rounded-3xl\">\n                <div className=\"box-hover box-hover-small relative overflow-hidden rounded-3xl px-11 pb-14 pt-12.5\">\n                  <div className=\"relative z-20\">\n                    <span className=\"icon-border relative mx-auto mb-13.5 inline-flex h-20 w-full max-w-[80px] items-center justify-center rounded-full\">\n                      <Image\n                        src=\"/images/features/icon-07.svg\"\n                        alt=\"icon\"\n                        width={32}\n                        height={32}\n                      />\n                    </span>\n\n                    <h3 className=\"mb-4.5 text-heading-6 font-semibold text-white\">\n                      Highly Customizable\n                    </h3>\n                    <p className=\"font-medium\">\n                      Build SaaS AI applications using OpenAI and Next.js,\n                      quickly kickstart your AI startup.\n                    </p>\n                  </div>\n\n                  {/* <!-- bg shapes --> */}\n                  <div className=\"pointer-events-none absolute inset-0 -z-10 overflow-hidden\">\n                    <span className=\"absolute right-[14%] top-[17%]\">\n                      <Image\n                        src=\"/images/features/shape-05.svg\"\n                        alt=\"shape\"\n                        width={178}\n                        height={102}\n                      />\n                    </span>\n\n                    <span className=\"absolute bottom-0 left-0 h-full w-full bg-[url(/images/blur/blur-10.svg)] bg-cover bg-center bg-no-repeat\"></span>\n\n                    <span className=\"absolute right-0 top-0 aspect-394/336 w-full max-w-[394px]\">\n                      <Image\n                        src=\"/images/blur/blur-11.svg\"\n                        alt=\"blur-sm\"\n                        fill\n                        className=\"max-w-none\"\n                      />\n                    </span>\n                    <span className=\"absolute right-0 top-0\">\n                      <Image\n                        src=\"/images/blur/blur-12.svg\"\n                        alt=\"blur-sm\"\n                        className=\"max-w-none\"\n                        width={160}\n                        height={303}\n                      />\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </Highlighter>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default FeaturesList;\n","size_bytes":11145},"src/components/Home/Hero/index.tsx":{"content":"import Image from \"next/image\";\nimport Link from \"next/link\";\n\nconst Hero = () => {\n  return (\n    <section\n      id='home'\n      className='relative z-10 overflow-hidden pt-35 md:pt-40 xl:pt-45'\n    >\n      {/* <!-- Hero Bg Shapes --> */}\n      <div className='mx-auto max-w-7xl'>\n        <div className='pointer-events-none absolute inset-0 -z-10 -mx-28 overflow-hidden'>\n          <div className='-u-z-10 hero-circle-gradient absolute -top-[128%] left-1/2 -z-1 h-[1282px] w-full max-w-[1282px] -translate-x-1/2 rounded-full sm:-top-[107%] xl:-top-[73%]'></div>\n          <div className='-u-z-10 hero-circle-gradient absolute -top-[112%] left-1/2 -z-1 h-[1046px] w-full max-w-[1046px] -translate-x-1/2 rounded-full sm:-top-[93%] xl:-top-[62%]'></div>\n          <div className='-u-z-10 absolute top-0 left-1/2 aspect-1204/394 w-full max-w-[1204px] -translate-x-1/2'>\n            <Image\n              src='/images/blur/blur-02.svg'\n              alt='blur-sm'\n              fill\n              className='max-w-none'\n            />\n          </div>\n          <div className='-u-z-10 absolute top-0 left-1/2 h-full w-full -translate-x-1/2 bg-[url(/images/blur/blur-01.svg)] bg-cover bg-top bg-no-repeat'></div>\n        </div>\n      </div>\n\n      {/* <!-- Hero Content --> */}\n      <div className='relative z-1 mx-auto max-w-[900px] px-4 sm:px-8 xl:px-0'>\n        <div className='text-center'>\n          <span className='hero-subtitle-gradient hover:hero-subtitle-hover relative mb-5 inline-flex items-center gap-2 rounded-full px-4.5 py-2 text-sm font-medium'>\n            <Image\n              src='/images/hero/icon-title.svg'\n              alt='icon'\n              width={16}\n              height={16}\n            />\n\n            <span className='hero-subtitle-text'>\n              Professional Thermal Inspection Services\n            </span>\n          </span>\n          <h1 className='xl:text-heading-1 mb-6 text-3xl font-extrabold text-white sm:text-5xl'>\n            Save Thousands with Early Problem Detection Using Advanced Drone Technology\n          </h1>\n\n          <p className='mx-auto mb-9 max-w-[500px] font-medium md:text-lg'>\n            ComplianceDrone provides AI-powered thermal inspection services that detect electrical issues, equipment failures, and maintenance needs before they become costly problems. Our certified pilots use cutting-edge thermal imaging to save you money and prevent catastrophic failures.\n          </p>\n\n          <div className='flex flex-col gap-4 sm:flex-row sm:justify-center sm:gap-6'>\n            <Link\n              href='/contact'\n              className='hero-button-gradient inline-flex rounded-lg px-7 py-3 font-medium text-white duration-300 ease-in hover:opacity-80'\n            >\n              Request Quote\n            </Link>\n            <Link\n              href='/pilots'\n              className='inline-flex rounded-lg border border-white/20 bg-white/5 px-7 py-3 font-medium text-white backdrop-blur-sm duration-300 ease-in hover:bg-white/10'\n            >\n              Apply to Fly\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div\n        className='relative mx-auto mt-17 aspect-1170/411 w-full max-w-[1170px]'\n        data-wow-delay='0.1s'\n      >\n        <Image\n          className='mx-auto'\n          src='/images/hero/hero.svg'\n          alt='hero'\n          fill\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default Hero;\n","size_bytes":3430},"src/components/Home/Reviews/SingleReview.tsx":{"content":"import { Review } from \"@/types/review\";\nimport Image from \"next/image\";\n\nconst SingleReview = ({ review }: { review: Review }) => {\n  return (\n    <div className=\"user-border-gradient relative overflow-hidden rounded-[19px] px-8 py-9\">\n      <div className=\"flex items-center gap-4.5\">\n        <div className=\"relative h-12 w-full max-w-[48px] overflow-hidden rounded-full\">\n          <Image\n            src={review.userImage}\n            alt={review.userName}\n            width={48}\n            height={48}\n          />\n        </div>\n        <div>\n          <h3 className=\"text-sm font-medium text-white\">{review.userName}</h3>\n          <p className=\"text-sm font-medium lowercase\">\n            {review.userDesignation}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"user-divider relative my-6 h-[1px] w-full\"></div>\n\n      <p>{review.description}</p>\n\n      {/* <!-- bg shapes --> */}\n      <div className=\"pointer-events-none absolute inset-0 -z-10 overflow-hidden\">\n        <span className=\"absolute bottom-0 right-0 -z-1 h-full w-full bg-[url(/images/blur/blur-18.svg)] bg-cover bg-center bg-no-repeat\"></span>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleReview;\n","size_bytes":1200},"src/components/Home/Reviews/index.tsx":{"content":"\"use client\";\n\nimport SectionTitle from \"@/components/Common/SectionTitle\";\nimport { useEffect, useState } from \"react\";\nimport SingleReview from \"./SingleReview\";\nimport reviewsData from \"./reviewsData\";\n\nconst Reviews = () => {\n  const [showContent, setShowContent] = useState(false);\n  const [scrollContent, setScrollContent] = useState(false);\n\n  const handleScrollContent = () => {\n    if (window.scrollY >= 500) {\n      setScrollContent(true);\n    } else {\n      setScrollContent(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollContent);\n  });\n\n  return (\n    <>\n      <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n        <SectionTitle\n          subTitle=\"Wall of love\"\n          title=\"What Our User Says\"\n          paragraph=\"Build SaaS AI applications using OpenAI and Next.js, this kit comes with pre-configured and pre-built examples, making it easier to quickly kickstart your AI startup.\"\n        />\n\n        <div\n          className={`grid grid-cols-1 gap-7.5 sm:grid-cols-2 lg:grid-cols-3 ${\n            !showContent ? \"max-h-[855px] overflow-hidden\" : \"\"\n          }`}\n        >\n          <div className=\"space-y-7.5\">\n            {reviewsData.slice(0, 9).map((review) => (\n              <SingleReview key={review.id} review={review} />\n            ))}\n          </div>\n\n          <div className=\"hidden space-y-7.5 sm:block\">\n            {reviewsData.slice(9, 18).map((review) => (\n              <SingleReview key={review.id} review={review} />\n            ))}\n          </div>\n\n          <div className=\"hidden space-y-7.5 lg:block\">\n            {reviewsData.slice(18, 27).map((review) => (\n              <SingleReview key={review.id} review={review} />\n            ))}\n          </div>\n        </div>\n\n        <div\n          className={`pointer-events-none absolute inset-x-0 bottom-20 flex justify-center bg-linear-to-t from-dark pb-8 pt-32 ${\n            scrollContent ? \"opacity-100!\" : \"\"\n          } ${\n            showContent\n              ? \"-u-mt-52 sticky opacity-0 transition-opacity duration-300\"\n              : \"\"\n          }`}\n        >\n          <button\n            type=\"button\"\n            onClick={() => setShowContent(!showContent)}\n            className={`button-border-gradient hover:button-gradient-hover pointer-events-auto relative top-20 mx-auto -mt-7.5 flex rounded-lg px-4.5 py-3 text-sm font-semibold text-white duration-300 ease-in ${\n              showContent ? \"translate-y-4 transition-transform\" : \"\"\n            } ${scrollContent ? \"translate-y-0\" : \"\"}`}\n          >\n            {showContent ? \"Okay, I get the point\" : \"Show more...\"}\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Reviews;\n","size_bytes":2738},"src/components/Home/Reviews/reviewsData.ts":{"content":"import { Review } from '@/types/review';\n\nconst reviewsData: Review[] = [\n  {\n    id: 100,\n    userName: 'Marc Herrera',\n    userDesignation: '@Shane',\n    userImage: '/images/user/user-01.png',\n    description:\n      'ruler characteristic present neighborhood sister available caught then over pound threw page anywhere secret mark whenever went disease dollar hearing partly plenty somewhere aware',\n  },\n  {\n    id: 19,\n    userName: 'Alfred Montgomery',\n    userDesignation: '@Olivia',\n    userImage: '/images/user/user-07.png',\n    description:\n      'local month pale negative last real card north plane thumb seldom gently lie shot floor animal introduced straw fellow applied ago anyway closer bag',\n  },\n  {\n    id: 45,\n    userName: 'Marvin Williamson',\n    userDesignation: '@Jeanette',\n    userImage: '/images/user/user-06.png',\n    description:\n      'state poet carried toward weak corner answer till give play seven bridge finest morning wool or although who twenty elephant slide swam being mix',\n  },\n  {\n    id: 38,\n    userName: 'David Hudson',\n    userDesignation: '@Hilda',\n    userImage: '/images/user/user-05.png',\n    description:\n      'quiet type situation between cattle oxygen could tank class chose social thumb while indicate receive into equally right engineer morning thee promised quite hurry',\n  },\n  {\n    id: 8,\n    userName: 'Hannah Ruiz',\n    userDesignation: '@Mitchell',\n    userImage: '/images/user/user-05.png',\n    description:\n      'freedom public door tall most getting hungry order green only worry parallel obtain yard honor there pitch broke fifth globe development musical push shirt',\n  },\n  {\n    id: 21,\n    userName: 'Jay Alexander',\n    userDesignation: '@Chris',\n    userImage: '/images/user/user-06.png',\n    description:\n      'success remain while fruit shut wait plate instrument experiment shaking layers avoid heat directly dangerous example must family research scared baby did aid least',\n  },\n  {\n    id: 63,\n    userName: 'Fred Graham',\n    userDesignation: '@Allie',\n    userImage: '/images/user/user-07.png',\n    description:\n      'reader halfway choose nails trail kitchen conversation eventually electric courage noun roar construction chose outer oxygen there yard spent pot sport exercise young recall',\n  },\n  {\n    id: 28,\n    userName: 'Chris Cunningham',\n    userDesignation: '@Blake',\n    userImage: '/images/user/user-01.png',\n    description:\n      'crew this composed believed memory stopped close important had recent rocket layers nose tube valley built busy apartment imagine born stiff acres positive press',\n  },\n  {\n    id: 73,\n    userName: 'Polly Webster',\n    userDesignation: '@Adelaide',\n    userImage: '/images/user/user-09.png',\n    description:\n      'seven morning title himself been ice may plural complete not badly anyway principal rain wood have accept busy down like widely one shallow tent',\n  },\n  {\n    id: 14,\n    userName: 'Gerald Bowers',\n    userDesignation: '@Corey',\n    userImage: '/images/user/user-06.png',\n    description:\n      'couple window storm probably away hunt canal dirt such pencil science establish palace are myself entire feel pleasant milk island nearer ring-3 merely imagine',\n  },\n  {\n    id: 801,\n    userName: 'Dylan Cole',\n    userDesignation: '@Lina',\n    userImage: '/images/user/user-07.png',\n    description:\n      'yet during worried measure stiff sport against baseball melted remove team whispered writing cross back lamp smaller not bank shout scale bring naturally though',\n  },\n\n  {\n    id: 3,\n    userName: 'Tyler Brooks',\n    userDesignation: '@Daisy',\n    userImage: '/images/user/user-01.png',\n    description:\n      'may tight moment figure ready whose married branch tip feathers field station feet union pole night broke tell difficulty lunch complete gentle relationship again',\n  },\n  {\n    id: 74,\n    userName: 'Winifred Pratt',\n    userDesignation: '@Virginia',\n    userImage: '/images/user/user-05.png',\n    description:\n      'replied spider system standard daily practical party heat aboard aloud author instrument frozen mouth tower corner location alive friendly locate farm bad machinery lamp',\n  },\n  {\n    id: 25,\n    userName: 'Esther Webster',\n    userDesignation: '@Jorge',\n    userImage: '/images/user/user-09.png',\n    description:\n      'sort noon composed progress believed threw mother lift mental many silk equally scientist small most correct occasionally title outer blew old stood life around',\n  },\n  {\n    id: 98,\n    userName: 'Maude Haynes',\n    userDesignation: '@Fannie',\n    userImage: '/images/user/user-05.png',\n    description:\n      'add structure neighbor fine never acres regular definition earlier once such require yet break leather do sheet hidden easily report met sat climb underline',\n  },\n  {\n    id: 46,\n    userName: 'Lela Moran',\n    userDesignation: '@Connor',\n    userImage: '/images/user/user-05.png',\n    description:\n      'shells house team shop inch gold mile jungle friendly believed driver court remarkable feature is ability diagram which partly lower already bee push prize',\n  },\n  {\n    id: 18,\n    userName: 'Bertha McGuire',\n    userDesignation: '@Dollie',\n    userImage: '/images/user/user-01.png',\n    description:\n      'coat west similar series copy future include saw bigger bare program paper return musical mad machinery chose art claws stood instant mistake actual heart',\n  },\n  {\n    id: 81,\n    userName: 'Celia Day',\n    userDesignation: '@Edward',\n    userImage: '/images/user/user-09.png',\n    description:\n      'structure spent mean touch since flew island thought burn book question mice silence spell everybody night ought chosen give fair felt together brief ship',\n  },\n  {\n    id: 5,\n    userName: 'Vera Pearson',\n    userDesignation: '@Roxie',\n    userImage: '/images/user/user-01.png',\n    description:\n      'beauty eleven chosen business butter previous four crowd slipped tower cast swam afternoon club salt window explain shade free went complex ought related let',\n  },\n  {\n    id: 8,\n    userName: 'Allie Hodges',\n    userDesignation: '@Ricardo',\n    userImage: '/images/user/user-05.png',\n    description:\n      'weight duck mountain fill upon pie bar sense grow previous unknown hardly group stop writing biggest until lack cotton influence build barn lunch environment',\n  },\n  {\n    id: 80,\n    userName: 'Lula Gross',\n    userDesignation: '@Lizzie',\n    userImage: '/images/user/user-09.png',\n    description:\n      'statement bread later discussion stand other exist plural post action by partly anybody additional die without if hollow frame below silk cell either above',\n  },\n  {\n    id: 44,\n    userName: 'Mike Romero',\n    userDesignation: '@Leonard',\n    userImage: '/images/user/user-05.png',\n    description:\n      'softly distant ear gentle press sale on fear nose although spoken loud bee firm development settlers blood sad official obtain medicine science rain pour',\n  },\n  {\n    id: 74,\n    userName: 'Aiden Alexander',\n    userDesignation: '@Adelaide',\n    userImage: '/images/user/user-05.png',\n    description:\n      'early correctly memory entirely enjoy disease shoe whether minerals front constantly offer hung comfortable fix exciting phrase represent rocket plate track ago north center',\n  },\n  {\n    id: 11,\n    userName: 'Agnes Adams',\n    userDesignation: '@Lucile',\n    userImage: '/images/user/user-06.png',\n    description:\n      'shaking count former arm directly definition mud possible ranch book muscle potatoes fun properly telephone metal name only serious seldom bound hay porch palace',\n  },\n  {\n    id: 7,\n    userName: 'Gertrude Salazar',\n    userDesignation: '@Jeffery',\n    userImage: '/images/user/user-07.png',\n    description:\n      'studied sitting wave what keep glass measure evening smooth pattern story meet green poem wheel wheat shoe gift shelf eat contain swimming sad capital',\n  },\n  {\n    id: 101,\n    userName: 'Steven McCarthy',\n    userDesignation: '@Shawn',\n    userImage: '/images/user/user-01.png',\n    description:\n      'partly which life teacher loose dangerous soon world journey instance immediately judge start rubbed library satisfied control tool what fur although rush room young',\n  },\n  {\n    id: 82,\n    userName: 'Max Larson',\n    userDesignation: '@Lillian',\n    userImage: '/images/user/user-09.png',\n    description:\n      'wild laid whether younger tin mine are shoe softly apart gate nearby gas fell his cell jump announced national symbol pitch pond mysterious herself',\n  },\n];\n\nexport default reviewsData;\n","size_bytes":8536},"src/app/(site)/ai-examples/article-title-generator/page.tsx":{"content":"\"use client\";\nimport Options from \"@/components/AiTools/Options\";\nimport PreviewGeneratedText from \"@/components/AiTools/PreviewGeneratedText\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport z from \"zod\";\nimport { integrations, messages } from \"../../../../../integrations.config\";\n\nconst ArticleTitleGeneratorSchema = z.object({\n  numberOfWord: z.string(),\n  articleTopic: z.string(),\n});\n\nconst optionData = [1, 2, 3, 4, 5];\n\nconst ArticleTitleGeneratorPage = () => {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const [data, setData] = useState({\n    numberOfWord: \"\",\n    articleTopic: \"\",\n  });\n\n  const handleChange = (e: any) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    setGeneratedContent(\"Loading....\");\n\n    if (!integrations?.isOpenAIEnabled) {\n      toast.error(messages.opanAi);\n      return;\n    }\n\n    const validation = ArticleTitleGeneratorSchema.safeParse(data);\n    if (!validation.success) {\n      toast.error(validation.error.errors[0].message);\n      return;\n    }\n\n    // the prompt\n    const prompt = [\n      {\n        role: \"system\",\n        content:\n          \"You will be provided with the article topic and number of word needed, and your task is to generate multiple article titles.\",\n      },\n      {\n        role: \"user\",\n        content: `Number of words: ${data.numberOfWord} \\n Article topic: ${data.articleTopic}`,\n      },\n    ];\n\n    //for the demo\n    const apiKey = localStorage.getItem(\"apiKey\");\n\n    try {\n      const response = await axios.post(\n        \"/api/generate-content\",\n        { prompt, apiKey },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      const cleanedResponse = response.data.replace(/\"/g, \"\");\n      setGeneratedContent(cleanedResponse);\n    } catch (error: any) {\n      setGeneratedContent(\"Please Add the API Key!\");\n      console.error(\"Error:\", error?.message);\n    }\n\n    setData({\n      numberOfWord: \"\",\n      articleTopic: \"\",\n    });\n  };\n\n  return (\n    <>\n      <title>\n        Article Title Generator | AI Tool - Next.js Template for AI Tools\n      </title>\n      <meta name=\"description\" content=\"This is AI Examples page for AI Tool\" />\n      <Breadcrumb pageTitle=\"Article Title Generator\" />\n\n      <section className=\"pb-17.5 lg:pb-22.5 xl:pb-27.5\">\n        <div className=\"mx-auto grid max-w-[1170px] gap-8 px-4 sm:px-8 lg:grid-cols-12 xl:px-0\">\n          <div className=\"gradient-box rounded-lg bg-dark-8 p-8 lg:col-span-4\">\n            <h2 className=\"pb-2 text-2xl font-bold text-white\">Title Topic</h2>\n            <p className=\"pb-6\">What your title will be about?</p>\n            <form onSubmit={handleSubmit}>\n              <div className=\"flex flex-col\">\n                <label htmlFor=\"articleTopic\" className=\"pb-4\">\n                  Topic\n                </label>\n                <input\n                  onChange={handleChange}\n                  value={data.articleTopic}\n                  name=\"articleTopic\"\n                  type=\"text\"\n                  className=\"rounded-lg border border-white/[0.12] bg-dark-7 px-5 py-3 text-white outline-hidden focus:border-purple\"\n                  placeholder=\"Type article topic here\"\n                  required\n                />\n              </div>\n\n              <Options\n                values={optionData}\n                title={\"Select the Number of Words\"}\n                name={\"numberOfWord\"}\n                handleChange={handleChange}\n                selected={data.numberOfWord}\n              />\n\n              <button className=\"hero-button-gradient mt-5 w-full rounded-lg px-7 py-3 text-center font-medium text-white duration-300 ease-in hover:opacity-80 \">\n                Generate\n              </button>\n            </form>\n          </div>\n          <PreviewGeneratedText\n            generatedContent={generatedContent}\n            height={262}\n          />{\" \"}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default ArticleTitleGeneratorPage;\n","size_bytes":4223},"src/app/(site)/ai-examples/business-name-generator/page.tsx":{"content":"\"use client\";\nimport Options from \"@/components/AiTools/Options\";\nimport PreviewGeneratedText from \"@/components/AiTools/PreviewGeneratedText\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport z from \"zod\";\nimport { integrations, messages } from \"../../../../../integrations.config\";\nimport toast from \"react-hot-toast\";\n\nconst BusinessNameGeneratorSchema = z.object({\n  keyword: z.string(),\n  industry: z.string(),\n});\n\nconst optionData = [\n  \"Technology and Software\",\n  \"Finance and Banking\",\n  \"Healthcare and Pharmaceuticals\",\n  \"Retail and Consumer Goods\",\n  \"Entertainment and Media\",\n];\n\nconst BusinessNameGeneratorPage = () => {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const [data, setData] = useState({\n    keyword: \"\",\n    industry: \"\",\n  });\n\n  const handleChange = (e: any) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isOpenAIEnabled) {\n      toast.error(messages.opanAi);\n      return;\n    }\n\n    const validation = BusinessNameGeneratorSchema.safeParse(data);\n    if (!validation.success) {\n      toast.error(validation.error.errors[0].message);\n      return;\n    }\n\n    setGeneratedContent(\"Loading....\");\n\n    // the prompt\n    const prompt = [\n      {\n        role: \"system\",\n        content:\n          \"You will be provided with the business name and industry name, and your task is to generate product names \\n\",\n      },\n      {\n        role: \"user\",\n        content: `Business keyword: ${data.keyword} \\n Business industry: ${data.industry}`,\n      },\n    ];\n\n    //for the demo\n    const apiKey = localStorage.getItem(\"apiKey\");\n\n    try {\n      const response = await axios.post(\n        \"/api/generate-content\",\n        { prompt, apiKey },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      setGeneratedContent(response.data);\n    } catch (error: any) {\n      setGeneratedContent(\"Please Add the API Key!\");\n      console.error(\"Error:\", error?.message);\n    }\n\n    setData({\n      keyword: \"\",\n      industry: \"\",\n    });\n  };\n\n  return (\n    <>\n      <title>\n        Business Name Generator | AI Tool - Next.js Template for AI Tools\n      </title>\n      <meta name=\"description\" content=\"This is AI Examples page for AI Tool\" />\n      <Breadcrumb pageTitle=\"Business Name Generator\" />\n\n      <section className=\"pb-17.5 lg:pb-22.5 xl:pb-27.5\">\n        <div className=\"mx-auto grid max-w-[1170px] gap-8 px-4 sm:px-8 lg:grid-cols-12 xl:px-0\">\n          <div className=\"gradient-box rounded-lg bg-dark-8 p-8 lg:col-span-4\">\n            <h2 className=\"pb-2 text-2xl font-bold text-white\">\n              Business Topic\n            </h2>\n            <p className=\"pb-6\">What your business will be about?</p>\n            <form onSubmit={handleSubmit}>\n              <div className=\"flex flex-col\">\n                <label htmlFor=\"keyword\" className=\"pb-4\">\n                  Keyword\n                </label>\n                <input\n                  onChange={handleChange}\n                  value={data.keyword}\n                  name=\"keyword\"\n                  id=\"keyword\"\n                  type=\"text\"\n                  className=\"rounded-lg border border-white/[0.12] bg-dark-7 px-5 py-3 text-white outline-hidden focus:border-purple\"\n                  placeholder=\"Type your business keyword\"\n                  required\n                />\n              </div>\n\n              <Options\n                title={\"Select your Business industry\"}\n                name={\"industry\"}\n                values={optionData}\n                handleChange={handleChange}\n                selected={data.industry}\n              />\n\n              <button\n                type=\"submit\"\n                className=\"hero-button-gradient mt-5 w-full rounded-lg px-7 py-3 text-center font-medium text-white duration-300 ease-in hover:opacity-80 \"\n              >\n                Generate\n              </button>\n            </form>\n          </div>\n\n          <PreviewGeneratedText\n            generatedContent={generatedContent}\n            height={262}\n          />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default BusinessNameGeneratorPage;\n","size_bytes":4357},"src/app/(site)/ai-examples/content-writing-tool/page.tsx":{"content":"\"use client\";\nimport Options from \"@/components/AiTools/Options\";\nimport PreviewGeneratedText from \"@/components/AiTools/PreviewGeneratedText\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport z from \"zod\";\nimport { integrations, messages } from \"../../../../../integrations.config\";\n\nconst ContentGeneratorSchema = z.object({\n  contentTopic: z.string(),\n  numberOfParagraphs: z.string(),\n  contentType: z.string(),\n});\n\nconst paragraphsCount = [1, 2, 3, 4, 5];\nconst contentTypes = [\"Article\", \"Listicles\", \"How to guides\", \"Tweet\"];\n\nconst ContentGeneratorPage = () => {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const [data, setData] = useState({\n    contentTopic: \"\",\n    numberOfParagraphs: \"\",\n    contentType: \"\",\n  });\n\n  const handleChange = (e: any) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isOpenAIEnabled) {\n      toast.error(messages.opanAi);\n      return;\n    }\n\n    const validation = ContentGeneratorSchema.safeParse(data);\n    if (!validation.success) {\n      toast.error(validation.error.errors[0].message);\n      return;\n    }\n\n    setGeneratedContent(\"Loading....\");\n\n    // the prompt\n    const prompt = [\n      {\n        role: \"system\",\n        content:\n          \"You will be provided with the content topic and the number of paragraphs and the content type. Your task is to generate the content with the exact paragraphs number \\n\",\n      },\n      {\n        role: \"user\",\n        content: `Content Topic: ${data.contentTopic} \\nNumber of Paragraphs: ${data.numberOfParagraphs} \\nContent-Type: ${data.contentType}`,\n      },\n      {\n        role: \"user\",\n        content:\n          \"Remove all the paragraph title and add line break after each paragraph\",\n      },\n    ];\n\n    //for the demo\n    const apiKey = localStorage.getItem(\"apiKey\");\n\n    try {\n      const response = await axios.post(\n        \"/api/generate-content\",\n        { apiKey, prompt },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\", // Adjust headers as needed\n          },\n        },\n      );\n      setGeneratedContent(response.data);\n      console.log(response.data);\n    } catch (error: any) {\n      setGeneratedContent(\"Please Add the API Key!\");\n      console.error(\"Error:\", error?.message);\n    }\n\n    setData({\n      contentTopic: \"\",\n      numberOfParagraphs: \"\",\n      contentType: \"\",\n    });\n  };\n\n  return (\n    <>\n      <title>Content Generator| AI Tool - Next.js Template for AI Tools</title>\n      <meta name=\"description\" content=\"This is AI Examples page for AI Tool\" />\n      <Breadcrumb pageTitle=\"Content Generator\" />\n\n      <section className=\"pb-17.5 lg:pb-22.5 xl:pb-27.5\">\n        {/* <div className=\"gradient-box\">\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent\n            bibendum, lorem vel tincidunt imperdiet, nibh elit laoreet felis, a\n            bibendum nisl tortor non orci. Donec pretium fermentum felis, quis\n            aliquet est rutrum ut. Integer quis massa ut lacus viverra pharetra\n            in eu lacus. Aliquam tempus odio adipiscing diam pellentesque\n            rhoncus. Curabitur a bibendum est.{\" \"}\n          </p>\n        </div> */}\n\n        <div className=\"mx-auto grid max-w-[1170px] gap-8 px-4 sm:px-8 lg:grid-cols-12 xl:px-0\">\n          <div className=\"gradient-box rounded-lg bg-dark-8 p-8 lg:col-span-4\">\n            <h2 className=\"pb-2 text-2xl font-bold text-white\">\n              Content Topic\n            </h2>\n            <p className=\"pb-6\">What your content will be about?</p>\n            <form onSubmit={handleSubmit}>\n              <textarea\n                value={data.contentTopic}\n                name=\"contentTopic\"\n                onChange={handleChange}\n                className=\"min-h-[160px] w-full rounded-lg border border-white/[0.12] bg-dark-7 p-5 text-white outline-hidden focus:border-purple\"\n                placeholder=\"Type your topic\"\n                required\n              />\n\n              <Options\n                values={paragraphsCount}\n                title={\"Number of Paragraphs\"}\n                name={\"numberOfParagraphs\"}\n                handleChange={handleChange}\n                selected={data.numberOfParagraphs}\n              />\n\n              <Options\n                values={contentTypes}\n                title={\"Select Type\"}\n                name={\"contentType\"}\n                handleChange={handleChange}\n                selected={data.contentType}\n              />\n\n              <button\n                type=\"submit\"\n                className=\"hero-button-gradient mt-5 w-full rounded-lg px-7 py-3 text-center font-medium text-white duration-300 ease-in hover:opacity-80 \"\n              >\n                Generate\n              </button>\n            </form>\n          </div>\n\n          <PreviewGeneratedText\n            generatedContent={generatedContent}\n            height={442}\n          />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default ContentGeneratorPage;\n","size_bytes":5228},"src/app/(site)/ai-examples/interview-question-generator/page.tsx":{"content":"\"use client\";\nimport PreviewGeneratedText from \"@/components/AiTools/PreviewGeneratedText\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport z from \"zod\";\nimport { integrations, messages } from \"../../../../../integrations.config\";\n\nconst dataSchema = z.object({\n  description: z.string(),\n});\n\nconst InterviewQuestionGeneratorPage = () => {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const [data, setData] = useState({\n    description: \"\",\n  });\n\n  const handleChange = (e: any) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isOpenAIEnabled) {\n      toast.error(messages.opanAi);\n      return;\n    }\n\n    const validation = dataSchema.safeParse(data);\n    if (!validation.success) {\n      toast.error(validation.error.errors[0].message);\n      return;\n    }\n\n    setGeneratedContent(\"Loading....\");\n\n    // the prompt\n    const prompt = [\n      {\n        role: \"user\",\n        content: `Generate 8 interview question for ${data.description}`,\n      },\n    ];\n\n    //for the demo\n    const apiKey = localStorage.getItem(\"apiKey\");\n\n    try {\n      const response = await axios.post(\n        \"/api/generate-content\",\n        { prompt, apiKey },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      setGeneratedContent(response.data);\n    } catch (error: any) {\n      setGeneratedContent(\"Please Add the API Key!\");\n      console.error(\"Error:\", error.message);\n    }\n\n    setData({\n      description: \"\",\n    });\n  };\n\n  return (\n    <>\n      <title>\n        Interview Question Generator | AI Tool - Next.js Template for AI Tools\n      </title>\n      <meta name=\"description\" content=\"This is AI Examples page for AI Tool\" />\n      <Breadcrumb pageTitle=\"Interview Question Generator\" />\n\n      <section className=\"pb-17.5 lg:pb-22.5 xl:pb-27.5\">\n        <div className=\"mx-auto grid max-w-[1170px] gap-8 px-4 sm:px-8 lg:grid-cols-12 xl:px-0\">\n          <div className=\"gradient-box rounded-lg bg-dark-8 p-8 lg:col-span-4 \">\n            <h2 className=\"pb-2 text-2xl font-bold text-white\">\n              Question Topic\n            </h2>\n            <p className=\"pb-6\">What your Question will be about?</p>\n            <form onSubmit={handleSubmit}>\n              <div className=\"flex flex-col\">\n                <label htmlFor=\"description\" className=\"pb-4\">\n                  Description\n                </label>\n\n                <textarea\n                  onChange={handleChange}\n                  value={data.description}\n                  name=\"description\"\n                  className=\"min-h-[160px] rounded-lg border border-white/[0.12] bg-dark-7 px-5 py-3 text-white outline-hidden focus:border-purple\"\n                  placeholder=\"Interview description\"\n                  required\n                />\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"hero-button-gradient mt-5 w-full rounded-lg px-7 py-3 text-center font-medium text-white duration-300 ease-in hover:opacity-80 \"\n              >\n                Generate\n              </button>\n            </form>\n          </div>\n\n          <PreviewGeneratedText\n            generatedContent={generatedContent}\n            height={262}\n          />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default InterviewQuestionGeneratorPage;\n","size_bytes":3583},"src/app/(site)/ai-examples/product-name-generator/page.tsx":{"content":"\"use client\";\nimport PreviewGeneratedText from \"@/components/AiTools/PreviewGeneratedText\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport z from \"zod\";\nimport { integrations, messages } from \"../../../../../integrations.config\";\n\nconst dataSchema = z.object({\n  description: z.string(),\n  seedWords: z.string(),\n});\n\nconst ProductNameGeneratorPage = () => {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const [data, setData] = useState({\n    description: \"\",\n    seedWords: \"\",\n  });\n\n  const handleChange = (e: any) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isOpenAIEnabled) {\n      toast.error(messages.opanAi);\n      return;\n    }\n\n    const validation = dataSchema.safeParse(data);\n    if (!validation.success) {\n      toast.error(validation.error.errors[0].message);\n      return;\n    }\n\n    setGeneratedContent(\"Loading....\");\n\n    // the prompt\n    const prompt = [\n      {\n        role: \"system\",\n        content:\n          \"You will be provided with a product description and seed words, and your task is to generate product names. \\n\",\n      },\n      {\n        role: \"user\",\n        content: `Product description: ${data.description} \\n Business seed words: ${data.seedWords}`,\n      },\n    ];\n\n    //for the demo\n    const apiKey = localStorage.getItem(\"apiKey\");\n\n    try {\n      const response = await axios.post(\n        \"/api/generate-content\",\n        { prompt, apiKey },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      setGeneratedContent(response.data);\n    } catch (error: any) {\n      setGeneratedContent(\"Please Add the API Key!\");\n      console.error(\"Error:\", error?.message);\n    }\n\n    setData({\n      description: \"\",\n      seedWords: \"\",\n    });\n  };\n\n  return (\n    <>\n      <title>\n        Product Name Generator | AI Tool - Next.js Template for AI Tools\n      </title>\n      <meta name=\"description\" content=\"This is AI Examples page for AI Tool\" />\n      <Breadcrumb pageTitle=\"Product Name Generator\" />\n\n      <section className=\"pb-17.5 lg:pb-22.5 xl:pb-27.5\">\n        <div className=\"mx-auto grid max-w-[1170px] gap-8 px-4 sm:px-8 lg:grid-cols-12 xl:px-0\">\n          <div className=\"gradient-box rounded-lg bg-dark-8 p-8 lg:col-span-4\">\n            <h2 className=\"pb-2 text-2xl font-bold text-white\">\n              Product Topic\n            </h2>\n            <p className=\"pb-6\">What your product name will be?</p>\n            <form onSubmit={handleSubmit}>\n              <div className=\"flex flex-col\">\n                <label htmlFor=\"description\" className=\"pb-4\">\n                  Description\n                </label>\n                <input\n                  onChange={handleChange}\n                  value={data.description}\n                  name=\"description\"\n                  type=\"text\"\n                  className=\"rounded-lg border border-white/[0.12] bg-dark-7 px-5 py-3 text-white outline-hidden focus:border-purple\"\n                  placeholder=\"Type your business keyword\"\n                  required\n                />\n              </div>\n\n              <div className=\"flex flex-col pt-5\">\n                <label htmlFor=\"seedWords\" className=\"pb-4\">\n                  Seed Words\n                </label>\n                <input\n                  onChange={handleChange}\n                  value={data.seedWords}\n                  name=\"seedWords\"\n                  type=\"text\"\n                  className=\"rounded-lg border border-white/[0.12] bg-dark-7 py-3 pl-5 text-opacity-10 outline-hidden focus:border-purple\"\n                  placeholder=\"Type your Seed Words\"\n                />\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"hero-button-gradient mt-5 w-full rounded-lg px-7 py-3 text-center font-medium text-white duration-300 ease-in hover:opacity-80 \"\n              >\n                Generate\n              </button>\n            </form>\n          </div>\n\n          <PreviewGeneratedText\n            generatedContent={generatedContent}\n            height={262}\n          />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default ProductNameGeneratorPage;\n","size_bytes":4419},"src/app/(site)/ai-examples/spreadsheet-generator/page.tsx":{"content":"\"use client\";\nimport PreviewGeneratedText from \"@/components/AiTools/PreviewGeneratedText\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport z from \"zod\";\nimport { integrations, messages } from \"../../../../../integrations.config\";\n\nconst dataSchema = z.object({\n  description: z.string(),\n});\n\nconst SpreadsheetGeneratorPage = () => {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const [data, setData] = useState({\n    description: \"\",\n  });\n\n  const handleChange = (e: any) => {\n    setData({\n      ...data,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n\n    if (!integrations?.isOpenAIEnabled) {\n      toast.error(messages.opanAi);\n      return;\n    }\n\n    const validation = dataSchema.safeParse(data);\n    if (!validation.success) {\n      toast.error(validation.error.errors[0].message);\n      return;\n    }\n\n    setGeneratedContent(\"Loading....\");\n\n    // the prompt\n    const prompt = [\n      {\n        role: \"user\",\n        content: data.description,\n      },\n    ];\n\n    //for the demo\n    const apiKey = localStorage.getItem(\"apiKey\");\n\n    try {\n      const response = await axios.post(\n        \"/api/generate-content\",\n        { prompt, apiKey },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      setGeneratedContent(response.data);\n    } catch (error: any) {\n      setGeneratedContent(\"Please Add the API Key!\");\n      console.error(\"Error:\", error.message);\n    }\n\n    setData({\n      description: \"\",\n    });\n  };\n\n  return (\n    <>\n      <title>\n        Spreadsheet Generator | AI Tool - Next.js Template for AI Tools\n      </title>\n      <meta name=\"description\" content=\"This is AI Examples page for AI Tool\" />\n      <Breadcrumb pageTitle=\"Spreadsheet Generator\" />\n\n      <section className=\"pb-17.5 lg:pb-22.5 xl:pb-27.5\">\n        <div className=\"mx-auto grid max-w-[1170px] gap-8 px-4 sm:px-8 lg:grid-cols-12 xl:px-0\">\n          <div className=\"gradient-box rounded-lg bg-dark-8 p-8 lg:col-span-4 \">\n            <h2 className=\"pb-2 text-2xl font-bold text-white\">\n              Spreadsheet Topic\n            </h2>\n            <p className=\"pb-6\">What your spreadsheet will be about?</p>\n            <form onSubmit={handleSubmit}>\n              <div className=\"flex flex-col\">\n                <label htmlFor=\"description\" className=\"pb-4\">\n                  Description\n                </label>\n\n                <textarea\n                  onChange={handleChange}\n                  value={data.description}\n                  name=\"description\"\n                  placeholder=\"Type spreadsheet description\"\n                  className=\"min-h-[160px] rounded-lg border border-white/[0.12] bg-dark-7 px-5 py-3 text-white outline-hidden focus:border-purple\"\n                  required\n                />\n              </div>\n\n              <button\n                type=\"submit\"\n                className=\"hero-button-gradient mt-5 w-full rounded-lg px-7 py-3 text-center font-medium text-white duration-300 ease-in hover:opacity-80 \"\n              >\n                Generate\n              </button>\n            </form>\n          </div>\n\n          <PreviewGeneratedText\n            generatedContent={generatedContent}\n            height={262}\n          />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default SpreadsheetGeneratorPage;\n","size_bytes":3531},"src/app/(site)/auth/forgot-password/page.tsx":{"content":"import React from \"react\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport ForgotPassword from \"@/components/Auth/ForgotPassword\";\n\nimport { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Forgot Password | AI Tool - Next.js Template for AI Tools\",\n  description: \"This is Forgot Password page for AI Tool\",\n  // other metadata\n};\n\nconst ForgotPasswordPage = () => {\n  return (\n    <>\n      <Breadcrumb pageTitle=\"Forgot Password\" />\n      <ForgotPassword />\n    </>\n  );\n};\n\nexport default ForgotPasswordPage;\n","size_bytes":543},"src/app/(site)/auth/signin/page.tsx":{"content":"import Signin from \"@/components/Auth/SignIn\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Sign in | AI Tool - Next.js Template for AI Tools\",\n  description: \"This is Sign in page for AI Tool\",\n  // other metadata\n};\n\nconst SigninPage = () => {\n  return (\n    <>\n      <Breadcrumb pageTitle=\"Sign in\" />\n\n      <Signin />\n    </>\n  );\n};\n\nexport default SigninPage;\n","size_bytes":452},"src/app/(site)/auth/signup/page.tsx":{"content":"import Signup from \"@/components/Auth/Signup\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport { Metadata } from \"next\";\n\nexport const metadata: Metadata = {\n  title: \"Sing up | AI Tool - Next.js Template for AI Tools\",\n  description: \"This is Sign up for AI Tool\",\n  // other metadata\n};\n\nconst SignupPage = () => {\n  return (\n    <>\n      <Breadcrumb pageTitle=\"Sign up\" />\n\n      <Signup />\n    </>\n  );\n};\n\nexport default SignupPage;\n","size_bytes":447},"src/app/(site)/blog/[slug]/page.tsx":{"content":"import Breadcrumb from '@/components/Breadcrumb';\nimport { getPost, imageBuilder } from '@/sanity/sanity-utils';\nimport { PortableText } from '@portabletext/react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { RelatedArticles } from './_components/related-articles';\nimport { SharePost } from './_components/share-post';\n\ntype Props = {\n  params: Promise<{ slug: string }>;\n};\n\nexport async function generateMetadata(props: Props) {\n  const params = await props.params;\n  const { slug } = params;\n  const post = await getPost(slug);\n  const siteURL = process.env.SITE_URL;\n  const siteName = process.env.SITE_NAME;\n  const authorName = process.env.AUTHOR_NAME;\n\n  if (post) {\n    return {\n      title: `${post.title || 'Single Post Page'} | ${siteName}`,\n      description: `${post.metadata?.slice(0, 136)}...`,\n      author: authorName,\n\n      robots: {\n        index: true,\n        follow: true,\n        nocache: true,\n        googleBot: {\n          index: true,\n          follow: false,\n          'max-video-preview': -1,\n          'max-image-preview': 'large',\n          'max-snippet': -1,\n        },\n      },\n\n      openGraph: {\n        title: `${post.title} | ${siteName}`,\n        description: post.metadata,\n        url: `${siteURL}/blog/${post?.slug?.current}`,\n        siteName: siteName,\n        images: [\n          {\n            url: imageBuilder(post.mainImage).url(),\n            width: 1800,\n            height: 1600,\n            alt: post.title,\n          },\n        ],\n        locale: 'en_US',\n        type: 'article',\n      },\n\n      twitter: {\n        card: 'summary_large_image',\n        title: `${post.title} | ${siteName}`,\n        description: `${post.metadata?.slice(0, 136)}...`,\n        creator: `@${authorName}`,\n        site: `@${siteName}`,\n        images: [imageBuilder(post?.mainImage).url()],\n        url: `${siteURL}/blog/${post?.slug?.current}`,\n      },\n    };\n  } else {\n    return {\n      title: 'Not Found',\n      description: 'No blog article has been found',\n    };\n  }\n}\n\nexport default async function BlogDetails(props: Props) {\n  const params = await props.params;\n  const { slug } = params;\n  const post = await getPost(slug);\n\n  return (\n    <>\n      <Breadcrumb pageTitle='Blog Details' />\n\n      <section className='pt-20 pb-17.5 lg:pt-25 lg:pb-22.5 xl:pb-27.5'>\n        <div className='relative mx-auto mb-10 aspect-97/44 w-full max-w-[1170px] overflow-hidden rounded-2xl px-4 sm:px-8 md:rounded-3xl xl:px-0'>\n          <Image\n            src={imageBuilder(post?.mainImage).url()}\n            alt={post.title}\n            fill\n          />\n        </div>\n\n        <div className='mx-auto w-full max-w-[1170px]'>\n          <div className='mx-auto max-w-[870px]'>\n            <div className='mb-7.5 flex flex-wrap items-center justify-between gap-5'>\n              <div className='flex flex-wrap items-center gap-2.5'>\n                {post?.tags?.map((tag) => (\n                  <span\n                    key={tag}\n                    className='cursor-pointer rounded-full border border-white/10 bg-white/[0.07] px-2.5 py-[3px] text-xs font-medium duration-300 ease-out hover:border-white/25 hover:text-white'\n                  >\n                    {tag}\n                  </span>\n                ))}\n              </div>\n\n              <div className='flex flex-wrap items-center gap-4.5'>\n                <div className='flex cursor-pointer flex-wrap items-center gap-2 duration-300 ease-in hover:text-white'>\n                  <svg\n                    className='fill-current'\n                    width='20'\n                    height='20'\n                    viewBox='0 0 20 20'\n                    fill='none'\n                    xmlns='http://www.w3.org/2000/svg'\n                  >\n                    <path\n                      d='M10 8.75C7.65625 8.75 5.78125 6.90625 5.78125 4.65625C5.78125 2.40625 7.65625 0.5625 10 0.5625C12.3438 0.5625 14.2188 2.40625 14.2188 4.65625C14.2188 6.90625 12.3438 8.75 10 8.75ZM10 1.96875C8.4375 1.96875 7.1875 3.1875 7.1875 4.65625C7.1875 6.125 8.4375 7.34375 10 7.34375C11.5625 7.34375 12.8125 6.125 12.8125 4.65625C12.8125 3.1875 11.5625 1.96875 10 1.96875Z'\n                      fill=''\n                    />\n                    <path\n                      d='M16.5938 19.4688C16.2188 19.4688 15.875 19.1562 15.875 18.75V17.8438C15.875 14.5938 13.25 11.9688 10 11.9688C6.75 11.9688 4.125 14.5938 4.125 17.8438V18.75C4.125 19.125 3.8125 19.4688 3.40625 19.4688C3 19.4688 2.6875 19.1562 2.6875 18.75V17.8438C2.6875 13.8125 5.96875 10.5625 9.96875 10.5625C13.9688 10.5625 17.25 13.8437 17.25 17.8438V18.75C17.2813 19.125 16.9688 19.4688 16.5938 19.4688Z'\n                      fill=''\n                    />\n                  </svg>\n\n                  <Link\n                    href={`/blog/author/${post?.author?.slug?.current}`}\n                    className='text-sm font-medium'\n                  >\n                    {post?.author?.name}\n                  </Link>\n                </div>\n\n                <div className='flex cursor-pointer flex-wrap items-center gap-2 duration-300 ease-in hover:text-white'>\n                  <svg\n                    className='fill-current'\n                    width='20'\n                    height='20'\n                    viewBox='0 0 20 20'\n                    fill='none'\n                    xmlns='http://www.w3.org/2000/svg'\n                  >\n                    <path\n                      d='M17.5 3.3125H15.875V2.625C15.875 2.25 15.5625 1.90625 15.1562 1.90625C14.75 1.90625 14.4375 2.21875 14.4375 2.625V3.3125H5.53125V2.625C5.53125 2.25 5.21875 1.90625 4.8125 1.90625C4.40625 1.90625 4.09375 2.21875 4.09375 2.625V3.3125H2.5C1.4375 3.3125 0.53125 4.1875 0.53125 5.28125V16.1563C0.53125 17.2188 1.40625 18.125 2.5 18.125H17.5C18.5625 18.125 19.4687 17.25 19.4687 16.1563V5.25C19.4687 4.1875 18.5625 3.3125 17.5 3.3125ZM1.96875 9.125H4.625V12.2188H1.96875V9.125ZM6.03125 9.125H9.3125V12.2188H6.03125V9.125ZM9.3125 13.625V16.6875H6.03125V13.625H9.3125ZM10.7187 13.625H14V16.6875H10.7187V13.625ZM10.7187 12.2188V9.125H14V12.2188H10.7187ZM15.375 9.125H18.0312V12.2188H15.375V9.125ZM2.5 4.71875H4.125V5.375C4.125 5.75 4.4375 6.09375 4.84375 6.09375C5.25 6.09375 5.5625 5.78125 5.5625 5.375V4.71875H14.5V5.375C14.5 5.75 14.8125 6.09375 15.2187 6.09375C15.625 6.09375 15.9375 5.78125 15.9375 5.375V4.71875H17.5C17.8125 4.71875 18.0625 4.96875 18.0625 5.28125V7.71875H1.96875V5.28125C1.96875 4.96875 2.1875 4.71875 2.5 4.71875ZM1.96875 16.125V13.5938H4.625V16.6563H2.5C2.1875 16.6875 1.96875 16.4375 1.96875 16.125ZM17.5 16.6875H15.375V13.625H18.0312V16.1563C18.0625 16.4375 17.8125 16.6875 17.5 16.6875Z'\n                      fill=''\n                    />\n                  </svg>\n\n                  <span className='text-sm font-medium'>\n                    {new Date(post?.publishedAt!)\n                      .toDateString()\n                      .split(' ')\n                      .slice(1)\n                      .join(' ')}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <h1 className='mb-7.5 text-[34px] leading-[45px] font-semibold text-white'>\n              {post?.title}\n            </h1>\n\n            <div className='blog-details mb-12'>\n              <PortableText value={post?.body || []} />\n            </div>\n\n            <SharePost />\n          </div>\n\n          <RelatedArticles />\n        </div>\n      </section>\n    </>\n  );\n}\n","size_bytes":7469},"src/app/(site)/docs/[slug]/page.tsx":{"content":"import { getPostBySlug } from '@/libs/markdown';\nimport markdownToHtml from '@/libs/markdownToHtml';\n\ntype Props = {\n  params: Promise<{ slug: string }>;\n};\n\nexport async function generateMetadata(props: Props) {\n  const params = await props.params;\n  const post = getPostBySlug(params.slug, ['title', 'author', 'content']);\n  const siteName = process.env.SITE_NAME;\n  const authorName = process.env.AUTHOR_NAME;\n\n  if (post) {\n    return {\n      title: `${post.title || 'Single Post Page'} | ${siteName}`,\n      description: `${post.metadata?.slice(0, 136)}...`,\n      author: authorName,\n\n      robots: {\n        index: true,\n        follow: true,\n        nocache: true,\n        googleBot: {\n          index: true,\n          follow: false,\n          'max-video-preview': -1,\n          'max-image-preview': 'large',\n          'max-snippet': -1,\n        },\n      },\n    };\n  } else {\n    return {\n      title: 'Not Found',\n      description: 'No blog article has been found',\n    };\n  }\n}\n\nexport default async function Post(props: Props) {\n  const params = await props.params;\n  const post = getPostBySlug(params.slug, ['title', 'author', 'content']);\n  const content = await markdownToHtml(post.content || '');\n\n  return <article dangerouslySetInnerHTML={{ __html: content }}></article>;\n}\n","size_bytes":1292},"src/app/(studio)/admin/[[...index]]/page.tsx":{"content":"\"use client\";\n\nimport { NextStudio } from \"next-sanity/studio\";\nimport config from \"../../../../../sanity.config\";\n\nexport default function AdminPage() {\n  return <NextStudio config={config} />;\n  // return <>this sanity studio page</>;\n}\n","size_bytes":239},"src/app/api/auth/[...nextauth]/route.ts":{"content":"import NextAuth from \"next-auth/next\";\nimport { authOptions } from \"@/libs/auth\";\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n","size_bytes":167},"src/app/api/forgot-password/reset/route.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { prisma } from \"@/libs/prismaDB\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport crypto from \"crypto\";\nimport { sendEmail } from \"@/libs/email\";\n\nexport async function POST(request: NextRequest) {\n  const body = await request.json();\n  const { email } = body;\n\n  if (!email) {\n    return new NextResponse(\"Missing Fields\", { status: 400 });\n  }\n\n  const user = await prisma.user.findUnique({\n    where: {\n      email,\n    },\n  });\n\n  if (!user) {\n    throw new Error(\"Email does not exists\");\n  }\n\n  const resetToken = crypto.randomBytes(20).toString(\"hex\");\n\n  const passwordResetTokenExp = new Date();\n  passwordResetTokenExp.setHours(passwordResetTokenExp.getHours() + 1);\n\n  await prisma.user.update({\n    where: {\n      email,\n    },\n    data: {\n      passwordResetToken: resetToken,\n      passwordResetTokenExp,\n    },\n  });\n\n  const resetURL = `${process.env.SITE_URL}/auth/reset-password/${resetToken}`;\n\n  try {\n    await sendEmail({\n      to: email,\n      subject: \"Reset your password\",\n      html: ` \n      <div>\n        <h1>You requested a password reset</h1>\n        <p>Click the link below to reset your password</p>\n        <a href=\"${resetURL}\" target=\"_blank\">Reset Password</a>\n      </div>\n      `,\n    });\n\n    return NextResponse.json(\"An email has been sent to your email\", {\n      status: 200,\n    });\n  } catch (error) {\n    return NextResponse.json(\"An error has occurred. Please try again!\", {\n      status: 500,\n    });\n  }\n}\n","size_bytes":1508},"src/app/api/forgot-password/update/route.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { prisma } from \"@/libs/prismaDB\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nimport { sendEmail } from \"@/libs/email\";\n\nexport async function POST(request: NextRequest) {\n  const body = await request.json();\n  const { email, password } = body;\n\n  if (!email || !password) {\n    return new NextResponse(\"Missing Fields\", { status: 400 });\n  }\n\n  const user = await prisma.user.findUnique({\n    where: {\n      email,\n    },\n  });\n\n  if (!user) {\n    throw new Error(\"Email does not exists\");\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  try {\n    await prisma.user.update({\n      where: {\n        email,\n      },\n      data: {\n        password: hashedPassword,\n        passwordResetToken: null,\n        passwordResetTokenExp: null,\n      },\n    });\n\n    return NextResponse.json(\"Password Updated\", { status: 200 });\n  } catch (error) {\n    return new NextResponse(\"Internal Error\", { status: 500 });\n  }\n}\n","size_bytes":978},"src/app/api/forgot-password/verify-token/route.ts":{"content":"import { prisma } from \"@/libs/prismaDB\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport const POST = async (request: NextRequest) => {\n  const body = await request.json();\n  const { token } = body;\n\n  if (!token) {\n    return new NextResponse(\"Missing Fields\", { status: 400 });\n  }\n\n  const user = await prisma.user.findUnique({\n    where: {\n      passwordResetToken: token,\n      passwordResetTokenExp: {\n        gte: new Date(),\n      },\n    },\n  });\n\n  if (!user) {\n    return new NextResponse(\"Invalid Token or Token Expired\", { status: 400 });\n  }\n\n  return NextResponse.json(user);\n};\n","size_bytes":611},"src/app/(site)/auth/reset-password/[token]/page.tsx":{"content":"import React from \"react\";\n\nimport { Metadata } from \"next\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport ResetPassword from \"@/components/Auth/ResetPassword\";\n\nexport const metadata: Metadata = {\n  title: \"Reset Password | AI Tool - Next.js Template for AI Tools\",\n  description: \"This is Reset Password page for AI Tool\",\n  // other metadata\n};\n\nconst ResetPasswordPage = async (props: { params: Promise<{ token: string }> }) => {\n  const params = await props.params;\n  return (\n    <>\n      <Breadcrumb pageTitle=\"Reset Password\" />\n      <ResetPassword token={params.token!} />\n    </>\n  );\n};\n\nexport default ResetPasswordPage;\n","size_bytes":645},"src/app/(site)/blog/[slug]/_components/related-articles.tsx":{"content":"import SingleBlog from '@/components/Blog/SingleBlog';\nimport { getPosts } from '@/sanity/sanity-utils';\n\nexport async function RelatedArticles() {\n  const posts = await getPosts();\n\n  return (\n    <section>\n      <h2 className='mt-25 mb-10 max-w-[579px] text-[34px] leading-[45px] font-semibold text-white'>\n        Related Articles\n      </h2>\n\n      <div className='grid grid-cols-1 gap-7.5 sm:grid-cols-2 lg:grid-cols-3'>\n        {posts.slice(0, 3).map((blog) => (\n          <SingleBlog key={blog._id} blog={blog} />\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":568},"src/app/(site)/blog/[slug]/_components/share-post.tsx":{"content":"'use client';\n\nimport { FacebookIcon, LinkedinIcon, TwitterIcon } from '@/assets/icons';\nimport { useEffect, useState } from 'react';\n\nexport function SharePost() {\n  const [postUrl, setPostUrl] = useState('');\n\n  useEffect(() => {\n    setPostUrl(window.location.href);\n  }, []);\n\n  return (\n    <div className='flex items-center gap-4'>\n      <p className='font-medium'>Share This Post:</p>\n\n      <div className='flex items-center gap-5'>\n        <a\n          href={`https://www.facebook.com/sharer/sharer.php?u=${postUrl}`}\n          target='_blank'\n          rel='noopener noreferrer'\n          className='duration-300 ease-in hover:text-white'\n        >\n          <span className='sr-only'>Share this post on Facebook</span>\n\n          <FacebookIcon />\n        </a>\n\n        <a\n          href={`https://x.com/share?url=${postUrl}`}\n          target='_blank'\n          rel='noopener noreferrer'\n          className='duration-300 ease-in hover:text-white'\n        >\n          <span className='sr-only'>Share this post on Twitter/X</span>\n          <TwitterIcon />\n        </a>\n\n        <a\n          href={`https://www.linkedin.com/feed/?shareActive=true&shareUrl=${postUrl}`}\n          target='_blank'\n          rel='noopener noreferrer'\n          className='duration-300 ease-in hover:text-white'\n        >\n          <span className='sr-only'>Share this post on LinkedIn</span>\n\n          <LinkedinIcon />\n        </a>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1454},"src/app/(site)/blog/author/[slug]/page.tsx":{"content":"import BlogGridContainer from \"@/components/Blog/BlogGridContainer\";\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport { getPostsByAuthor } from \"@/sanity/sanity-utils\";\nimport { Author } from \"@/types/blog\";\nimport React from \"react\";\n\ntype Props = {\n  params: Promise<{ slug: string }>;\n};\n\nexport async function generateMetadata(props: Props) {\n  const params = await props.params;\n  const { slug } = params;\n  const posts = await getPostsByAuthor(slug);\n\n  return {\n    title: `Author: ${slug} | Blog`,\n    description: `Author: ${slug} | Blog`,\n  };\n}\n\nconst AuthorPage = async (props: Props) => {\n  const params = await props.params;\n\n  const {\n    slug\n  } = params;\n\n  const posts = await getPostsByAuthor(slug);\n  const author: any = posts[0]?.author || \"Author\";\n\n  return (\n    <>\n      <Breadcrumb pageTitle={author.name} />\n\n      <section className=\"pb-17.5 pt-20 lg:pb-22.5 lg:pt-25 xl:pb-27.5\">\n        <div className=\"mx-auto max-w-[1170px] px-4 sm:px-8 xl:px-0\">\n          <BlogGridContainer blogs={posts} />\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default AuthorPage;\n","size_bytes":1110},"scripts/seed-jobs.ts":{"content":"// Script to seed sample thermal inspection jobs for testing\nimport { db } from \"../server/db\";\nimport { jobs } from \"../shared/schema\";\n\nconst sampleJobs = [\n  {\n    title: \"Large Solar Farm Thermal Inspection - Phoenix\",\n    description: \"Comprehensive thermal inspection of 500MW solar installation. Requires detailed thermal imaging of all panels and electrical connections to identify hot spots and potential failures.\",\n    location: \"Phoenix, AZ\",\n    coordinatesLat: \"33.4484\",\n    coordinatesLng: \"-112.0740\",\n    status: \"created\" as const,\n    fileCount: 250,\n    processedCount: 0,\n    scheduledDate: new Date(\"2025-09-25\"),\n  },\n  {\n    title: \"Electrical Substation Thermal Survey\",\n    description: \"Thermal inspection of high-voltage electrical substation. Looking for overheating transformers, switches, and connections. Critical infrastructure requiring experienced pilot.\",\n    location: \"Austin, TX\",\n    coordinatesLat: \"30.2672\",\n    coordinatesLng: \"-97.7431\",\n    status: \"created\" as const,\n    fileCount: 75,\n    processedCount: 0,\n    scheduledDate: new Date(\"2025-09-30\"),\n  },\n  {\n    title: \"Commercial Solar Array - Maintenance Check\",\n    description: \"Routine thermal inspection for 50MW commercial solar array. Previous anomalies detected, need follow-up analysis and detailed reporting.\",\n    location: \"San Diego, CA\",\n    coordinatesLat: \"32.7157\",\n    coordinatesLng: \"-117.1611\",\n    status: \"created\" as const,\n    fileCount: 120,\n    processedCount: 0,\n    scheduledDate: new Date(\"2025-10-05\"),\n  },\n  {\n    title: \"Wind Farm Electrical Infrastructure\",\n    description: \"Thermal inspection of wind turbine electrical systems. Check transformer boxes, connections, and control systems for thermal anomalies.\",\n    location: \"Amarillo, TX\",\n    coordinatesLat: \"35.2220\",\n    coordinatesLng: \"-101.8313\",\n    status: \"created\" as const,\n    fileCount: 180,\n    processedCount: 0,\n    scheduledDate: new Date(\"2025-10-08\"),\n  },\n  {\n    title: \"Industrial Solar Installation Inspection\",\n    description: \"Large industrial facility solar installation inspection. Focus on inverters, combiner boxes, and panel connections for potential overheating issues.\",\n    location: \"Las Vegas, NV\",\n    coordinatesLat: \"36.1699\",\n    coordinatesLng: \"-115.1398\",\n    status: \"created\" as const,\n    fileCount: 200,\n    processedCount: 0,\n    scheduledDate: new Date(\"2025-10-12\"),\n  }\n];\n\nexport async function seedJobs() {\n  try {\n    console.log(\"Seeding sample thermal inspection jobs...\");\n    \n    const insertedJobs = await db\n      .insert(jobs)\n      .values(sampleJobs)\n      .returning();\n    \n    console.log(`Successfully seeded ${insertedJobs.length} jobs:`);\n    insertedJobs.forEach(job => {\n      console.log(`- ${job.title} (${job.location})`);\n    });\n    \n    return insertedJobs;\n  } catch (error) {\n    console.error(\"Error seeding jobs:\", error);\n    throw error;\n  }\n}\n\n// Run if called directly\nif (require.main === module) {\n  seedJobs().then(() => {\n    console.log(\"Job seeding completed\");\n    process.exit(0);\n  }).catch(error => {\n    console.error(\"Job seeding failed:\", error);\n    process.exit(1);\n  });\n}","size_bytes":3167},"src/app/(site)/pilots/dashboard/page.tsx":{"content":"import { Metadata } from \"next\";\nimport PilotDashboard from \"@/components/PilotDashboard\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/libs/auth\";\nimport { redirect } from \"next/navigation\";\nimport { storage } from \"@/server/storage\";\n\nexport const metadata: Metadata = {\n  title: \"Pilot Dashboard | ComplianceDrone - Thermal Inspection Platform\",\n  description: \"Pilot dashboard for managing thermal inspection projects and assignments\",\n};\n\nconst PilotDashboardPage = async () => {\n  const session = await getServerSession(authOptions);\n  \n  if (!session?.user?.email) {\n    redirect(\"/auth/signin\");\n  }\n\n  // Get user and pilot profile\n  const user = await storage.getUserByEmail(session.user.email);\n  \n  if (!user) {\n    redirect(\"/auth/signin\");\n  }\n\n  const pilotProfile = await storage.getPilotProfile(user.id);\n  \n  if (!pilotProfile) {\n    redirect(\"/pilot-registration\");\n  }\n\n  // If pilot is pending approval, show pending status\n  if (pilotProfile.status === 'pending') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-black\">\n        <div className=\"text-center text-white\">\n          <h1 className=\"text-2xl font-bold mb-4\">Application Under Review</h1>\n          <p className=\"text-gray-300\">Your pilot application is currently being reviewed. You'll receive an email once approved.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (pilotProfile.status === 'suspended') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-black\">\n        <div className=\"text-center text-white\">\n          <h1 className=\"text-2xl font-bold mb-4 text-red-500\">Account Suspended</h1>\n          <p className=\"text-gray-300\">Your pilot account has been suspended. Please contact support for assistance.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <PilotDashboard \n      user={user} \n      pilotProfile={pilotProfile}\n    />\n  );\n};\n\nexport default PilotDashboardPage;","size_bytes":1983},"src/app/api/auth/user/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/libs/auth\";\nimport { storage } from \"@/server/storage\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { error: \"Not authenticated\" },\n        { status: 401 }\n      );\n    }\n\n    // Get user from database with pilot profile\n    const user = await storage.getUserByEmail(session.user.email);\n    \n    if (!user) {\n      return NextResponse.json(\n        { error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Get pilot profile if exists\n    const pilotProfile = await storage.getPilotProfile(user.id);\n\n    const userResponse = {\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      profileImageUrl: user.profileImageUrl,\n      pilotProfile: pilotProfile ? {\n        id: pilotProfile.id,\n        status: pilotProfile.status,\n        companyName: pilotProfile.companyName,\n        phoneNumber: pilotProfile.phoneNumber,\n        part107Certified: pilotProfile.part107Certified,\n        completedJobs: pilotProfile.completedJobs,\n        averageRating: pilotProfile.averageRating,\n        totalEarnings: pilotProfile.totalEarnings,\n        thermalExperienceYears: pilotProfile.thermalExperienceYears,\n        totalFlightHours: pilotProfile.totalFlightHours\n      } : undefined\n    };\n\n    return NextResponse.json(userResponse);\n  } catch (error) {\n    console.error(\"Error fetching user:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1760},"src/app/api/jobs/[jobId]/apply/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/libs/auth\";\nimport { storage } from \"@/server/storage\";\nimport { db } from \"@/server/db\";\nimport { jobs } from \"@/shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { jobId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { error: \"Not authenticated\" },\n        { status: 401 }\n      );\n    }\n\n    // Get user and pilot profile\n    const user = await storage.getUserByEmail(session.user.email);\n    if (!user) {\n      return NextResponse.json(\n        { error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    const pilotProfile = await storage.getPilotProfile(user.id);\n    if (!pilotProfile || pilotProfile.status !== 'approved') {\n      return NextResponse.json(\n        { error: \"Pilot profile not approved\" },\n        { status: 403 }\n      );\n    }\n\n    // Check if job exists and is available\n    const [job] = await db\n      .select()\n      .from(jobs)\n      .where(\n        and(\n          eq(jobs.id, params.jobId),\n          eq(jobs.status, 'created')\n        )\n      );\n\n    if (!job) {\n      return NextResponse.json(\n        { error: \"Job not found or not available\" },\n        { status: 404 }\n      );\n    }\n\n    // Assign the job to the pilot\n    const [updatedJob] = await db\n      .update(jobs)\n      .set({\n        assignedPilotId: pilotProfile.id,\n        status: 'assigned',\n        updatedAt: new Date(),\n      })\n      .where(eq(jobs.id, params.jobId))\n      .returning();\n\n    return NextResponse.json({\n      success: true,\n      message: \"Successfully applied for job\",\n      job: updatedJob,\n    });\n  } catch (error) {\n    console.error(\"Error applying for job:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":2040},"src/app/api/jobs/[jobId]/status/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/libs/auth\";\nimport { storage } from \"@/server/storage\";\nimport { db } from \"@/server/db\";\nimport { jobs, pilotProfiles } from \"@/shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { jobId: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { error: \"Not authenticated\" },\n        { status: 401 }\n      );\n    }\n\n    const { status } = await request.json();\n\n    if (!['assigned', 'in_progress', 'completed', 'cancelled'].includes(status)) {\n      return NextResponse.json(\n        { error: \"Invalid status\" },\n        { status: 400 }\n      );\n    }\n\n    // Get user and pilot profile\n    const user = await storage.getUserByEmail(session.user.email);\n    if (!user) {\n      return NextResponse.json(\n        { error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    const pilotProfile = await storage.getPilotProfile(user.id);\n    if (!pilotProfile) {\n      return NextResponse.json(\n        { error: \"Pilot profile not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Check if job exists and is assigned to this pilot\n    const [job] = await db\n      .select()\n      .from(jobs)\n      .where(\n        and(\n          eq(jobs.id, params.jobId),\n          eq(jobs.assignedPilotId, pilotProfile.id)\n        )\n      );\n\n    if (!job) {\n      return NextResponse.json(\n        { error: \"Job not found or not assigned to you\" },\n        { status: 404 }\n      );\n    }\n\n    // Update job status\n    const updateData: any = {\n      status,\n      updatedAt: new Date(),\n    };\n\n    // If completing the job, set completion date and update pilot stats\n    if (status === 'completed') {\n      updateData.completedAt = new Date();\n      updateData.reportGenerated = true;\n      \n      // Update pilot profile stats\n      await db\n        .update(pilotProfiles)\n        .set({\n          completedJobs: (pilotProfile.completedJobs || 0) + 1,\n          totalEarnings: (pilotProfile.totalEarnings || 0) + getCompensationForJob(job.fileCount || 0),\n          status: 'active', // Mark pilot as active after completing first job\n          updatedAt: new Date(),\n        })\n        .where(eq(pilotProfiles.id, pilotProfile.id));\n    }\n\n    const [updatedJob] = await db\n      .update(jobs)\n      .set(updateData)\n      .where(eq(jobs.id, params.jobId))\n      .returning();\n\n    return NextResponse.json({\n      success: true,\n      message: `Job status updated to ${status}`,\n      job: updatedJob,\n    });\n  } catch (error) {\n    console.error(\"Error updating job status:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nfunction getCompensationForJob(fileCount: number): number {\n  const baseRate = 500; // $5 per file in cents\n  const complexityMultiplier = fileCount > 200 ? 1.5 : fileCount > 100 ? 1.2 : 1.0;\n  return Math.round(fileCount * baseRate * complexityMultiplier);\n}","size_bytes":3173},"src/app/api/jobs/available/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/libs/auth\";\nimport { storage } from \"@/server/storage\";\nimport { db } from \"@/server/db\";\nimport { jobs } from \"@/shared/schema\";\nimport { eq, and, isNull, or } from \"drizzle-orm\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { error: \"Not authenticated\" },\n        { status: 401 }\n      );\n    }\n\n    // Get user and verify pilot status\n    const user = await storage.getUserByEmail(session.user.email);\n    if (!user) {\n      return NextResponse.json(\n        { error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    const pilotProfile = await storage.getPilotProfile(user.id);\n    if (!pilotProfile || pilotProfile.status !== 'approved') {\n      return NextResponse.json(\n        { error: \"Pilot profile not approved\" },\n        { status: 403 }\n      );\n    }\n\n    // Get available jobs (not assigned or status is created)\n    const availableJobs = await db\n      .select({\n        id: jobs.id,\n        title: jobs.title,\n        description: jobs.description,\n        location: jobs.location,\n        coordinatesLat: jobs.coordinatesLat,\n        coordinatesLng: jobs.coordinatesLng,\n        status: jobs.status,\n        fileCount: jobs.fileCount,\n        scheduledDate: jobs.scheduledDate,\n        createdAt: jobs.createdAt,\n      })\n      .from(jobs)\n      .where(\n        and(\n          or(\n            eq(jobs.status, 'created'),\n            eq(jobs.status, 'available')\n          ),\n          isNull(jobs.assignedPilotId)\n        )\n      )\n      .orderBy(jobs.createdAt);\n\n    // Add mock compensation and requirements (these could be added to schema later)\n    const jobsWithDetails = availableJobs.map(job => ({\n      ...job,\n      compensation: getCompensationForJob(job.fileCount || 0),\n      requirements: getRequirementsForJob(job.title),\n      type: getJobType(job.title),\n    }));\n\n    return NextResponse.json(jobsWithDetails);\n  } catch (error) {\n    console.error(\"Error fetching available jobs:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper functions to determine job details\nfunction getCompensationForJob(fileCount: number): number {\n  // Base rate per file + complexity multiplier\n  const baseRate = 500; // $5 per file in cents\n  const complexityMultiplier = fileCount > 200 ? 1.5 : fileCount > 100 ? 1.2 : 1.0;\n  return Math.round(fileCount * baseRate * complexityMultiplier);\n}\n\nfunction getRequirementsForJob(title: string): string[] {\n  const baseReqs = ['Part 107 Certified'];\n  \n  if (title.toLowerCase().includes('solar')) {\n    return [...baseReqs, 'Solar inspection experience', 'Thermal camera required'];\n  }\n  \n  if (title.toLowerCase().includes('electrical') || title.toLowerCase().includes('substation')) {\n    return [...baseReqs, 'High-voltage experience preferred', 'Insurance required'];\n  }\n  \n  return [...baseReqs, 'Thermal imaging experience'];\n}\n\nfunction getJobType(title: string): string {\n  if (title.toLowerCase().includes('solar')) return 'solar';\n  if (title.toLowerCase().includes('electrical') || title.toLowerCase().includes('substation')) return 'electrical';\n  return 'infrastructure';\n}","size_bytes":3422},"src/app/api/jobs/my-projects/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/libs/auth\";\nimport { storage } from \"@/server/storage\";\nimport { db } from \"@/server/db\";\nimport { jobs } from \"@/shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { error: \"Not authenticated\" },\n        { status: 401 }\n      );\n    }\n\n    // Get user and pilot profile\n    const user = await storage.getUserByEmail(session.user.email);\n    if (!user) {\n      return NextResponse.json(\n        { error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    const pilotProfile = await storage.getPilotProfile(user.id);\n    if (!pilotProfile) {\n      return NextResponse.json(\n        { error: \"Pilot profile not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Get jobs assigned to this pilot\n    const myProjects = await db\n      .select({\n        id: jobs.id,\n        title: jobs.title,\n        description: jobs.description,\n        location: jobs.location,\n        status: jobs.status,\n        fileCount: jobs.fileCount,\n        processedCount: jobs.processedCount,\n        scheduledDate: jobs.scheduledDate,\n        completedAt: jobs.completedAt,\n        createdAt: jobs.createdAt,\n      })\n      .from(jobs)\n      .where(eq(jobs.assignedPilotId, pilotProfile.id))\n      .orderBy(desc(jobs.createdAt));\n\n    // Add compensation and other details\n    const projectsWithDetails = myProjects.map(project => ({\n      ...project,\n      compensation: getCompensationForJob(project.fileCount || 0),\n      rating: getMockRating(project.status || 'unknown'),\n      feedback: getMockFeedback(project.status || 'unknown'),\n    }));\n\n    return NextResponse.json(projectsWithDetails);\n  } catch (error) {\n    console.error(\"Error fetching my projects:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper functions\nfunction getCompensationForJob(fileCount: number): number {\n  const baseRate = 500; // $5 per file in cents\n  const complexityMultiplier = fileCount > 200 ? 1.5 : fileCount > 100 ? 1.2 : 1.0;\n  return Math.round(fileCount * baseRate * complexityMultiplier);\n}\n\nfunction getMockRating(status: string): number | undefined {\n  return status === 'completed' ? Math.floor(Math.random() * 2) + 4 : undefined; // 4-5 stars\n}\n\nfunction getMockFeedback(status: string): string | undefined {\n  const feedbacks = [\n    \"Excellent work! Very thorough inspection and detailed report.\",\n    \"Professional service, timely delivery.\",\n    \"High quality thermal imaging, identified all anomalies correctly.\",\n    \"Great communication throughout the project.\"\n  ];\n  \n  return status === 'completed' ? feedbacks[Math.floor(Math.random() * feedbacks.length)] : undefined;\n}","size_bytes":2984},"src/app/api/profile/update/route.ts":{"content":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/libs/auth\";\nimport { storage } from \"@/server/storage\";\nimport { db } from \"@/server/db\";\nimport { users, pilotProfiles } from \"@/shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function PATCH(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.email) {\n      return NextResponse.json(\n        { error: \"Not authenticated\" },\n        { status: 401 }\n      );\n    }\n\n    const { user: userData, pilotProfile: pilotData } = await request.json();\n\n    // Get user and pilot profile\n    const user = await storage.getUserByEmail(session.user.email);\n    if (!user) {\n      return NextResponse.json(\n        { error: \"User not found\" },\n        { status: 404 }\n      );\n    }\n\n    const pilotProfile = await storage.getPilotProfile(user.id);\n    if (!pilotProfile) {\n      return NextResponse.json(\n        { error: \"Pilot profile not found\" },\n        { status: 404 }\n      );\n    }\n\n    // Update user data if provided\n    if (userData) {\n      await db\n        .update(users)\n        .set({\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, user.id));\n    }\n\n    // Update pilot profile data if provided\n    if (pilotData) {\n      await db\n        .update(pilotProfiles)\n        .set({\n          companyName: pilotData.companyName,\n          phoneNumber: pilotData.phoneNumber,\n          address: pilotData.address,\n          city: pilotData.city,\n          state: pilotData.state,\n          zipCode: pilotData.zipCode,\n          part107Number: pilotData.part107Number,\n          thermalExperienceYears: pilotData.thermalExperienceYears,\n          totalFlightHours: pilotData.totalFlightHours,\n          insuranceProvider: pilotData.insuranceProvider,\n          insurancePolicyNumber: pilotData.insurancePolicyNumber,\n          droneModels: pilotData.droneModels,\n          thermalCameraModels: pilotData.thermalCameraModels,\n          serviceStates: pilotData.serviceStates,\n          maxTravelDistance: pilotData.maxTravelDistance,\n          updatedAt: new Date(),\n        })\n        .where(eq(pilotProfiles.id, pilotProfile.id));\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: \"Profile updated successfully\",\n    });\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":2638},"src/components/PilotDashboard/DashboardOverview.tsx":{"content":"\"use client\";\n\nimport { User, PilotProfile } from '../../../shared/schema';\n\ninterface DashboardOverviewProps {\n  user: User;\n  pilotProfile: PilotProfile;\n}\n\nconst DashboardOverview = ({ user, pilotProfile }: DashboardOverviewProps) => {\n  const statsCards = [\n    {\n      title: 'Completed Jobs',\n      value: pilotProfile.completedJobs || 0,\n      icon: '✅',\n      bgColor: 'bg-green-500'\n    },\n    {\n      title: 'Total Earnings',\n      value: `$${((pilotProfile.totalEarnings || 0) / 100).toLocaleString()}`,\n      icon: '💰',\n      bgColor: 'bg-blue-500'\n    },\n    {\n      title: 'Average Rating',\n      value: pilotProfile.averageRating ? `${pilotProfile.averageRating.toFixed(1)} ⭐` : 'No ratings yet',\n      icon: '⭐',\n      bgColor: 'bg-yellow-500'\n    },\n    {\n      title: 'Flight Hours',\n      value: `${pilotProfile.totalFlightHours || 0}h`,\n      icon: '🚁',\n      bgColor: 'bg-purple-500'\n    }\n  ];\n\n  const certificationStatus = [\n    {\n      label: 'Part 107 Certified',\n      status: pilotProfile.part107Certified,\n      detail: pilotProfile.part107Number || 'Not provided'\n    },\n    {\n      label: 'Insurance Coverage',\n      status: pilotProfile.hasInsurance,\n      detail: pilotProfile.insuranceProvider || 'Not provided'\n    },\n    {\n      label: 'Thermal Experience',\n      status: (pilotProfile.thermalExperienceYears || 0) > 0,\n      detail: `${pilotProfile.thermalExperienceYears || 0} years`\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Section */}\n      <div className=\"bg-gradient-to-r from-gray-800 to-gray-900 rounded-lg p-6\">\n        <h2 className=\"text-2xl font-bold text-white mb-2\">\n          Welcome back, {user.firstName || user.email?.split('@')[0]}!\n        </h2>\n        <p className=\"text-gray-300\">\n          {pilotProfile.companyName && `${pilotProfile.companyName} • `}\n          Member since {pilotProfile.createdAt ? new Date(pilotProfile.createdAt).toLocaleDateString() : 'Unknown'}\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {statsCards.map((stat, index) => (\n          <div key={index} className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-400 text-sm font-medium\">{stat.title}</p>\n                <p className=\"text-2xl font-bold text-white\">{stat.value}</p>\n              </div>\n              <div className={`${stat.bgColor} p-3 rounded-lg`}>\n                <span className=\"text-2xl\">{stat.icon}</span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Certification Status */}\n      <div className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Certification Status</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {certificationStatus.map((cert, index) => (\n            <div key={index} className=\"flex items-center space-x-3\">\n              <div className={`w-3 h-3 rounded-full ${cert.status ? 'bg-green-500' : 'bg-red-500'}`}></div>\n              <div>\n                <p className=\"text-white font-medium\">{cert.label}</p>\n                <p className=\"text-gray-400 text-sm\">{cert.detail}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Quick Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button className=\"bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-lg font-medium transition-colors\">\n            View Available Jobs\n          </button>\n          <button className=\"bg-gray-700 hover:bg-gray-600 text-white px-4 py-3 rounded-lg font-medium transition-colors\">\n            Update Profile\n          </button>\n          <button className=\"bg-gray-700 hover:bg-gray-600 text-white px-4 py-3 rounded-lg font-medium transition-colors\">\n            Contact Support\n          </button>\n        </div>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Recent Activity</h3>\n        <div className=\"space-y-3\">\n          {(pilotProfile.completedJobs || 0) > 0 ? (\n            <div className=\"text-gray-300\">\n              <p>• Profile created on {pilotProfile.createdAt ? new Date(pilotProfile.createdAt).toLocaleDateString() : 'Unknown'}</p>\n              <p>• {pilotProfile.completedJobs} jobs completed</p>\n              {pilotProfile.approvedAt && (\n                <p>• Approved for platform on {pilotProfile.approvedAt ? new Date(pilotProfile.approvedAt).toLocaleDateString() : 'Unknown'}</p>\n              )}\n            </div>\n          ) : (\n            <p className=\"text-gray-400\">No recent activity. Start by browsing available jobs!</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardOverview;","size_bytes":5209},"src/components/PilotDashboard/JobBoard.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { PilotProfile } from '../../../shared/schema';\n\ninterface Job {\n  id: string;\n  title: string;\n  description: string;\n  location: string;\n  status: string;\n  fileCount: number;\n  scheduledDate: string;\n  compensation?: number;\n  requirements?: string[];\n  type?: 'solar' | 'electrical' | 'infrastructure';\n}\n\ninterface JobBoardProps {\n  pilotProfile: PilotProfile;\n}\n\nconst JobBoard = ({ pilotProfile }: JobBoardProps) => {\n  const [jobs, setJobs] = useState<Job[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState<'all' | 'solar' | 'electrical' | 'infrastructure'>('all');\n  const [appliedJobs, setAppliedJobs] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    fetchAvailableJobs();\n  }, []);\n\n  const fetchAvailableJobs = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/jobs/available');\n      if (response.ok) {\n        const data = await response.json();\n        setJobs(data);\n      }\n    } catch (error) {\n      console.error('Error fetching jobs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const applyForJob = async (jobId: string) => {\n    try {\n      const response = await fetch(`/api/jobs/${jobId}/apply`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      if (response.ok) {\n        setAppliedJobs(prev => new Set([...Array.from(prev), jobId]));\n        // Could show success toast here\n      }\n    } catch (error) {\n      console.error('Error applying for job:', error);\n    }\n  };\n\n  // Mock data for demonstration - this will be replaced by API data\n  const mockJobs: Job[] = [\n    {\n      id: '1',\n      title: 'Large Solar Farm Thermal Inspection',\n      description: 'Comprehensive thermal inspection of 500MW solar installation. Requires detailed thermal imaging of all panels and electrical connections.',\n      location: 'Phoenix, AZ',\n      status: 'available',\n      fileCount: 250,\n      scheduledDate: '2025-09-25',\n      compensation: 125000, // $1,250 in cents\n      requirements: ['Part 107 Certified', '2+ years thermal experience', 'Insurance required'],\n      type: 'solar'\n    },\n    {\n      id: '2',\n      title: 'Electrical Substation Inspection',\n      description: 'Thermal inspection of high-voltage electrical substation. Looking for overheating transformers and connections.',\n      location: 'Austin, TX',\n      status: 'available',\n      fileCount: 75,\n      scheduledDate: '2025-09-30',\n      compensation: 85000, // $850 in cents\n      requirements: ['Part 107 Certified', 'High-voltage experience preferred'],\n      type: 'electrical'\n    },\n    {\n      id: '3',\n      title: 'Commercial Solar Array - Maintenance Check',\n      description: 'Routine thermal inspection for commercial solar array. Previous anomalies detected, need follow-up analysis.',\n      location: 'San Diego, CA',\n      status: 'available',\n      fileCount: 120,\n      scheduledDate: '2025-10-05',\n      compensation: 95000, // $950 in cents\n      requirements: ['Part 107 Certified', 'Thermal camera required'],\n      type: 'solar'\n    }\n  ];\n\n  const displayJobs = jobs.length > 0 ? jobs : mockJobs;\n  const filteredJobs = filter === 'all' ? displayJobs : displayJobs.filter(job => job.type === filter);\n\n  const getJobTypeIcon = (type: string) => {\n    switch (type) {\n      case 'solar': return '☀️';\n      case 'electrical': return '⚡';\n      case 'infrastructure': return '🏗️';\n      default: return '📋';\n    }\n  };\n\n  const getJobTypeColor = (type: string) => {\n    switch (type) {\n      case 'solar': return 'bg-yellow-500';\n      case 'electrical': return 'bg-blue-500';\n      case 'infrastructure': return 'bg-gray-500';\n      default: return 'bg-orange-500';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-white\">Loading available jobs...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">Available Jobs</h2>\n        <div className=\"flex space-x-2\">\n          {(['all', 'solar', 'electrical', 'infrastructure'] as const).map((filterType) => (\n            <button\n              key={filterType}\n              onClick={() => setFilter(filterType)}\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                filter === filterType\n                  ? 'bg-orange-500 text-white'\n                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n              }`}\n            >\n              {filterType.charAt(0).toUpperCase() + filterType.slice(1)}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Jobs Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {filteredJobs.map((job) => (\n          <div key={job.id} className=\"bg-gray-800 rounded-lg p-6 border border-gray-700 hover:border-orange-500 transition-colors\">\n            {/* Job Header */}\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`${getJobTypeColor(job.type || 'solar')} p-2 rounded-lg`}>\n                  <span className=\"text-lg\">{getJobTypeIcon(job.type || 'solar')}</span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white\">{job.title}</h3>\n                  <p className=\"text-gray-400\">{job.location}</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-orange-400 font-bold\">\n                  ${((job.compensation || 0) / 100).toLocaleString()}\n                </p>\n                <p className=\"text-gray-400 text-sm\">Compensation</p>\n              </div>\n            </div>\n\n            {/* Job Description */}\n            <p className=\"text-gray-300 mb-4 line-clamp-3\">{job.description}</p>\n\n            {/* Job Details */}\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              <div>\n                <p className=\"text-gray-400 text-sm\">Images Expected</p>\n                <p className=\"text-white font-medium\">{job.fileCount} files</p>\n              </div>\n              <div>\n                <p className=\"text-gray-400 text-sm\">Scheduled Date</p>\n                <p className=\"text-white font-medium\">\n                  {new Date(job.scheduledDate).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n\n            {/* Requirements */}\n            {job.requirements && (\n              <div className=\"mb-4\">\n                <p className=\"text-gray-400 text-sm mb-2\">Requirements</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {job.requirements.map((req, index) => (\n                    <span\n                      key={index}\n                      className=\"bg-gray-700 text-gray-300 px-2 py-1 rounded text-xs\"\n                    >\n                      {req}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Apply Button */}\n            <button\n              onClick={() => applyForJob(job.id)}\n              disabled={appliedJobs.has(job.id)}\n              className={`w-full py-3 rounded-lg font-medium transition-colors ${\n                appliedJobs.has(job.id)\n                  ? 'bg-green-600 text-white cursor-not-allowed'\n                  : 'bg-orange-500 hover:bg-orange-600 text-white'\n              }`}\n            >\n              {appliedJobs.has(job.id) ? '✓ Applied' : 'Apply for Job'}\n            </button>\n          </div>\n        ))}\n      </div>\n\n      {filteredJobs.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-400\">No jobs available for the selected filter.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default JobBoard;","size_bytes":8113},"src/components/PilotDashboard/MyProjects.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { PilotProfile } from '../../../shared/schema';\n\ninterface Project {\n  id: string;\n  title: string;\n  description: string;\n  location: string;\n  status: 'assigned' | 'in_progress' | 'completed' | 'cancelled';\n  fileCount: number;\n  processedCount: number;\n  scheduledDate: string;\n  completedAt?: string;\n  compensation: number;\n  rating?: number;\n  feedback?: string;\n}\n\ninterface MyProjectsProps {\n  pilotProfile: PilotProfile;\n}\n\nconst MyProjects = ({ pilotProfile }: MyProjectsProps) => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState<'all' | 'assigned' | 'in_progress' | 'completed'>('all');\n\n  useEffect(() => {\n    fetchMyProjects();\n  }, []);\n\n  const fetchMyProjects = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/jobs/my-projects');\n      if (response.ok) {\n        const data = await response.json();\n        setProjects(data);\n      }\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProjectStatus = async (projectId: string, status: string) => {\n    try {\n      const response = await fetch(`/api/jobs/${projectId}/status`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ status })\n      });\n\n      if (response.ok) {\n        fetchMyProjects(); // Refresh the list\n      }\n    } catch (error) {\n      console.error('Error updating project status:', error);\n    }\n  };\n\n  // Mock data for demonstration\n  const mockProjects: Project[] = [\n    {\n      id: '1',\n      title: 'Solar Farm Inspection - Phoenix',\n      description: 'Large scale thermal inspection of solar panels and electrical infrastructure.',\n      location: 'Phoenix, AZ',\n      status: 'completed',\n      fileCount: 245,\n      processedCount: 245,\n      scheduledDate: '2025-09-15',\n      completedAt: '2025-09-15',\n      compensation: 125000,\n      rating: 5,\n      feedback: 'Excellent work! Very thorough inspection and detailed report.'\n    },\n    {\n      id: '2',\n      title: 'Electrical Substation Check',\n      description: 'Thermal inspection of high-voltage electrical equipment.',\n      location: 'Austin, TX',\n      status: 'in_progress',\n      fileCount: 75,\n      processedCount: 45,\n      scheduledDate: '2025-09-18',\n      compensation: 85000\n    },\n    {\n      id: '3',\n      title: 'Commercial Solar Array',\n      description: 'Routine maintenance inspection for commercial installation.',\n      location: 'San Diego, CA',\n      status: 'assigned',\n      fileCount: 120,\n      processedCount: 0,\n      scheduledDate: '2025-09-22',\n      compensation: 95000\n    }\n  ];\n\n  const displayProjects = projects.length > 0 ? projects : mockProjects;\n  const filteredProjects = filter === 'all' ? displayProjects : displayProjects.filter(project => project.status === filter);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'assigned': return 'bg-blue-500';\n      case 'in_progress': return 'bg-yellow-500';\n      case 'completed': return 'bg-green-500';\n      case 'cancelled': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'assigned': return '📋';\n      case 'in_progress': return '🔄';\n      case 'completed': return '✅';\n      case 'cancelled': return '❌';\n      default: return '📄';\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <span key={i} className={i < rating ? 'text-yellow-400' : 'text-gray-600'}>\n        ⭐\n      </span>\n    ));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-white\">Loading your projects...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">My Projects</h2>\n        <div className=\"flex space-x-2\">\n          {(['all', 'assigned', 'in_progress', 'completed'] as const).map((filterType) => (\n            <button\n              key={filterType}\n              onClick={() => setFilter(filterType)}\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                filter === filterType\n                  ? 'bg-orange-500 text-white'\n                  : 'bg-gray-700 text-gray-300 hover:bg-gray-600'\n              }`}\n            >\n              {filterType.charAt(0).toUpperCase() + filterType.slice(1).replace('_', ' ')}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Projects List */}\n      <div className=\"space-y-4\">\n        {filteredProjects.map((project) => (\n          <div key={project.id} className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n            {/* Project Header */}\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`${getStatusColor(project.status)} p-2 rounded-lg`}>\n                  <span className=\"text-lg\">{getStatusIcon(project.status)}</span>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white\">{project.title}</h3>\n                  <p className=\"text-gray-400\">{project.location}</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-orange-400 font-bold\">\n                  ${(project.compensation / 100).toLocaleString()}\n                </p>\n                <div className={`${getStatusColor(project.status)} text-white px-2 py-1 rounded text-xs font-medium`}>\n                  {project.status.charAt(0).toUpperCase() + project.status.slice(1).replace('_', ' ')}\n                </div>\n              </div>\n            </div>\n\n            {/* Project Description */}\n            <p className=\"text-gray-300 mb-4\">{project.description}</p>\n\n            {/* Project Progress */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n              <div>\n                <p className=\"text-gray-400 text-sm\">Progress</p>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex-1 bg-gray-700 rounded-full h-2\">\n                    <div \n                      className=\"bg-orange-500 h-2 rounded-full transition-all\"\n                      style={{ width: `${(project.processedCount / project.fileCount) * 100}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-white text-sm\">\n                    {project.processedCount}/{project.fileCount}\n                  </p>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-gray-400 text-sm\">Scheduled Date</p>\n                <p className=\"text-white font-medium\">\n                  {new Date(project.scheduledDate).toLocaleDateString()}\n                </p>\n              </div>\n              {project.completedAt && (\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Completed Date</p>\n                  <p className=\"text-white font-medium\">\n                    {new Date(project.completedAt).toLocaleDateString()}\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Rating and Feedback for completed projects */}\n            {project.status === 'completed' && project.rating && (\n              <div className=\"bg-gray-700 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <span className=\"text-gray-400 text-sm\">Client Rating:</span>\n                  <div className=\"flex\">{renderStars(project.rating)}</div>\n                </div>\n                {project.feedback && (\n                  <p className=\"text-gray-300 text-sm italic\">\"{project.feedback}\"</p>\n                )}\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-3\">\n              {project.status === 'assigned' && (\n                <button\n                  onClick={() => updateProjectStatus(project.id, 'in_progress')}\n                  className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg font-medium transition-colors\"\n                >\n                  Start Project\n                </button>\n              )}\n              {project.status === 'in_progress' && (\n                <button\n                  onClick={() => updateProjectStatus(project.id, 'completed')}\n                  className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg font-medium transition-colors\"\n                >\n                  Mark Complete\n                </button>\n              )}\n              <button className=\"bg-gray-600 hover:bg-gray-500 text-white px-4 py-2 rounded-lg font-medium transition-colors\">\n                View Details\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {filteredProjects.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-400\">\n            {filter === 'all' ? 'No projects yet. Check the Job Board for available opportunities!' : `No ${filter.replace('_', ' ')} projects.`}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MyProjects;","size_bytes":9672},"src/components/PilotDashboard/ProfileSettings.tsx":{"content":"\"use client\";\n\nimport { useState } from 'react';\nimport { User, PilotProfile } from '../../../shared/schema';\n\ninterface ProfileSettingsProps {\n  user: User;\n  pilotProfile: PilotProfile;\n}\n\nconst ProfileSettings = ({ user, pilotProfile }: ProfileSettingsProps) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: user.firstName || '',\n    lastName: user.lastName || '',\n    email: user.email || '',\n    companyName: pilotProfile.companyName || '',\n    phoneNumber: pilotProfile.phoneNumber || '',\n    address: pilotProfile.address || '',\n    city: pilotProfile.city || '',\n    state: pilotProfile.state || '',\n    zipCode: pilotProfile.zipCode || '',\n    part107Number: pilotProfile.part107Number || '',\n    thermalExperienceYears: pilotProfile.thermalExperienceYears || 0,\n    totalFlightHours: pilotProfile.totalFlightHours || 0,\n    insuranceProvider: pilotProfile.insuranceProvider || '',\n    insurancePolicyNumber: pilotProfile.insurancePolicyNumber || '',\n    droneModels: (pilotProfile.droneModels as string[] || []).join(', '),\n    thermalCameraModels: (pilotProfile.thermalCameraModels as string[] || []).join(', '),\n    serviceStates: (pilotProfile.serviceStates as string[] || []).join(', '),\n    maxTravelDistance: pilotProfile.maxTravelDistance || 0,\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/profile/update', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user: {\n            firstName: formData.firstName,\n            lastName: formData.lastName,\n          },\n          pilotProfile: {\n            companyName: formData.companyName,\n            phoneNumber: formData.phoneNumber,\n            address: formData.address,\n            city: formData.city,\n            state: formData.state,\n            zipCode: formData.zipCode,\n            part107Number: formData.part107Number,\n            thermalExperienceYears: Number(formData.thermalExperienceYears),\n            totalFlightHours: Number(formData.totalFlightHours),\n            insuranceProvider: formData.insuranceProvider,\n            insurancePolicyNumber: formData.insurancePolicyNumber,\n            droneModels: formData.droneModels.split(',').map(s => s.trim()).filter(s => s),\n            thermalCameraModels: formData.thermalCameraModels.split(',').map(s => s.trim()).filter(s => s),\n            serviceStates: formData.serviceStates.split(',').map(s => s.trim()).filter(s => s),\n            maxTravelDistance: Number(formData.maxTravelDistance),\n          }\n        })\n      });\n\n      if (response.ok) {\n        setIsEditing(false);\n        // Could show success toast here\n      }\n    } catch (error) {\n      console.error('Error updating profile:', error);\n    }\n  };\n\n  const formSections = [\n    {\n      title: 'Personal Information',\n      fields: [\n        { name: 'firstName', label: 'First Name', type: 'text', required: true },\n        { name: 'lastName', label: 'Last Name', type: 'text', required: true },\n        { name: 'email', label: 'Email', type: 'email', disabled: true },\n        { name: 'phoneNumber', label: 'Phone Number', type: 'tel' },\n      ]\n    },\n    {\n      title: 'Company Information',\n      fields: [\n        { name: 'companyName', label: 'Company Name', type: 'text' },\n        { name: 'address', label: 'Address', type: 'text' },\n        { name: 'city', label: 'City', type: 'text' },\n        { name: 'state', label: 'State', type: 'text' },\n        { name: 'zipCode', label: 'ZIP Code', type: 'text' },\n      ]\n    },\n    {\n      title: 'Pilot Qualifications',\n      fields: [\n        { name: 'part107Number', label: 'Part 107 License Number', type: 'text' },\n        { name: 'thermalExperienceYears', label: 'Thermal Experience (Years)', type: 'number' },\n        { name: 'totalFlightHours', label: 'Total Flight Hours', type: 'number' },\n      ]\n    },\n    {\n      title: 'Equipment',\n      fields: [\n        { name: 'droneModels', label: 'Drone Models (comma separated)', type: 'text' },\n        { name: 'thermalCameraModels', label: 'Thermal Camera Models (comma separated)', type: 'text' },\n      ]\n    },\n    {\n      title: 'Service Area',\n      fields: [\n        { name: 'serviceStates', label: 'Service States (comma separated)', type: 'text' },\n        { name: 'maxTravelDistance', label: 'Max Travel Distance (miles)', type: 'number' },\n      ]\n    },\n    {\n      title: 'Insurance',\n      fields: [\n        { name: 'insuranceProvider', label: 'Insurance Provider', type: 'text' },\n        { name: 'insurancePolicyNumber', label: 'Policy Number', type: 'text' },\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">Profile Settings</h2>\n        <button\n          onClick={() => setIsEditing(!isEditing)}\n          className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n            isEditing\n              ? 'bg-gray-600 hover:bg-gray-500 text-white'\n              : 'bg-orange-500 hover:bg-orange-600 text-white'\n          }`}\n        >\n          {isEditing ? 'Cancel' : 'Edit Profile'}\n        </button>\n      </div>\n\n      {/* Account Status */}\n      <div className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">Account Status</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <p className=\"text-gray-400 text-sm\">Status</p>\n            <div className={`inline-flex px-2 py-1 rounded text-sm font-medium ${\n              pilotProfile.status === 'approved' ? 'bg-green-500 text-white' :\n              pilotProfile.status === 'active' ? 'bg-blue-500 text-white' :\n              pilotProfile.status === 'pending' ? 'bg-yellow-500 text-black' :\n              'bg-red-500 text-white'\n            }`}>\n              {pilotProfile.status ? pilotProfile.status.charAt(0).toUpperCase() + pilotProfile.status.slice(1) : 'Unknown'}\n            </div>\n          </div>\n          <div>\n            <p className=\"text-gray-400 text-sm\">Member Since</p>\n            <p className=\"text-white font-medium\">\n              {pilotProfile.createdAt ? new Date(pilotProfile.createdAt).toLocaleDateString() : 'Unknown'}\n            </p>\n          </div>\n          {pilotProfile.approvedAt && (\n            <div>\n              <p className=\"text-gray-400 text-sm\">Approved Date</p>\n              <p className=\"text-white font-medium\">\n                {new Date(pilotProfile.approvedAt).toLocaleDateString()}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Profile Form */}\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {formSections.map((section, sectionIndex) => (\n          <div key={sectionIndex} className=\"bg-gray-800 rounded-lg p-6 border border-gray-700\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">{section.title}</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {section.fields.map((field) => (\n                <div key={field.name}>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    {field.label}\n                    {field.required && <span className=\"text-red-400 ml-1\">*</span>}\n                  </label>\n                  <input\n                    type={field.type}\n                    name={field.name}\n                    value={formData[field.name as keyof typeof formData]}\n                    onChange={handleInputChange}\n                    disabled={!isEditing || field.disabled}\n                    required={field.required}\n                    className={`w-full px-3 py-2 rounded-lg border text-white transition-colors ${\n                      !isEditing || field.disabled\n                        ? 'bg-gray-700 border-gray-600 cursor-not-allowed'\n                        : 'bg-gray-700 border-gray-600 focus:border-orange-500 focus:outline-none'\n                    }`}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n\n        {/* Save Button */}\n        {isEditing && (\n          <div className=\"flex justify-end space-x-4\">\n            <button\n              type=\"button\"\n              onClick={() => setIsEditing(false)}\n              className=\"px-6 py-3 bg-gray-600 hover:bg-gray-500 text-white rounded-lg font-medium transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-6 py-3 bg-orange-500 hover:bg-orange-600 text-white rounded-lg font-medium transition-colors\"\n            >\n              Save Changes\n            </button>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ProfileSettings;","size_bytes":9254},"src/components/PilotDashboard/index.tsx":{"content":"\"use client\";\n\nimport { useState } from 'react';\nimport { User, PilotProfile } from '../../../shared/schema';\nimport DashboardOverview from './DashboardOverview';\nimport JobBoard from './JobBoard';\nimport MyProjects from './MyProjects';\nimport ProfileSettings from './ProfileSettings';\n\ninterface PilotDashboardProps {\n  user: User;\n  pilotProfile: PilotProfile;\n}\n\ntype DashboardView = 'overview' | 'jobBoard' | 'myProjects' | 'profile';\n\nconst PilotDashboard = ({ user, pilotProfile }: PilotDashboardProps) => {\n  const [activeView, setActiveView] = useState<DashboardView>('overview');\n\n  const navigationItems = [\n    { key: 'overview', label: 'Overview', icon: '📊' },\n    { key: 'jobBoard', label: 'Job Board', icon: '🎯' },\n    { key: 'myProjects', label: 'My Projects', icon: '📋' },\n    { key: 'profile', label: 'Profile', icon: '👤' },\n  ] as const;\n\n  const renderContent = () => {\n    switch (activeView) {\n      case 'overview':\n        return <DashboardOverview user={user} pilotProfile={pilotProfile} />;\n      case 'jobBoard':\n        return <JobBoard pilotProfile={pilotProfile} />;\n      case 'myProjects':\n        return <MyProjects pilotProfile={pilotProfile} />;\n      case 'profile':\n        return <ProfileSettings user={user} pilotProfile={pilotProfile} />;\n      default:\n        return <DashboardOverview user={user} pilotProfile={pilotProfile} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-orange-500 to-orange-600 shadow-lg\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">\n                Pilot Dashboard\n              </h1>\n              <p className=\"text-orange-100\">\n                Welcome back, {user.firstName || user.email}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <div className=\"text-sm text-orange-100\">Status</div>\n                <div className={`text-sm font-semibold px-2 py-1 rounded ${\n                  pilotProfile.status === 'approved' ? 'bg-green-500 text-white' :\n                  pilotProfile.status === 'active' ? 'bg-blue-500 text-white' :\n                  'bg-yellow-500 text-black'\n                }`}>\n                  {pilotProfile.status ? pilotProfile.status.charAt(0).toUpperCase() + pilotProfile.status.slice(1) : 'Unknown'}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar Navigation */}\n          <div className=\"lg:col-span-1\">\n            <nav className=\"space-y-2\">\n              {navigationItems.map((item) => (\n                <button\n                  key={item.key}\n                  onClick={() => setActiveView(item.key)}\n                  className={`w-full flex items-center px-4 py-3 text-left rounded-lg transition-colors ${\n                    activeView === item.key\n                      ? 'bg-orange-500 text-white'\n                      : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                  }`}\n                >\n                  <span className=\"mr-3 text-lg\">{item.icon}</span>\n                  {item.label}\n                </button>\n              ))}\n            </nav>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            {renderContent()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PilotDashboard;","size_bytes":3782},"src/app/api/newsletter-signup/route.ts":{"content":"import { NextResponse } from \"next/server\";\nimport { sendEmail } from \"@/utils/replitmail\";\n\nexport async function POST(request: Request) {\n  try {\n    const { email } = await request.json();\n\n    if (!email || !email.includes('@')) {\n      return NextResponse.json(\n        { error: \"Valid email address is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Send welcome email to new subscriber\n    await sendEmail({\n      to: email,\n      subject: \"Welcome to the ComplianceDrone Pilot Community!\",\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <h2 style=\"color: #475569;\">Welcome to ComplianceDrone!</h2>\n          \n          <p>Thank you for joining our nationwide community of drone pilots!</p>\n          \n          <p>You'll now receive the latest updates on:</p>\n          <ul>\n            <li><strong>Solar Panel Inspections</strong> - Advanced thermal imaging techniques</li>\n            <li><strong>Electrical Infrastructure Monitoring</strong> - Best practices and safety protocols</li>\n            <li><strong>Drone Technology</strong> - Latest equipment and software updates</li>\n            <li><strong>Pilot Opportunities</strong> - Exclusive job openings and projects</li>\n          </ul>\n          \n          <p>Ready to start flying with us? <a href=\"https://compliancedrone.com/pilot-registration\" style=\"color: #475569;\">Apply to become a certified pilot</a> and join our professional network from coast to coast.</p>\n          \n          <p>Stay safe and fly high!</p>\n          <p><strong>The ComplianceDrone Team</strong></p>\n          \n          <hr style=\"margin: 30px 0; border: none; border-top: 1px solid #e2e8f0;\">\n          <p style=\"font-size: 12px; color: #64748b;\">\n            ComplianceDrone - Professional Thermal Inspection Services<br>\n            <a href=\"https://compliancedrone.com\">compliancedrone.com</a>\n          </p>\n        </div>\n      `,\n      text: `\nWelcome to ComplianceDrone!\n\nThank you for joining our nationwide community of drone pilots!\n\nYou'll now receive the latest updates on:\n• Solar Panel Inspections - Advanced thermal imaging techniques\n• Electrical Infrastructure Monitoring - Best practices and safety protocols  \n• Drone Technology - Latest equipment and software updates\n• Pilot Opportunities - Exclusive job openings and projects\n\nReady to start flying with us? Apply to become a certified pilot at compliancedrone.com/pilot-registration and join our professional network from coast to coast.\n\nStay safe and fly high!\nThe ComplianceDrone Team\n\nComplianceDrone - Professional Thermal Inspection Services\ncompliancedrone.com\n      `\n    });\n\n    return NextResponse.json({ \n      message: \"Successfully subscribed to newsletter!\" \n    });\n\n  } catch (error) {\n    console.error(\"Newsletter signup error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to subscribe. Please try again.\" },\n      { status: 500 }\n    );\n  }\n}","size_bytes":3002},"src/components/NewsletterSignup/index.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\n\nconst NewsletterSignup = () => {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email || !email.includes('@')) {\n      toast.error(\"Please enter a valid email address\");\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/newsletter-signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast.success(\"Welcome to the community! Check your email for details.\");\n        setEmail(\"\");\n      } else {\n        toast.error(data.error || \"Something went wrong. Please try again.\");\n      }\n    } catch (error) {\n      toast.error(\"Failed to subscribe. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"mx-auto max-w-md\">\n      <div className=\"flex flex-col gap-3 sm:flex-row\">\n        <input \n          type=\"email\" \n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"Enter your email address\"\n          disabled={isLoading}\n          className=\"flex-1 rounded-lg bg-white/10 px-4 py-3 text-white placeholder-white/60 backdrop-blur-sm focus:outline-none focus:ring-2 focus:ring-white/30 disabled:opacity-50\"\n        />\n        <button \n          type=\"submit\"\n          disabled={isLoading}\n          className=\"rounded-lg bg-white px-6 py-3 font-medium text-blue-600 transition-colors hover:bg-white/90 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isLoading ? \"Joining...\" : \"Join Community\"}\n        </button>\n      </div>\n      <p className=\"mt-3 text-sm text-white/70\">\n        Get updates on solar inspections, drone technology, and pilot opportunities\n      </p>\n    </form>\n  );\n};\n\nexport default NewsletterSignup;","size_bytes":2131},"src/utils/replitmail.ts":{"content":"import { z } from \"zod\";\n\n// Zod schema matching the backend implementation\nexport const zSmtpMessage = z.object({\n  to: z\n    .union([z.string().email(), z.array(z.string().email())])\n    .describe(\"Recipient email address(es)\"),\n  cc: z\n    .union([z.string().email(), z.array(z.string().email())])\n    .optional()\n    .describe(\"CC recipient email address(es)\"),\n  subject: z.string().describe(\"Email subject\"),\n  text: z.string().optional().describe(\"Plain text body\"),\n  html: z.string().optional().describe(\"HTML body\"),\n  attachments: z\n    .array(\n      z.object({\n        filename: z.string().describe(\"File name\"),\n        content: z.string().describe(\"Base64 encoded content\"),\n        contentType: z.string().optional().describe(\"MIME type\"),\n        encoding: z\n          .enum([\"base64\", \"7bit\", \"quoted-printable\", \"binary\"])\n          .default(\"base64\"),\n      })\n    )\n    .optional()\n    .describe(\"Email attachments\"),\n});\n\nexport type SmtpMessage = z.infer<typeof zSmtpMessage>\n\nfunction getAuthToken(): string {\n  const xReplitToken = process.env.REPL_IDENTITY\n    ? \"repl \" + process.env.REPL_IDENTITY\n    : process.env.WEB_REPL_RENEWAL\n      ? \"depl \" + process.env.WEB_REPL_RENEWAL\n      : null;\n\n  if (!xReplitToken) {\n    throw new Error(\n      \"No authentication token found. Please set REPL_IDENTITY or ensure you're running in Replit environment.\"\n    );\n  }\n\n  return xReplitToken;\n}\n\nexport async function sendEmail(message: SmtpMessage): Promise<{\n  accepted: string[];\n  rejected: string[];\n  pending?: string[];\n  messageId: string;\n  response: string;\n}> {\n  const authToken = getAuthToken();\n\n  const response = await fetch(\n    \"https://connectors.replit.com/api/v2/mailer/send\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X_REPLIT_TOKEN\": authToken,\n      },\n      body: JSON.stringify({\n        to: message.to,\n        cc: message.cc,\n        subject: message.subject,\n        text: message.text,\n        html: message.html,\n        attachments: message.attachments,\n      }),\n    }\n  );\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Failed to send email\");\n  }\n\n  return await response.json();\n}","size_bytes":2246}},"version":1}